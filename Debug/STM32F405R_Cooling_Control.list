
STM32F405R_Cooling_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006acc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006c58  08006c58  00016c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ca0  08006ca0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006ca0  08006ca0  00016ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ca8  08006ca8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ca8  08006ca8  00016ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cac  08006cac  00016cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  20000080  08006d30  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  08006d30  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf9b  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ec3  00000000  00000000  0003c04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  00041280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c0d  00000000  00000000  00042430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198a9  00000000  00000000  0006703d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2125  00000000  00000000  000808e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152a0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005248  00000000  00000000  00152a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006c3c 	.word	0x08006c3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08006c3c 	.word	0x08006c3c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96e 	b.w	8000e58 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8083 	bne.w	8000caa <__udivmoddi4+0x116>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d947      	bls.n	8000c3a <__udivmoddi4+0xa6>
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b142      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	f1c2 0020 	rsb	r0, r2, #32
 8000bb4:	fa24 f000 	lsr.w	r0, r4, r0
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	4097      	lsls	r7, r2
 8000bbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bcc:	fa1f fe87 	uxth.w	lr, r7
 8000bd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000be6:	f080 8119 	bcs.w	8000e1c <__udivmoddi4+0x288>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8116 	bls.w	8000e1c <__udivmoddi4+0x288>
 8000bf0:	3e02      	subs	r6, #2
 8000bf2:	443b      	add	r3, r7
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	f080 8105 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	f240 8102 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	443c      	add	r4, r7
 8000c20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	2600      	movs	r6, #0
 8000c2a:	b11d      	cbz	r5, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c5 4300 	strd	r4, r3, [r5]
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	b902      	cbnz	r2, 8000c3e <__udivmoddi4+0xaa>
 8000c3c:	deff      	udf	#255	; 0xff
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d150      	bne.n	8000ce8 <__udivmoddi4+0x154>
 8000c46:	1bcb      	subs	r3, r1, r7
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	2601      	movs	r6, #1
 8000c52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c56:	0c21      	lsrs	r1, r4, #16
 8000c58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c60:	fb08 f30c 	mul.w	r3, r8, ip
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000c68:	1879      	adds	r1, r7, r1
 8000c6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0xe2>
 8000c70:	428b      	cmp	r3, r1
 8000c72:	f200 80e9 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000c76:	4684      	mov	ip, r0
 8000c78:	1ac9      	subs	r1, r1, r3
 8000c7a:	b2a3      	uxth	r3, r4
 8000c7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c88:	fb08 f800 	mul.w	r8, r8, r0
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x10c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x10a>
 8000c98:	45a0      	cmp	r8, r4
 8000c9a:	f200 80d9 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	eba4 0408 	sub.w	r4, r4, r8
 8000ca4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca8:	e7bf      	b.n	8000c2a <__udivmoddi4+0x96>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0x12e>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80b1 	beq.w	8000e16 <__udivmoddi4+0x282>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x1cc>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0x140>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80b8 	bhi.w	8000e44 <__udivmoddi4+0x2b0>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	468c      	mov	ip, r1
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0a8      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000ce2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000ce8:	f1c2 0320 	rsb	r3, r2, #32
 8000cec:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf0:	4097      	lsls	r7, r2
 8000cf2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cf6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfa:	40d9      	lsrs	r1, r3
 8000cfc:	4330      	orrs	r0, r6
 8000cfe:	0c03      	lsrs	r3, r0, #16
 8000d00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d10:	fb06 f108 	mul.w	r1, r6, r8
 8000d14:	4299      	cmp	r1, r3
 8000d16:	fa04 f402 	lsl.w	r4, r4, r2
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x19c>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d22:	f080 808d 	bcs.w	8000e40 <__udivmoddi4+0x2ac>
 8000d26:	4299      	cmp	r1, r3
 8000d28:	f240 808a 	bls.w	8000e40 <__udivmoddi4+0x2ac>
 8000d2c:	3e02      	subs	r6, #2
 8000d2e:	443b      	add	r3, r7
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b281      	uxth	r1, r0
 8000d34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d40:	fb00 f308 	mul.w	r3, r0, r8
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x1c4>
 8000d48:	1879      	adds	r1, r7, r1
 8000d4a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d4e:	d273      	bcs.n	8000e38 <__udivmoddi4+0x2a4>
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d971      	bls.n	8000e38 <__udivmoddi4+0x2a4>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4439      	add	r1, r7
 8000d58:	1acb      	subs	r3, r1, r3
 8000d5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d5e:	e778      	b.n	8000c52 <__udivmoddi4+0xbe>
 8000d60:	f1c6 0c20 	rsb	ip, r6, #32
 8000d64:	fa03 f406 	lsl.w	r4, r3, r6
 8000d68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d6c:	431c      	orrs	r4, r3
 8000d6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	0c3b      	lsrs	r3, r7, #16
 8000d82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d86:	fa1f f884 	uxth.w	r8, r4
 8000d8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d92:	fb09 fa08 	mul.w	sl, r9, r8
 8000d96:	458a      	cmp	sl, r1
 8000d98:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x220>
 8000da2:	1861      	adds	r1, r4, r1
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da8:	d248      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000daa:	458a      	cmp	sl, r1
 8000dac:	d946      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000dae:	f1a9 0902 	sub.w	r9, r9, #2
 8000db2:	4421      	add	r1, r4
 8000db4:	eba1 010a 	sub.w	r1, r1, sl
 8000db8:	b2bf      	uxth	r7, r7
 8000dba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dc6:	fb00 f808 	mul.w	r8, r0, r8
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x24a>
 8000dce:	19e7      	adds	r7, r4, r7
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d22e      	bcs.n	8000e34 <__udivmoddi4+0x2a0>
 8000dd6:	45b8      	cmp	r8, r7
 8000dd8:	d92c      	bls.n	8000e34 <__udivmoddi4+0x2a0>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4427      	add	r7, r4
 8000dde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de2:	eba7 0708 	sub.w	r7, r7, r8
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	454f      	cmp	r7, r9
 8000dec:	46c6      	mov	lr, r8
 8000dee:	4649      	mov	r1, r9
 8000df0:	d31a      	bcc.n	8000e28 <__udivmoddi4+0x294>
 8000df2:	d017      	beq.n	8000e24 <__udivmoddi4+0x290>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x27a>
 8000df6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dfa:	eb67 0701 	sbc.w	r7, r7, r1
 8000dfe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e02:	40f2      	lsrs	r2, r6
 8000e04:	ea4c 0202 	orr.w	r2, ip, r2
 8000e08:	40f7      	lsrs	r7, r6
 8000e0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	462e      	mov	r6, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e70b      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	e6e9      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e20:	4618      	mov	r0, r3
 8000e22:	e6fd      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e24:	4543      	cmp	r3, r8
 8000e26:	d2e5      	bcs.n	8000df4 <__udivmoddi4+0x260>
 8000e28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e30:	3801      	subs	r0, #1
 8000e32:	e7df      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e7d2      	b.n	8000dde <__udivmoddi4+0x24a>
 8000e38:	4660      	mov	r0, ip
 8000e3a:	e78d      	b.n	8000d58 <__udivmoddi4+0x1c4>
 8000e3c:	4681      	mov	r9, r0
 8000e3e:	e7b9      	b.n	8000db4 <__udivmoddi4+0x220>
 8000e40:	4666      	mov	r6, ip
 8000e42:	e775      	b.n	8000d30 <__udivmoddi4+0x19c>
 8000e44:	4630      	mov	r0, r6
 8000e46:	e74a      	b.n	8000cde <__udivmoddi4+0x14a>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	4439      	add	r1, r7
 8000e4e:	e713      	b.n	8000c78 <__udivmoddi4+0xe4>
 8000e50:	3802      	subs	r0, #2
 8000e52:	443c      	add	r4, r7
 8000e54:	e724      	b.n	8000ca0 <__udivmoddi4+0x10c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <GAS_CCTL_outputInit>:
static void GAS_CCTL_onAll(void);
static void GAS_CCTL_offAll(void);
void GAS_CCTL_Control(void);

void GAS_CCTL_outputInit(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e60:	2100      	movs	r1, #0
 8000e62:	480a      	ldr	r0, [pc, #40]	; (8000e8c <GAS_CCTL_outputInit+0x30>)
 8000e64:	f004 fbe0 	bl	8005628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4809      	ldr	r0, [pc, #36]	; (8000e90 <GAS_CCTL_outputInit+0x34>)
 8000e6c:	f004 fbdc 	bl	8005628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000e70:	2104      	movs	r1, #4
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <GAS_CCTL_outputInit+0x38>)
 8000e74:	f004 fbd8 	bl	8005628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000e78:	2108      	movs	r1, #8
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <GAS_CCTL_outputInit+0x34>)
 8000e7c:	f004 fbd4 	bl	8005628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000e80:	210c      	movs	r1, #12
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <GAS_CCTL_outputInit+0x38>)
 8000e84:	f004 fbd0 	bl	8005628 <HAL_TIM_PWM_Start>

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200003c8 	.word	0x200003c8
 8000e90:	20000380 	.word	0x20000380
 8000e94:	200002f0 	.word	0x200002f0

08000e98 <GAS_CCTL_onAll>:

static void GAS_CCTL_onAll(void){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ExternalFan_INH_Pin, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea2:	4807      	ldr	r0, [pc, #28]	; (8000ec0 <GAS_CCTL_onAll+0x28>)
 8000ea4:	f003 fce2 	bl	800486c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Radiator0_INH_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2140      	movs	r1, #64	; 0x40
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <GAS_CCTL_onAll+0x28>)
 8000eae:	f003 fcdd 	bl	800486c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Radiator1_INH_Pin, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <GAS_CCTL_onAll+0x28>)
 8000eb8:	f003 fcd8 	bl	800486c <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOB,WaterPump0_INH_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOB,Waterpump1_INH_Pin, GPIO_PIN_SET);
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40020400 	.word	0x40020400

08000ec4 <GAS_CCTL_Control>:
//	HAL_GPIO_WritePin(GPIOB,WaterPump0_INH_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOB,Waterpump1_INH_Pin, GPIO_PIN_SET);
}


void GAS_CCTL_Control(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	; 0x30
 8000ec8:	af00      	add	r7, sp, #0

	float a0 = 1.9308;
 8000eca:	4b6b      	ldr	r3, [pc, #428]	; (8001078 <GAS_CCTL_Control+0x1b4>)
 8000ecc:	617b      	str	r3, [r7, #20]
	uint8_t b0 = 60;
 8000ece:	233c      	movs	r3, #60	; 0x3c
 8000ed0:	74fb      	strb	r3, [r7, #19]
	float a1 = 1.007;
 8000ed2:	4b6a      	ldr	r3, [pc, #424]	; (800107c <GAS_CCTL_Control+0x1b8>)
 8000ed4:	60fb      	str	r3, [r7, #12]
	int16_t b1 = 79;
 8000ed6:	234f      	movs	r3, #79	; 0x4f
 8000ed8:	83bb      	strh	r3, [r7, #28]
	uint8_t duty0 = (int)((CoolingADC.Radiator0_T - b0)/a0) ;			//Radiator0,1_T => celcius degree of coolant producted by 10.
 8000eda:	4b69      	ldr	r3, [pc, #420]	; (8001080 <GAS_CCTL_Control+0x1bc>)
 8000edc:	899b      	ldrh	r3, [r3, #12]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	7cfb      	ldrb	r3, [r7, #19]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000eec:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ef8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000efc:	793b      	ldrb	r3, [r7, #4]
 8000efe:	77fb      	strb	r3, [r7, #31]
	uint8_t duty1 = (int)((CoolingADC.Radiator1_T - b1)/a1);
 8000f00:	4b5f      	ldr	r3, [pc, #380]	; (8001080 <GAS_CCTL_Control+0x1bc>)
 8000f02:	89db      	ldrh	r3, [r3, #14]
 8000f04:	461a      	mov	r2, r3
 8000f06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f14:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f20:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f24:	793b      	ldrb	r3, [r7, #4]
 8000f26:	76fb      	strb	r3, [r7, #27]

	if (duty1>99)duty1 = 99;
 8000f28:	7efb      	ldrb	r3, [r7, #27]
 8000f2a:	2b63      	cmp	r3, #99	; 0x63
 8000f2c:	d902      	bls.n	8000f34 <GAS_CCTL_Control+0x70>
 8000f2e:	2363      	movs	r3, #99	; 0x63
 8000f30:	76fb      	strb	r3, [r7, #27]
 8000f32:	e004      	b.n	8000f3e <GAS_CCTL_Control+0x7a>
	else if (duty1<20)duty1 = 20;
 8000f34:	7efb      	ldrb	r3, [r7, #27]
 8000f36:	2b13      	cmp	r3, #19
 8000f38:	d801      	bhi.n	8000f3e <GAS_CCTL_Control+0x7a>
 8000f3a:	2314      	movs	r3, #20
 8000f3c:	76fb      	strb	r3, [r7, #27]
	if (duty0>99)duty0 = 99;
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	2b63      	cmp	r3, #99	; 0x63
 8000f42:	d902      	bls.n	8000f4a <GAS_CCTL_Control+0x86>
 8000f44:	2363      	movs	r3, #99	; 0x63
 8000f46:	77fb      	strb	r3, [r7, #31]
 8000f48:	e004      	b.n	8000f54 <GAS_CCTL_Control+0x90>
	else if (duty0<20)duty0=20;
 8000f4a:	7ffb      	ldrb	r3, [r7, #31]
 8000f4c:	2b13      	cmp	r3, #19
 8000f4e:	d801      	bhi.n	8000f54 <GAS_CCTL_Control+0x90>
 8000f50:	2314      	movs	r3, #20
 8000f52:	77fb      	strb	r3, [r7, #31]

	GAS_CCTL_onAll();
 8000f54:	f7ff ffa0 	bl	8000e98 <GAS_CCTL_onAll>
	if (1){//TC_switch.B.AutoMode_ON){
		TIM1 -> CCR1 = duty1;  //External FAN
 8000f58:	4a4a      	ldr	r2, [pc, #296]	; (8001084 <GAS_CCTL_Control+0x1c0>)
 8000f5a:	7efb      	ldrb	r3, [r7, #27]
 8000f5c:	6353      	str	r3, [r2, #52]	; 0x34
//		TIM8 -> CCR1 = duty1;  //Radiator fan 1  (right)
		TIM8 -> CCR2 = duty1;	 //Water pump 1     (right)
 8000f5e:	4a4a      	ldr	r2, [pc, #296]	; (8001088 <GAS_CCTL_Control+0x1c4>)
 8000f60:	7efb      	ldrb	r3, [r7, #27]
 8000f62:	6393      	str	r3, [r2, #56]	; 0x38
//		TIM8 -> CCR3 = duty0;  //Radiator 0	   (left)
		TIM8 -> CCR4 = duty0;	 //Water pump 0      (left)
 8000f64:	4a48      	ldr	r2, [pc, #288]	; (8001088 <GAS_CCTL_Control+0x1c4>)
 8000f66:	7ffb      	ldrb	r3, [r7, #31]
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
	}




	float Ke = 0.5;
 8000f6a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Kr = 0.5;
 8000f70:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
	float Kw = 0.5;
 8000f76:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
	float Kp = 0.5;
 8000f7c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000f80:	623b      	str	r3, [r7, #32]

	stm32.B.External_IS = (uint8_t)(CoolingADC.External_IS * Ke);
 8000f82:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <GAS_CCTL_Control+0x1bc>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f8e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f9a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f9e:	793b      	ldrb	r3, [r7, #4]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b3a      	ldr	r3, [pc, #232]	; (800108c <GAS_CCTL_Control+0x1c8>)
 8000fa4:	701a      	strb	r2, [r3, #0]
	stm32.B.Radiator0_IS = (uint8_t)(CoolingADC.Radiator0_IS * Kr);
 8000fa6:	4b36      	ldr	r3, [pc, #216]	; (8001080 <GAS_CCTL_Control+0x1bc>)
 8000fa8:	88db      	ldrh	r3, [r3, #6]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fbe:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fc2:	793b      	ldrb	r3, [r7, #4]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b31      	ldr	r3, [pc, #196]	; (800108c <GAS_CCTL_Control+0x1c8>)
 8000fc8:	70da      	strb	r2, [r3, #3]
	stm32.B.Radiator1_IS = (uint8_t)(CoolingADC.Radiator1_IS* Kr);
 8000fca:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <GAS_CCTL_Control+0x1bc>)
 8000fcc:	891b      	ldrh	r3, [r3, #8]
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fe6:	793b      	ldrb	r3, [r7, #4]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <GAS_CCTL_Control+0x1c8>)
 8000fec:	711a      	strb	r2, [r3, #4]
	stm32.B.WaterPump0_IS = (uint8_t)(CoolingADC.WaterPump0_IS*Kw);
 8000fee:	4b24      	ldr	r3, [pc, #144]	; (8001080 <GAS_CCTL_Control+0x1bc>)
 8000ff0:	885b      	ldrh	r3, [r3, #2]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ffa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001006:	edc7 7a01 	vstr	s15, [r7, #4]
 800100a:	793b      	ldrb	r3, [r7, #4]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <GAS_CCTL_Control+0x1c8>)
 8001010:	705a      	strb	r2, [r3, #1]
	stm32.B.WaterPump1_IS = (uint8_t)(CoolingADC.WaterPump1_IS*Kw);
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <GAS_CCTL_Control+0x1bc>)
 8001014:	889b      	ldrh	r3, [r3, #4]
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800102a:	edc7 7a01 	vstr	s15, [r7, #4]
 800102e:	793b      	ldrb	r3, [r7, #4]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <GAS_CCTL_Control+0x1c8>)
 8001034:	709a      	strb	r2, [r3, #2]
	stm32.B.WaterPump_P = (uint8_t)(CoolingADC.WaterPump_P*Kp);
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <GAS_CCTL_Control+0x1bc>)
 8001038:	895b      	ldrh	r3, [r3, #10]
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001042:	edd7 7a08 	vldr	s15, [r7, #32]
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800104e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001052:	793b      	ldrb	r3, [r7, #4]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <GAS_CCTL_Control+0x1c8>)
 8001058:	715a      	strb	r2, [r3, #5]
	stm32.B.Radiator0_T = CoolingADC.Radiator0_T;
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <GAS_CCTL_Control+0x1bc>)
 800105c:	899b      	ldrh	r3, [r3, #12]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <GAS_CCTL_Control+0x1c8>)
 8001062:	719a      	strb	r2, [r3, #6]
	stm32.B.Radiator1_T = CoolingADC.Radiator1_T;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <GAS_CCTL_Control+0x1bc>)
 8001066:	89db      	ldrh	r3, [r3, #14]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <GAS_CCTL_Control+0x1c8>)
 800106c:	71da      	strb	r2, [r3, #7]
}
 800106e:	bf00      	nop
 8001070:	3730      	adds	r7, #48	; 0x30
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	3ff72474 	.word	0x3ff72474
 800107c:	3f80e560 	.word	0x3f80e560
 8001080:	200000a4 	.word	0x200000a4
 8001084:	40010000 	.word	0x40010000
 8001088:	40010400 	.word	0x40010400
 800108c:	2000009c 	.word	0x2000009c

08001090 <GAS_Can_txSetting>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef* hcan);
//void GAS_Can_recieveMessage(CAN_HandleTypeDef *hcan);

void GAS_Can_txSetting(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
	/*
	 * CAN tx set function
	 * set ID, IDE, DLC
	 */
	canTxHeader.ExtId = STM32_ID;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <GAS_Can_txSetting+0x2c>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <GAS_Can_txSetting+0x30>)
 800109c:	605a      	str	r2, [r3, #4]
	canTxHeader.IDE	= CAN_ID_EXT;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <GAS_Can_txSetting+0x30>)
 80010a0:	2204      	movs	r2, #4
 80010a2:	609a      	str	r2, [r3, #8]
	canTxHeader.RTR	= CAN_RTR_DATA;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <GAS_Can_txSetting+0x30>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
	canTxHeader.DLC	=	8;
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <GAS_Can_txSetting+0x30>)
 80010ac:	2208      	movs	r2, #8
 80010ae:	611a      	str	r2, [r3, #16]


}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000000 	.word	0x20000000
 80010c0:	200000f0 	.word	0x200000f0

080010c4 <GAS_Can_rxSetting>:

void GAS_Can_rxSetting(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	 * CAN rx set function
	 * IdHigh, IdLow for each 16bit in 29bit ID
	 * Set different FIFO and FilterBank
	 *
	 */
	sFilterConfig.FilterIdHigh = (TC_switch_ID<<3)>>16;				/*first 2byte in 29bit (shift need to IED,RTR,0)*/
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <GAS_Can_rxSetting+0x6c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	0c1b      	lsrs	r3, r3, #16
 80010d0:	4a18      	ldr	r2, [pc, #96]	; (8001134 <GAS_Can_rxSetting+0x70>)
 80010d2:	6013      	str	r3, [r2, #0]
	sFilterConfig.FilterIdLow = (0xffff & (TC_switch_ID << 3)) | (1<<2);	/*second 2byte in 29bit + IDE (shift need to IED,RTR,0/)*/
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <GAS_Can_rxSetting+0x6c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	b29b      	uxth	r3, r3
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <GAS_Can_rxSetting+0x70>)
 80010e2:	6053      	str	r3, [r2, #4]
	sFilterConfig.FilterMaskIdHigh = (0x0ffffff0<<3)>>16;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <GAS_Can_rxSetting+0x70>)
 80010e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80010ea:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow =(0xffff & (0x0FFFFFF0 << 3)) | (1<<2);
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <GAS_Can_rxSetting+0x70>)
 80010ee:	f64f 7284 	movw	r2, #65412	; 0xff84
 80010f2:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <GAS_Can_rxSetting+0x70>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterBank = 14;   /* YOU MUST USE FILTERBANK 14 if YOU USE CAN2!!!!!!!!!!!!!!! */
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <GAS_Can_rxSetting+0x70>)
 80010fc:	220e      	movs	r2, #14
 80010fe:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <GAS_Can_rxSetting+0x70>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <GAS_Can_rxSetting+0x70>)
 8001108:	2201      	movs	r2, #1
 800110a:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <GAS_Can_rxSetting+0x70>)
 800110e:	2201      	movs	r2, #1
 8001110:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <GAS_Can_rxSetting+0x70>)
 8001114:	220e      	movs	r2, #14
 8001116:	625a      	str	r2, [r3, #36]	; 0x24

		 if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8001118:	4906      	ldr	r1, [pc, #24]	; (8001134 <GAS_Can_rxSetting+0x70>)
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <GAS_Can_rxSetting+0x74>)
 800111c:	f001 ffca 	bl	80030b4 <HAL_CAN_ConfigFilter>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <GAS_Can_rxSetting+0x66>
		  {
		    /* Filter configuration Error */
		    Error_Handler();
 8001126:	f000 fd87 	bl	8001c38 <Error_Handler>
//	  {
//	    /* Filter configuration Error */
//	    Error_Handler();
//	  }

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000004 	.word	0x20000004
 8001134:	200000c8 	.word	0x200000c8
 8001138:	20000268 	.word	0x20000268

0800113c <GAS_Can_init>:

void GAS_Can_init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	/*
	 * GAS_CAN_init
	 * ActiveNotification for Rx message pending
	 */
	GAS_Can_txSetting();
 8001140:	f7ff ffa6 	bl	8001090 <GAS_Can_txSetting>
	GAS_Can_rxSetting();
 8001144:	f7ff ffbe 	bl	80010c4 <GAS_Can_rxSetting>
	HAL_CAN_Start(&hcan2);
 8001148:	4806      	ldr	r0, [pc, #24]	; (8001164 <GAS_Can_init+0x28>)
 800114a:	f002 f893 	bl	8003274 <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800114e:	2102      	movs	r1, #2
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <GAS_Can_init+0x28>)
 8001152:	f002 faf5 	bl	8003740 <HAL_CAN_ActivateNotification>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <GAS_Can_init+0x24>
	{
	  Error_Handler();
 800115c:	f000 fd6c 	bl	8001c38 <Error_Handler>
//	{
//	  Error_Handler();
//	}


}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000268 	.word	0x20000268

08001168 <GAS_Can_sendMessage>:

void GAS_Can_sendMessage()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	/*
	 * CAN send message function
	 * send Message data with sendData[8]
	 */
	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 800116c:	4806      	ldr	r0, [pc, #24]	; (8001188 <GAS_Can_sendMessage+0x20>)
 800116e:	f002 f9a0 	bl	80034b2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001172:	4603      	mov	r3, r0
 8001174:	4a05      	ldr	r2, [pc, #20]	; (800118c <GAS_Can_sendMessage+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
	HAL_CAN_AddTxMessage(&hcan2, &canTxHeader, &stm32.TxData[0], &TxMailBox);
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <GAS_Can_sendMessage+0x24>)
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <GAS_Can_sendMessage+0x28>)
 800117c:	4905      	ldr	r1, [pc, #20]	; (8001194 <GAS_Can_sendMessage+0x2c>)
 800117e:	4802      	ldr	r0, [pc, #8]	; (8001188 <GAS_Can_sendMessage+0x20>)
 8001180:	f002 f8bc 	bl	80032fc <HAL_CAN_AddTxMessage>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000268 	.word	0x20000268
 800118c:	20000110 	.word	0x20000110
 8001190:	2000009c 	.word	0x2000009c
 8001194:	200000f0 	.word	0x200000f0

08001198 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	/*
	 * CAN recieve data interrupt function
	 * Check Instance then recieve data in stm32_2.RxData
	 */
	if(hcan->Instance == CAN2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d11a      	bne.n	80011e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
	{
		uint8_t temp[8];
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, temp);
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80011b0:	2100      	movs	r1, #0
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f002 f9b2 	bl	800351c <HAL_CAN_GetRxMessage>
		if (canRxHeader.ExtId == 0x275C02){
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d107      	bne.n	80011d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
			memcpy(TC_order.RxData,temp,sizeof(uint8_t)*8);
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80011c4:	461a      	mov	r2, r3
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	cb03      	ldmia	r3!, {r0, r1}
 80011cc:	6010      	str	r0, [r2, #0]
 80011ce:	6051      	str	r1, [r2, #4]
		}
		else{
			memcpy(TC_switch.RxData,temp,sizeof(uint8_t)*8);
		}
	}
}
 80011d0:	e006      	b.n	80011e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
			memcpy(TC_switch.RxData,temp,sizeof(uint8_t)*8);
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80011d4:	461a      	mov	r2, r3
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	cb03      	ldmia	r3!, {r0, r1}
 80011dc:	6010      	str	r0, [r2, #0]
 80011de:	6051      	str	r1, [r2, #4]
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40006800 	.word	0x40006800
 80011ec:	2000011c 	.word	0x2000011c
 80011f0:	00275c02 	.word	0x00275c02
 80011f4:	200000b8 	.word	0x200000b8
 80011f8:	200000c0 	.word	0x200000c0

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f7ff ffc2 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <GAS_Scheduler_init>:
void GAS_Scheduler_taskCounter_1000ms(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void GAS_Schduler(void);

void GAS_Scheduler_init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

	SysTick_Config(SystemCoreClock/1000);
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <GAS_Scheduler_init+0x28>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <GAS_Scheduler_init+0x2c>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	099b      	lsrs	r3, r3, #6
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ffd3 	bl	8001250 <SysTick_Config>

//********CAN initialization********
	GAS_Can_init();
 80012aa:	f7ff ff47 	bl	800113c <GAS_Can_init>

//********PWM initialization********
	GAS_CCTL_outputInit();
 80012ae:	f7ff fdd5 	bl	8000e5c <GAS_CCTL_outputInit>
//	GAS_PWM_outputInit();

//********ADC initialization*******
	GAS_Vadc_init();
 80012b2:	f000 f89d 	bl	80013f0 <GAS_Vadc_init>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000000c 	.word	0x2000000c
 80012c0:	10624dd3 	.word	0x10624dd3

080012c4 <GAS_Scheduler_taskCounter_1ms>:



void GAS_Scheduler_taskCounter_1ms(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	GAS_Vadc_getValue();
 80012c8:	f000 f90a 	bl	80014e0 <GAS_Vadc_getValue>
	GAS_CCTL_Control();
 80012cc:	f7ff fdfa 	bl	8000ec4 <GAS_CCTL_Control>
//	GAS_Can_sendMessage();
//	GAS_PWM_changeOutput_ch1(ValueOfADC[0]);
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <GAS_Scheduler_taskCounter_10ms>:

void GAS_Scheduler_taskCounter_10ms(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	GAS_Can_sendMessage();
 80012d8:	f7ff ff46 	bl	8001168 <GAS_Can_sendMessage>

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <GAS_Scheduler_taskCounter_100ms>:

void GAS_Scheduler_taskCounter_100ms(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BlueLED_Pin);
 80012e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <GAS_Scheduler_taskCounter_100ms+0x14>)
 80012ea:	f003 fad8 	bl	800489e <HAL_GPIO_TogglePin>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40020400 	.word	0x40020400

080012f8 <GAS_Scheduler_taskCounter_1000ms>:
void GAS_Scheduler_taskCounter_1000ms(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	gTimerCnt++;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_SYSTICK_Callback+0x7c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <HAL_SYSTICK_Callback+0x7c>)
 8001314:	6013      	str	r3, [r2, #0]
			gTask.flag_1ms=True;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_SYSTICK_Callback+0x80>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
			if(gTimerCnt % 10 == 0)
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_SYSTICK_Callback+0x7c>)
 800131e:	6819      	ldr	r1, [r3, #0]
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_SYSTICK_Callback+0x84>)
 8001322:	fb83 2301 	smull	r2, r3, r3, r1
 8001326:	109a      	asrs	r2, r3, #2
 8001328:	17cb      	asrs	r3, r1, #31
 800132a:	1ad2      	subs	r2, r2, r3
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	1aca      	subs	r2, r1, r3
 8001336:	2a00      	cmp	r2, #0
 8001338:	d102      	bne.n	8001340 <HAL_SYSTICK_Callback+0x38>
			{
				gTask.flag_10ms=True;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <HAL_SYSTICK_Callback+0x80>)
 800133c:	2201      	movs	r2, #1
 800133e:	705a      	strb	r2, [r3, #1]
			}
			if(gTimerCnt % 100 == 0)
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_SYSTICK_Callback+0x7c>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_SYSTICK_Callback+0x88>)
 8001346:	fb83 1302 	smull	r1, r3, r3, r2
 800134a:	1159      	asrs	r1, r3, #5
 800134c:	17d3      	asrs	r3, r2, #31
 800134e:	1acb      	subs	r3, r1, r3
 8001350:	2164      	movs	r1, #100	; 0x64
 8001352:	fb01 f303 	mul.w	r3, r1, r3
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <HAL_SYSTICK_Callback+0x5a>
			{
				gTask.flag_100ms=True;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_SYSTICK_Callback+0x80>)
 800135e:	2201      	movs	r2, #1
 8001360:	709a      	strb	r2, [r3, #2]
			}

			if(gTimerCnt == 1000)
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_SYSTICK_Callback+0x7c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800136a:	d105      	bne.n	8001378 <HAL_SYSTICK_Callback+0x70>
			{
				gTask.flag_1000ms=True;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_SYSTICK_Callback+0x80>)
 800136e:	2201      	movs	r2, #1
 8001370:	70da      	strb	r2, [r3, #3]
				gTimerCnt = 0;
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_SYSTICK_Callback+0x7c>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
			}
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000184 	.word	0x20000184
 8001388:	2000017c 	.word	0x2000017c
 800138c:	66666667 	.word	0x66666667
 8001390:	51eb851f 	.word	0x51eb851f

08001394 <GAS_Scheduler>:
//		gTimerCnt = 0;
//	}
//}

void GAS_Scheduler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0


	if(gTask.flag_1ms == True)
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <GAS_Scheduler+0x58>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d104      	bne.n	80013ac <GAS_Scheduler+0x18>
	{
		gTask.flag_1ms = False;
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <GAS_Scheduler+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
		GAS_Scheduler_taskCounter_1ms();
 80013a8:	f7ff ff8c 	bl	80012c4 <GAS_Scheduler_taskCounter_1ms>
	}

	if(gTask.flag_10ms == True)
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <GAS_Scheduler+0x58>)
 80013ae:	785b      	ldrb	r3, [r3, #1]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d104      	bne.n	80013c0 <GAS_Scheduler+0x2c>
	{
		gTask.flag_10ms = False;
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <GAS_Scheduler+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	705a      	strb	r2, [r3, #1]
		GAS_Scheduler_taskCounter_10ms();
 80013bc:	f7ff ff8a 	bl	80012d4 <GAS_Scheduler_taskCounter_10ms>
	}

	if(gTask.flag_100ms == True)
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <GAS_Scheduler+0x58>)
 80013c2:	789b      	ldrb	r3, [r3, #2]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d104      	bne.n	80013d4 <GAS_Scheduler+0x40>
	{
		gTask.flag_100ms = False;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <GAS_Scheduler+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	709a      	strb	r2, [r3, #2]
		GAS_Scheduler_taskCounter_100ms();
 80013d0:	f7ff ff86 	bl	80012e0 <GAS_Scheduler_taskCounter_100ms>
	}

	if(gTask.flag_1000ms == True)
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <GAS_Scheduler+0x58>)
 80013d6:	78db      	ldrb	r3, [r3, #3]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d104      	bne.n	80013e8 <GAS_Scheduler+0x54>
	{
		gTask.flag_1000ms = False;
 80013de:	4b03      	ldr	r3, [pc, #12]	; (80013ec <GAS_Scheduler+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	70da      	strb	r2, [r3, #3]
		GAS_Scheduler_taskCounter_1000ms();
 80013e4:	f7ff ff88 	bl	80012f8 <GAS_Scheduler_taskCounter_1000ms>
	}

//	GAS_Can_recieveMessage(&hcan);
//	HAL_CAN_IRQHandler(&hcan);
//	  pin_state=HAL_GPIO_ReadPin(GPIO_PIN_8);
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000017c 	.word	0x2000017c

080013f0 <GAS_Vadc_init>:
void GAS_Vadc_getValue(void);



void GAS_Vadc_init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ValueOfADC, NumberOfVadc) != HAL_OK)
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <GAS_Vadc_init+0x20>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4906      	ldr	r1, [pc, #24]	; (8001414 <GAS_Vadc_init+0x24>)
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <GAS_Vadc_init+0x28>)
 80013fe:	f001 f98f 	bl	8002720 <HAL_ADC_Start_DMA>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <GAS_Vadc_init+0x1c>
	{
		Error_Handler();
 8001408:	f000 fc16 	bl	8001c38 <Error_Handler>
	}
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000008 	.word	0x20000008
 8001414:	2000018c 	.word	0x2000018c
 8001418:	200001c0 	.word	0x200001c0
 800141c:	00000000 	.word	0x00000000

08001420 <calcTemp>:

static uint16_t calcTemp(float ADCVal){
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	ed87 0a01 	vstr	s0, [r7, #4]
	float V = (float)(ADCVal*3.3/4095);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff f830 	bl	8000490 <__aeabi_f2d>
 8001430:	a323      	add	r3, pc, #140	; (adr r3, 80014c0 <calcTemp+0xa0>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f883 	bl	8000540 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	a321      	add	r3, pc, #132	; (adr r3, 80014c8 <calcTemp+0xa8>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff f9a4 	bl	8000794 <__aeabi_ddiv>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	f7ff fb36 	bl	8000ac4 <__aeabi_d2f>
 8001458:	4603      	mov	r3, r0
 800145a:	60fb      	str	r3, [r7, #12]
	float temp = 0.0048*exp(3.0409*V);
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f7ff f817 	bl	8000490 <__aeabi_f2d>
 8001462:	a31b      	add	r3, pc, #108	; (adr r3, 80014d0 <calcTemp+0xb0>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f86a 	bl	8000540 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	ec43 2b17 	vmov	d7, r2, r3
 8001474:	eeb0 0a47 	vmov.f32	s0, s14
 8001478:	eef0 0a67 	vmov.f32	s1, s15
 800147c:	f005 fa08 	bl	8006890 <exp>
 8001480:	ec51 0b10 	vmov	r0, r1, d0
 8001484:	a314      	add	r3, pc, #80	; (adr r3, 80014d8 <calcTemp+0xb8>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f859 	bl	8000540 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fb15 	bl	8000ac4 <__aeabi_d2f>
 800149a:	4603      	mov	r3, r0
 800149c:	60bb      	str	r3, [r7, #8]
	return (int)(temp*10);
 800149e:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ae:	ee17 3a90 	vmov	r3, s15
 80014b2:	b29b      	uxth	r3, r3
//	return ;
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	f3af 8000 	nop.w
 80014c0:	66666666 	.word	0x66666666
 80014c4:	400a6666 	.word	0x400a6666
 80014c8:	00000000 	.word	0x00000000
 80014cc:	40affe00 	.word	0x40affe00
 80014d0:	6113404f 	.word	0x6113404f
 80014d4:	400853c3 	.word	0x400853c3
 80014d8:	30553261 	.word	0x30553261
 80014dc:	3f73a92a 	.word	0x3f73a92a

080014e0 <GAS_Vadc_getValue>:

void GAS_Vadc_getValue(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	// R = 0.1 -> product 10
	CoolingADC.Radiator0_IS=ValueOfADC[0]*10;
 80014e4:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <GAS_Vadc_getValue+0xb8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	0092      	lsls	r2, r2, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <GAS_Vadc_getValue+0xbc>)
 80014f6:	80da      	strh	r2, [r3, #6]
	CoolingADC.Remain=ValueOfADC[1]*10;
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <GAS_Vadc_getValue+0xb8>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	4413      	add	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <GAS_Vadc_getValue+0xbc>)
 800150a:	821a      	strh	r2, [r3, #16]
	CoolingADC.External_IS=ValueOfADC[2]*10;
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <GAS_Vadc_getValue+0xb8>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	b29b      	uxth	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	0092      	lsls	r2, r2, #2
 8001516:	4413      	add	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b1f      	ldr	r3, [pc, #124]	; (800159c <GAS_Vadc_getValue+0xbc>)
 800151e:	801a      	strh	r2, [r3, #0]
	CoolingADC.WaterPump_P=ValueOfADC[3]*10;
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <GAS_Vadc_getValue+0xb8>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	b29b      	uxth	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	4413      	add	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	b29a      	uxth	r2, r3
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <GAS_Vadc_getValue+0xbc>)
 8001532:	815a      	strh	r2, [r3, #10]
	CoolingADC.Radiator0_T=calcTemp(ValueOfADC[4]);
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <GAS_Vadc_getValue+0xb8>)
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001540:	eeb0 0a67 	vmov.f32	s0, s15
 8001544:	f7ff ff6c 	bl	8001420 <calcTemp>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <GAS_Vadc_getValue+0xbc>)
 800154e:	819a      	strh	r2, [r3, #12]
	CoolingADC.WaterPump0_IS=ValueOfADC[5]*10;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <GAS_Vadc_getValue+0xb8>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	0092      	lsls	r2, r2, #2
 800155a:	4413      	add	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <GAS_Vadc_getValue+0xbc>)
 8001562:	805a      	strh	r2, [r3, #2]
	CoolingADC.Radiator1_T=calcTemp(ValueOfADC[3]);
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <GAS_Vadc_getValue+0xb8>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001570:	eeb0 0a67 	vmov.f32	s0, s15
 8001574:	f7ff ff54 	bl	8001420 <calcTemp>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <GAS_Vadc_getValue+0xbc>)
 800157e:	81da      	strh	r2, [r3, #14]
	CoolingADC.WaterPump1_IS=ValueOfADC[7]*10;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <GAS_Vadc_getValue+0xb8>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	b29b      	uxth	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	0092      	lsls	r2, r2, #2
 800158a:	4413      	add	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b02      	ldr	r3, [pc, #8]	; (800159c <GAS_Vadc_getValue+0xbc>)
 8001592:	809a      	strh	r2, [r3, #4]

}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000018c 	.word	0x2000018c
 800159c:	200000a4 	.word	0x200000a4

080015a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015a6:	463b      	mov	r3, r7
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015b2:	4b52      	ldr	r3, [pc, #328]	; (80016fc <MX_ADC1_Init+0x15c>)
 80015b4:	4a52      	ldr	r2, [pc, #328]	; (8001700 <MX_ADC1_Init+0x160>)
 80015b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015b8:	4b50      	ldr	r3, [pc, #320]	; (80016fc <MX_ADC1_Init+0x15c>)
 80015ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015c0:	4b4e      	ldr	r3, [pc, #312]	; (80016fc <MX_ADC1_Init+0x15c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015c6:	4b4d      	ldr	r3, [pc, #308]	; (80016fc <MX_ADC1_Init+0x15c>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015cc:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <MX_ADC1_Init+0x15c>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d2:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <MX_ADC1_Init+0x15c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015da:	4b48      	ldr	r3, [pc, #288]	; (80016fc <MX_ADC1_Init+0x15c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e0:	4b46      	ldr	r3, [pc, #280]	; (80016fc <MX_ADC1_Init+0x15c>)
 80015e2:	4a48      	ldr	r2, [pc, #288]	; (8001704 <MX_ADC1_Init+0x164>)
 80015e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e6:	4b45      	ldr	r3, [pc, #276]	; (80016fc <MX_ADC1_Init+0x15c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80015ec:	4b43      	ldr	r3, [pc, #268]	; (80016fc <MX_ADC1_Init+0x15c>)
 80015ee:	2208      	movs	r2, #8
 80015f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015f2:	4b42      	ldr	r3, [pc, #264]	; (80016fc <MX_ADC1_Init+0x15c>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015fa:	4b40      	ldr	r3, [pc, #256]	; (80016fc <MX_ADC1_Init+0x15c>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001600:	483e      	ldr	r0, [pc, #248]	; (80016fc <MX_ADC1_Init+0x15c>)
 8001602:	f001 f849 	bl	8002698 <HAL_ADC_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800160c:	f000 fb14 	bl	8001c38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001610:	2300      	movs	r3, #0
 8001612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001614:	2301      	movs	r3, #1
 8001616:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800161c:	463b      	mov	r3, r7
 800161e:	4619      	mov	r1, r3
 8001620:	4836      	ldr	r0, [pc, #216]	; (80016fc <MX_ADC1_Init+0x15c>)
 8001622:	f001 f9ab 	bl	800297c <HAL_ADC_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800162c:	f000 fb04 	bl	8001c38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001630:	2301      	movs	r3, #1
 8001632:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001634:	2302      	movs	r3, #2
 8001636:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001638:	463b      	mov	r3, r7
 800163a:	4619      	mov	r1, r3
 800163c:	482f      	ldr	r0, [pc, #188]	; (80016fc <MX_ADC1_Init+0x15c>)
 800163e:	f001 f99d 	bl	800297c <HAL_ADC_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001648:	f000 faf6 	bl	8001c38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800164c:	2302      	movs	r3, #2
 800164e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001650:	2303      	movs	r3, #3
 8001652:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	4619      	mov	r1, r3
 8001658:	4828      	ldr	r0, [pc, #160]	; (80016fc <MX_ADC1_Init+0x15c>)
 800165a:	f001 f98f 	bl	800297c <HAL_ADC_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001664:	f000 fae8 	bl	8001c38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001668:	2303      	movs	r3, #3
 800166a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800166c:	2304      	movs	r3, #4
 800166e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001670:	463b      	mov	r3, r7
 8001672:	4619      	mov	r1, r3
 8001674:	4821      	ldr	r0, [pc, #132]	; (80016fc <MX_ADC1_Init+0x15c>)
 8001676:	f001 f981 	bl	800297c <HAL_ADC_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001680:	f000 fada 	bl	8001c38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001684:	2304      	movs	r3, #4
 8001686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001688:	2305      	movs	r3, #5
 800168a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	4619      	mov	r1, r3
 8001690:	481a      	ldr	r0, [pc, #104]	; (80016fc <MX_ADC1_Init+0x15c>)
 8001692:	f001 f973 	bl	800297c <HAL_ADC_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800169c:	f000 facc 	bl	8001c38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80016a0:	230d      	movs	r3, #13
 80016a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80016a4:	2306      	movs	r3, #6
 80016a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	4619      	mov	r1, r3
 80016ac:	4813      	ldr	r0, [pc, #76]	; (80016fc <MX_ADC1_Init+0x15c>)
 80016ae:	f001 f965 	bl	800297c <HAL_ADC_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80016b8:	f000 fabe 	bl	8001c38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80016bc:	230c      	movs	r3, #12
 80016be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80016c0:	2307      	movs	r3, #7
 80016c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c4:	463b      	mov	r3, r7
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <MX_ADC1_Init+0x15c>)
 80016ca:	f001 f957 	bl	800297c <HAL_ADC_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80016d4:	f000 fab0 	bl	8001c38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80016d8:	230b      	movs	r3, #11
 80016da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80016dc:	2308      	movs	r3, #8
 80016de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_ADC1_Init+0x15c>)
 80016e6:	f001 f949 	bl	800297c <HAL_ADC_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80016f0:	f000 faa2 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200001c0 	.word	0x200001c0
 8001700:	40012000 	.word	0x40012000
 8001704:	0f000001 	.word	0x0f000001

08001708 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a3c      	ldr	r2, [pc, #240]	; (8001818 <HAL_ADC_MspInit+0x110>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d171      	bne.n	800180e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_ADC_MspInit+0x114>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a3a      	ldr	r2, [pc, #232]	; (800181c <HAL_ADC_MspInit+0x114>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b38      	ldr	r3, [pc, #224]	; (800181c <HAL_ADC_MspInit+0x114>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b34      	ldr	r3, [pc, #208]	; (800181c <HAL_ADC_MspInit+0x114>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a33      	ldr	r2, [pc, #204]	; (800181c <HAL_ADC_MspInit+0x114>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b31      	ldr	r3, [pc, #196]	; (800181c <HAL_ADC_MspInit+0x114>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_ADC_MspInit+0x114>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a2c      	ldr	r2, [pc, #176]	; (800181c <HAL_ADC_MspInit+0x114>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_ADC_MspInit+0x114>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800177e:	230e      	movs	r3, #14
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001782:	2303      	movs	r3, #3
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4823      	ldr	r0, [pc, #140]	; (8001820 <HAL_ADC_MspInit+0x118>)
 8001792:	f002 fecf 	bl	8004534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001796:	231f      	movs	r3, #31
 8001798:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179a:	2303      	movs	r3, #3
 800179c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	481e      	ldr	r0, [pc, #120]	; (8001824 <HAL_ADC_MspInit+0x11c>)
 80017aa:	f002 fec3 	bl	8004534 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <HAL_ADC_MspInit+0x120>)
 80017b0:	4a1e      	ldr	r2, [pc, #120]	; (800182c <HAL_ADC_MspInit+0x124>)
 80017b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80017b4:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <HAL_ADC_MspInit+0x120>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ba:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_ADC_MspInit+0x120>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_ADC_MspInit+0x120>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_ADC_MspInit+0x120>)
 80017c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <HAL_ADC_MspInit+0x120>)
 80017d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <HAL_ADC_MspInit+0x120>)
 80017d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_ADC_MspInit+0x120>)
 80017e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_ADC_MspInit+0x120>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_ADC_MspInit+0x120>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017f2:	480d      	ldr	r0, [pc, #52]	; (8001828 <HAL_ADC_MspInit+0x120>)
 80017f4:	f002 fb2e 	bl	8003e54 <HAL_DMA_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80017fe:	f000 fa1b 	bl	8001c38 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_ADC_MspInit+0x120>)
 8001806:	639a      	str	r2, [r3, #56]	; 0x38
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <HAL_ADC_MspInit+0x120>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40012000 	.word	0x40012000
 800181c:	40023800 	.word	0x40023800
 8001820:	40020800 	.word	0x40020800
 8001824:	40020000 	.word	0x40020000
 8001828:	20000208 	.word	0x20000208
 800182c:	40026410 	.word	0x40026410

08001830 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_CAN2_Init+0x64>)
 8001836:	4a18      	ldr	r2, [pc, #96]	; (8001898 <MX_CAN2_Init+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 14;
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <MX_CAN2_Init+0x64>)
 800183c:	220e      	movs	r2, #14
 800183e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <MX_CAN2_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <MX_CAN2_Init+0x64>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_CAN2_Init+0x64>)
 800184e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001852:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <MX_CAN2_Init+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <MX_CAN2_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <MX_CAN2_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <MX_CAN2_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <MX_CAN2_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <MX_CAN2_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <MX_CAN2_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_CAN2_Init+0x64>)
 8001880:	f001 fb1c 	bl	8002ebc <HAL_CAN_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800188a:	f000 f9d5 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000268 	.word	0x20000268
 8001898:	40006800 	.word	0x40006800

0800189c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a28      	ldr	r2, [pc, #160]	; (800195c <HAL_CAN_MspInit+0xc0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d14a      	bne.n	8001954 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_CAN_MspInit+0xc4>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a26      	ldr	r2, [pc, #152]	; (8001960 <HAL_CAN_MspInit+0xc4>)
 80018c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
 80018ce:	4b24      	ldr	r3, [pc, #144]	; (8001960 <HAL_CAN_MspInit+0xc4>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_CAN_MspInit+0xc4>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a1f      	ldr	r2, [pc, #124]	; (8001960 <HAL_CAN_MspInit+0xc4>)
 80018e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_CAN_MspInit+0xc4>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_CAN_MspInit+0xc4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a18      	ldr	r2, [pc, #96]	; (8001960 <HAL_CAN_MspInit+0xc4>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_CAN_MspInit+0xc4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001912:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001924:	2309      	movs	r3, #9
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	480d      	ldr	r0, [pc, #52]	; (8001964 <HAL_CAN_MspInit+0xc8>)
 8001930:	f002 fe00 	bl	8004534 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2040      	movs	r0, #64	; 0x40
 800193a:	f002 fa32 	bl	8003da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800193e:	2040      	movs	r0, #64	; 0x40
 8001940:	f002 fa4b 	bl	8003dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2041      	movs	r0, #65	; 0x41
 800194a:	f002 fa2a 	bl	8003da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800194e:	2041      	movs	r0, #65	; 0x41
 8001950:	f002 fa43 	bl	8003dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	; 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40006800 	.word	0x40006800
 8001960:	40023800 	.word	0x40023800
 8001964:	40020400 	.word	0x40020400

08001968 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_CRC_Init+0x20>)
 800196e:	4a07      	ldr	r2, [pc, #28]	; (800198c <MX_CRC_Init+0x24>)
 8001970:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_CRC_Init+0x20>)
 8001974:	f002 fa51 	bl	8003e1a <HAL_CRC_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800197e:	f000 f95b 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000290 	.word	0x20000290
 800198c:	40023000 	.word	0x40023000

08001990 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <HAL_CRC_MspInit+0x3c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d10d      	bne.n	80019be <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_CRC_MspInit+0x40>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <HAL_CRC_MspInit+0x40>)
 80019ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_CRC_MspInit+0x40>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40023000 	.word	0x40023000
 80019d0:	40023800 	.word	0x40023800

080019d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_DMA_Init+0x3c>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <MX_DMA_Init+0x3c>)
 80019e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_DMA_Init+0x3c>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	2038      	movs	r0, #56	; 0x38
 80019fc:	f002 f9d1 	bl	8003da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a00:	2038      	movs	r0, #56	; 0x38
 8001a02:	f002 f9ea 	bl	8003dda <HAL_NVIC_EnableIRQ>

}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800

08001a14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <MX_GPIO_Init+0xfc>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a37      	ldr	r2, [pc, #220]	; (8001b10 <MX_GPIO_Init+0xfc>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <MX_GPIO_Init+0xfc>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <MX_GPIO_Init+0xfc>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a30      	ldr	r2, [pc, #192]	; (8001b10 <MX_GPIO_Init+0xfc>)
 8001a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <MX_GPIO_Init+0xfc>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <MX_GPIO_Init+0xfc>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a29      	ldr	r2, [pc, #164]	; (8001b10 <MX_GPIO_Init+0xfc>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <MX_GPIO_Init+0xfc>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <MX_GPIO_Init+0xfc>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <MX_GPIO_Init+0xfc>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <MX_GPIO_Init+0xfc>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ErrorLED_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001aa0:	481c      	ldr	r0, [pc, #112]	; (8001b14 <MX_GPIO_Init+0x100>)
 8001aa2:	f002 fee3 	bl	800486c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Radiator1_INH_Pin|Waterpump1_INH_Pin|Radiator0_INH_Pin|WaterPump0_INH_Pin
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001aac:	481a      	ldr	r0, [pc, #104]	; (8001b18 <MX_GPIO_Init+0x104>)
 8001aae:	f002 fedd 	bl	800486c <HAL_GPIO_WritePin>
                          |ExternalFan_INH_Pin|BlueLED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PC14 PC15 */
  GPIO_InitStruct.Pin = ErrorLED_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8001ab2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4812      	ldr	r0, [pc, #72]	; (8001b14 <MX_GPIO_Init+0x100>)
 8001acc:	f002 fd32 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <MX_GPIO_Init+0x104>)
 8001ae6:	f002 fd25 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = Radiator1_INH_Pin|Waterpump1_INH_Pin|Radiator0_INH_Pin|WaterPump0_INH_Pin
 8001aea:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001aee:	617b      	str	r3, [r7, #20]
                          |ExternalFan_INH_Pin|BlueLED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_GPIO_Init+0x104>)
 8001b04:	f002 fd16 	bl	8004534 <HAL_GPIO_Init>

}
 8001b08:	bf00      	nop
 8001b0a:	3728      	adds	r7, #40	; 0x28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020400 	.word	0x40020400

08001b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b20:	f000 fd24 	bl	800256c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b24:	f000 f81c 	bl	8001b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b28:	f7ff ff74 	bl	8001a14 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b2c:	f7ff ff52 	bl	80019d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b30:	f7ff fd36 	bl	80015a0 <MX_ADC1_Init>
  MX_CAN2_Init();
 8001b34:	f7ff fe7c 	bl	8001830 <MX_CAN2_Init>
  MX_SPI3_Init();
 8001b38:	f000 f88c 	bl	8001c54 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001b3c:	f000 f9b4 	bl	8001ea8 <MX_TIM1_Init>
  MX_CRC_Init();
 8001b40:	f7ff ff12 	bl	8001968 <MX_CRC_Init>
  MX_TIM8_Init();
 8001b44:	f000 fae6 	bl	8002114 <MX_TIM8_Init>
  MX_USB_OTG_HS_PCD_Init();
 8001b48:	f000 fc6c 	bl	8002424 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM5_Init();
 8001b4c:	f000 fa92 	bl	8002074 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001b50:	f000 fa2c 	bl	8001fac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  GAS_Scheduler_init();
 8001b54:	f7ff fb9e 	bl	8001294 <GAS_Scheduler_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GAS_Scheduler();
 8001b58:	f7ff fc1c 	bl	8001394 <GAS_Scheduler>
  {
 8001b5c:	e7fc      	b.n	8001b58 <main+0x3c>
	...

08001b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b094      	sub	sp, #80	; 0x50
 8001b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b66:	f107 0320 	add.w	r3, r7, #32
 8001b6a:	2230      	movs	r2, #48	; 0x30
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 fe84 	bl	800687c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <SystemClock_Config+0xd0>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	4a28      	ldr	r2, [pc, #160]	; (8001c30 <SystemClock_Config+0xd0>)
 8001b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b92:	6413      	str	r3, [r2, #64]	; 0x40
 8001b94:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <SystemClock_Config+0xd0>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <SystemClock_Config+0xd4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <SystemClock_Config+0xd4>)
 8001baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <SystemClock_Config+0xd4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001bd4:	23a8      	movs	r3, #168	; 0xa8
 8001bd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bdc:	2307      	movs	r3, #7
 8001bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be0:	f107 0320 	add.w	r3, r7, #32
 8001be4:	4618      	mov	r0, r3
 8001be6:	f002 ff91 	bl	8004b0c <HAL_RCC_OscConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bf0:	f000 f822 	bl	8001c38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf4:	230f      	movs	r3, #15
 8001bf6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2105      	movs	r1, #5
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 f9f2 	bl	8004ffc <HAL_RCC_ClockConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c1e:	f000 f80b 	bl	8001c38 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001c22:	f003 fad1 	bl	80051c8 <HAL_RCC_EnableCSS>
}
 8001c26:	bf00      	nop
 8001c28:	3750      	adds	r7, #80	; 0x50
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40007000 	.word	0x40007000

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c3c:	b672      	cpsid	i
}
 8001c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	HAL_GPIO_WritePin(GPIOC,ErrorLED_Pin, GPIO_PIN_SET);
 8001c40:	2201      	movs	r2, #1
 8001c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c46:	4802      	ldr	r0, [pc, #8]	; (8001c50 <Error_Handler+0x18>)
 8001c48:	f002 fe10 	bl	800486c <HAL_GPIO_WritePin>
 8001c4c:	e7f8      	b.n	8001c40 <Error_Handler+0x8>
 8001c4e:	bf00      	nop
 8001c50:	40020800 	.word	0x40020800

08001c54 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <MX_SPI3_Init+0x64>)
 8001c5a:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <MX_SPI3_Init+0x68>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <MX_SPI3_Init+0x64>)
 8001c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <MX_SPI3_Init+0x64>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <MX_SPI3_Init+0x64>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_SPI3_Init+0x64>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <MX_SPI3_Init+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_SPI3_Init+0x64>)
 8001c80:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c84:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <MX_SPI3_Init+0x64>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <MX_SPI3_Init+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <MX_SPI3_Init+0x64>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <MX_SPI3_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <MX_SPI3_Init+0x64>)
 8001ca0:	220a      	movs	r2, #10
 8001ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ca4:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <MX_SPI3_Init+0x64>)
 8001ca6:	f003 fb98 	bl	80053da <HAL_SPI_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001cb0:	f7ff ffc2 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000298 	.word	0x20000298
 8001cbc:	40003c00 	.word	0x40003c00

08001cc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <HAL_SPI_MspInit+0xc4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d14b      	bne.n	8001d7a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <HAL_SPI_MspInit+0xc8>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <HAL_SPI_MspInit+0xc8>)
 8001cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_SPI_MspInit+0xc8>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <HAL_SPI_MspInit+0xc8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a20      	ldr	r2, [pc, #128]	; (8001d88 <HAL_SPI_MspInit+0xc8>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <HAL_SPI_MspInit+0xc8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_SPI_MspInit+0xc8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_SPI_MspInit+0xc8>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_SPI_MspInit+0xc8>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d48:	2306      	movs	r3, #6
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	480e      	ldr	r0, [pc, #56]	; (8001d8c <HAL_SPI_MspInit+0xcc>)
 8001d54:	f002 fbee 	bl	8004534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d58:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d66:	2303      	movs	r3, #3
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d6a:	2306      	movs	r3, #6
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	4619      	mov	r1, r3
 8001d74:	4806      	ldr	r0, [pc, #24]	; (8001d90 <HAL_SPI_MspInit+0xd0>)
 8001d76:	f002 fbdd 	bl	8004534 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	; 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40003c00 	.word	0x40003c00
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020800 	.word	0x40020800

08001d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_MspInit+0x4c>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	4a0f      	ldr	r2, [pc, #60]	; (8001de0 <HAL_MspInit+0x4c>)
 8001da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da8:	6453      	str	r3, [r2, #68]	; 0x44
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_MspInit+0x4c>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_MspInit+0x4c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a08      	ldr	r2, [pc, #32]	; (8001de0 <HAL_MspInit+0x4c>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_MspInit+0x4c>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001de8:	f003 fadc 	bl	80053a4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <NMI_Handler+0x8>

08001dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e34:	f000 fbec 	bl	8002610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001e38:	f001 ffe9 	bl	8003e0e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <DMA2_Stream0_IRQHandler+0x10>)
 8001e46:	f002 f90b 	bl	8004060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000208 	.word	0x20000208

08001e54 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <CAN2_RX0_IRQHandler+0x10>)
 8001e5a:	f001 fc97 	bl	800378c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000268 	.word	0x20000268

08001e68 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <CAN2_RX1_IRQHandler+0x10>)
 8001e6e:	f001 fc8d 	bl	800378c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000268 	.word	0x20000268

08001e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <SystemInit+0x28>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <SystemInit+0x28>)
 8001e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <SystemInit+0x28>)
 8001e92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e96:	609a      	str	r2, [r3, #8]
#endif
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b092      	sub	sp, #72	; 0x48
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
 8001ec8:	615a      	str	r2, [r3, #20]
 8001eca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	2220      	movs	r2, #32
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f004 fcd2 	bl	800687c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ed8:	4b32      	ldr	r3, [pc, #200]	; (8001fa4 <MX_TIM1_Init+0xfc>)
 8001eda:	4a33      	ldr	r2, [pc, #204]	; (8001fa8 <MX_TIM1_Init+0x100>)
 8001edc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <MX_TIM1_Init+0xfc>)
 8001ee0:	2247      	movs	r2, #71	; 0x47
 8001ee2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee4:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <MX_TIM1_Init+0xfc>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001eea:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <MX_TIM1_Init+0xfc>)
 8001eec:	2263      	movs	r2, #99	; 0x63
 8001eee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef0:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <MX_TIM1_Init+0xfc>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <MX_TIM1_Init+0xfc>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <MX_TIM1_Init+0xfc>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f02:	4828      	ldr	r0, [pc, #160]	; (8001fa4 <MX_TIM1_Init+0xfc>)
 8001f04:	f003 fb41 	bl	800558a <HAL_TIM_PWM_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001f0e:	f7ff fe93 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4820      	ldr	r0, [pc, #128]	; (8001fa4 <MX_TIM1_Init+0xfc>)
 8001f22:	f004 f8d3 	bl	80060cc <HAL_TIMEx_MasterConfigSynchronization>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001f2c:	f7ff fe84 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f30:	2360      	movs	r3, #96	; 0x60
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f44:	2300      	movs	r3, #0
 8001f46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f50:	2200      	movs	r2, #0
 8001f52:	4619      	mov	r1, r3
 8001f54:	4813      	ldr	r0, [pc, #76]	; (8001fa4 <MX_TIM1_Init+0xfc>)
 8001f56:	f003 fc2f 	bl	80057b8 <HAL_TIM_PWM_ConfigChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001f60:	f7ff fe6a 	bl	8001c38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <MX_TIM1_Init+0xfc>)
 8001f88:	f004 f91c 	bl	80061c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001f92:	f7ff fe51 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f96:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <MX_TIM1_Init+0xfc>)
 8001f98:	f000 f9ba 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8001f9c:	bf00      	nop
 8001f9e:	3748      	adds	r7, #72	; 0x48
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200003c8 	.word	0x200003c8
 8001fa8:	40010000 	.word	0x40010000

08001fac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb2:	f107 0320 	add.w	r3, r7, #32
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
 8001fca:	615a      	str	r2, [r3, #20]
 8001fcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <MX_TIM3_Init+0xc0>)
 8001fd0:	4a27      	ldr	r2, [pc, #156]	; (8002070 <MX_TIM3_Init+0xc4>)
 8001fd2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <MX_TIM3_Init+0xc0>)
 8001fd6:	2253      	movs	r2, #83	; 0x53
 8001fd8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <MX_TIM3_Init+0xc0>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fe0:	4b22      	ldr	r3, [pc, #136]	; (800206c <MX_TIM3_Init+0xc0>)
 8001fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b20      	ldr	r3, [pc, #128]	; (800206c <MX_TIM3_Init+0xc0>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b1f      	ldr	r3, [pc, #124]	; (800206c <MX_TIM3_Init+0xc0>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ff4:	481d      	ldr	r0, [pc, #116]	; (800206c <MX_TIM3_Init+0xc0>)
 8001ff6:	f003 fac8 	bl	800558a <HAL_TIM_PWM_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002000:	f7ff fe1a 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800200c:	f107 0320 	add.w	r3, r7, #32
 8002010:	4619      	mov	r1, r3
 8002012:	4816      	ldr	r0, [pc, #88]	; (800206c <MX_TIM3_Init+0xc0>)
 8002014:	f004 f85a 	bl	80060cc <HAL_TIMEx_MasterConfigSynchronization>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800201e:	f7ff fe0b 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002022:	2360      	movs	r3, #96	; 0x60
 8002024:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	4619      	mov	r1, r3
 8002038:	480c      	ldr	r0, [pc, #48]	; (800206c <MX_TIM3_Init+0xc0>)
 800203a:	f003 fbbd 	bl	80057b8 <HAL_TIM_PWM_ConfigChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002044:	f7ff fdf8 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2208      	movs	r2, #8
 800204c:	4619      	mov	r1, r3
 800204e:	4807      	ldr	r0, [pc, #28]	; (800206c <MX_TIM3_Init+0xc0>)
 8002050:	f003 fbb2 	bl	80057b8 <HAL_TIM_PWM_ConfigChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800205a:	f7ff fded 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800205e:	4803      	ldr	r0, [pc, #12]	; (800206c <MX_TIM3_Init+0xc0>)
 8002060:	f000 f956 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000380 	.word	0x20000380
 8002070:	40000400 	.word	0x40000400

08002074 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
 8002088:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <MX_TIM5_Init+0x98>)
 8002094:	4a1e      	ldr	r2, [pc, #120]	; (8002110 <MX_TIM5_Init+0x9c>)
 8002096:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <MX_TIM5_Init+0x98>)
 800209a:	2200      	movs	r2, #0
 800209c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <MX_TIM5_Init+0x98>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <MX_TIM5_Init+0x98>)
 80020a6:	f04f 32ff 	mov.w	r2, #4294967295
 80020aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <MX_TIM5_Init+0x98>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b2:	4b16      	ldr	r3, [pc, #88]	; (800210c <MX_TIM5_Init+0x98>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020b8:	4814      	ldr	r0, [pc, #80]	; (800210c <MX_TIM5_Init+0x98>)
 80020ba:	f003 fa17 	bl	80054ec <HAL_TIM_Base_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80020c4:	f7ff fdb8 	bl	8001c38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	4619      	mov	r1, r3
 80020d6:	480d      	ldr	r0, [pc, #52]	; (800210c <MX_TIM5_Init+0x98>)
 80020d8:	f003 fc30 	bl	800593c <HAL_TIM_SlaveConfigSynchro>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80020e2:	f7ff fda9 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	4619      	mov	r1, r3
 80020f2:	4806      	ldr	r0, [pc, #24]	; (800210c <MX_TIM5_Init+0x98>)
 80020f4:	f003 ffea 	bl	80060cc <HAL_TIMEx_MasterConfigSynchronization>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80020fe:	f7ff fd9b 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000338 	.word	0x20000338
 8002110:	40000c00 	.word	0x40000c00

08002114 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b092      	sub	sp, #72	; 0x48
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
 8002134:	615a      	str	r2, [r3, #20]
 8002136:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	2220      	movs	r2, #32
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f004 fb9c 	bl	800687c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002144:	4b38      	ldr	r3, [pc, #224]	; (8002228 <MX_TIM8_Init+0x114>)
 8002146:	4a39      	ldr	r2, [pc, #228]	; (800222c <MX_TIM8_Init+0x118>)
 8002148:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 71;
 800214a:	4b37      	ldr	r3, [pc, #220]	; (8002228 <MX_TIM8_Init+0x114>)
 800214c:	2247      	movs	r2, #71	; 0x47
 800214e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002150:	4b35      	ldr	r3, [pc, #212]	; (8002228 <MX_TIM8_Init+0x114>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <MX_TIM8_Init+0x114>)
 8002158:	2263      	movs	r2, #99	; 0x63
 800215a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215c:	4b32      	ldr	r3, [pc, #200]	; (8002228 <MX_TIM8_Init+0x114>)
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002162:	4b31      	ldr	r3, [pc, #196]	; (8002228 <MX_TIM8_Init+0x114>)
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002168:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <MX_TIM8_Init+0x114>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800216e:	482e      	ldr	r0, [pc, #184]	; (8002228 <MX_TIM8_Init+0x114>)
 8002170:	f003 fa0b 	bl	800558a <HAL_TIM_PWM_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 800217a:	f7ff fd5d 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002186:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800218a:	4619      	mov	r1, r3
 800218c:	4826      	ldr	r0, [pc, #152]	; (8002228 <MX_TIM8_Init+0x114>)
 800218e:	f003 ff9d 	bl	80060cc <HAL_TIMEx_MasterConfigSynchronization>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8002198:	f7ff fd4e 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800219c:	2360      	movs	r3, #96	; 0x60
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021a8:	2300      	movs	r3, #0
 80021aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021b0:	2300      	movs	r3, #0
 80021b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021b4:	2300      	movs	r3, #0
 80021b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021bc:	2204      	movs	r2, #4
 80021be:	4619      	mov	r1, r3
 80021c0:	4819      	ldr	r0, [pc, #100]	; (8002228 <MX_TIM8_Init+0x114>)
 80021c2:	f003 faf9 	bl	80057b8 <HAL_TIM_PWM_ConfigChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 80021cc:	f7ff fd34 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d4:	220c      	movs	r2, #12
 80021d6:	4619      	mov	r1, r3
 80021d8:	4813      	ldr	r0, [pc, #76]	; (8002228 <MX_TIM8_Init+0x114>)
 80021da:	f003 faed 	bl	80057b8 <HAL_TIM_PWM_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 80021e4:	f7ff fd28 	bl	8001c38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002200:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4807      	ldr	r0, [pc, #28]	; (8002228 <MX_TIM8_Init+0x114>)
 800220c:	f003 ffda 	bl	80061c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8002216:	f7ff fd0f 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800221a:	4803      	ldr	r0, [pc, #12]	; (8002228 <MX_TIM8_Init+0x114>)
 800221c:	f000 f878 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8002220:	bf00      	nop
 8002222:	3748      	adds	r7, #72	; 0x48
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200002f0 	.word	0x200002f0
 800222c:	40010400 	.word	0x40010400

08002230 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a1f      	ldr	r2, [pc, #124]	; (80022bc <HAL_TIM_PWM_MspInit+0x8c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d10e      	bne.n	8002260 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_TIM_PWM_MspInit+0x90>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <HAL_TIM_PWM_MspInit+0x90>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6453      	str	r3, [r2, #68]	; 0x44
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_TIM_PWM_MspInit+0x90>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800225e:	e026      	b.n	80022ae <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <HAL_TIM_PWM_MspInit+0x94>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d10e      	bne.n	8002288 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_TIM_PWM_MspInit+0x90>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <HAL_TIM_PWM_MspInit+0x90>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_TIM_PWM_MspInit+0x90>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
}
 8002286:	e012      	b.n	80022ae <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM8)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_TIM_PWM_MspInit+0x98>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d10d      	bne.n	80022ae <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_TIM_PWM_MspInit+0x90>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <HAL_TIM_PWM_MspInit+0x90>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	6453      	str	r3, [r2, #68]	; 0x44
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_TIM_PWM_MspInit+0x90>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
}
 80022ae:	bf00      	nop
 80022b0:	371c      	adds	r7, #28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40010000 	.word	0x40010000
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40010400 	.word	0x40010400

080022cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <HAL_TIM_Base_MspInit+0x3c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d10d      	bne.n	80022fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_TIM_Base_MspInit+0x40>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_TIM_Base_MspInit+0x40>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <HAL_TIM_Base_MspInit+0x40>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40000c00 	.word	0x40000c00
 800230c:	40023800 	.word	0x40023800

08002310 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a37      	ldr	r2, [pc, #220]	; (800240c <HAL_TIM_MspPostInit+0xfc>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d11f      	bne.n	8002372 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_TIM_MspPostInit+0x100>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a35      	ldr	r2, [pc, #212]	; (8002410 <HAL_TIM_MspPostInit+0x100>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b33      	ldr	r3, [pc, #204]	; (8002410 <HAL_TIM_MspPostInit+0x100>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800234e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002360:	2301      	movs	r3, #1
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	4619      	mov	r1, r3
 800236a:	482a      	ldr	r0, [pc, #168]	; (8002414 <HAL_TIM_MspPostInit+0x104>)
 800236c:	f002 f8e2 	bl	8004534 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002370:	e048      	b.n	8002404 <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM3)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a28      	ldr	r2, [pc, #160]	; (8002418 <HAL_TIM_MspPostInit+0x108>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d11f      	bne.n	80023bc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	4b23      	ldr	r3, [pc, #140]	; (8002410 <HAL_TIM_MspPostInit+0x100>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	4a22      	ldr	r2, [pc, #136]	; (8002410 <HAL_TIM_MspPostInit+0x100>)
 8002386:	f043 0304 	orr.w	r3, r3, #4
 800238a:	6313      	str	r3, [r2, #48]	; 0x30
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_TIM_MspPostInit+0x100>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8002398:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023aa:	2302      	movs	r3, #2
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	4619      	mov	r1, r3
 80023b4:	4819      	ldr	r0, [pc, #100]	; (800241c <HAL_TIM_MspPostInit+0x10c>)
 80023b6:	f002 f8bd 	bl	8004534 <HAL_GPIO_Init>
}
 80023ba:	e023      	b.n	8002404 <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM8)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a17      	ldr	r2, [pc, #92]	; (8002420 <HAL_TIM_MspPostInit+0x110>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d11e      	bne.n	8002404 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_TIM_MspPostInit+0x100>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_TIM_MspPostInit+0x100>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_TIM_MspPostInit+0x100>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80023e2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80023e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	2302      	movs	r3, #2
 80023ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2300      	movs	r3, #0
 80023f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80023f4:	2303      	movs	r3, #3
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	4619      	mov	r1, r3
 80023fe:	4807      	ldr	r0, [pc, #28]	; (800241c <HAL_TIM_MspPostInit+0x10c>)
 8002400:	f002 f898 	bl	8004534 <HAL_GPIO_Init>
}
 8002404:	bf00      	nop
 8002406:	3728      	adds	r7, #40	; 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40010000 	.word	0x40010000
 8002410:	40023800 	.word	0x40023800
 8002414:	40020000 	.word	0x40020000
 8002418:	40000400 	.word	0x40000400
 800241c:	40020800 	.word	0x40020800
 8002420:	40010400 	.word	0x40010400

08002424 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800242a:	4a16      	ldr	r2, [pc, #88]	; (8002484 <MX_USB_OTG_HS_PCD_Init+0x60>)
 800242c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002430:	2206      	movs	r2, #6
 8002432:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002436:	2202      	movs	r2, #2
 8002438:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002442:	2202      	movs	r2, #2
 8002444:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002448:	2200      	movs	r2, #0
 800244a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800244e:	2200      	movs	r2, #0
 8002450:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002454:	2200      	movs	r2, #0
 8002456:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800245a:	2200      	movs	r2, #0
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002466:	2200      	movs	r2, #0
 8002468:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800246c:	f002 fa31 	bl	80048d2 <HAL_PCD_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8002476:	f7ff fbdf 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000410 	.word	0x20000410
 8002484:	40040000 	.word	0x40040000

08002488 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_PCD_MspInit+0x84>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d12c      	bne.n	8002504 <HAL_PCD_MspInit+0x7c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_PCD_MspInit+0x88>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a17      	ldr	r2, [pc, #92]	; (8002510 <HAL_PCD_MspInit+0x88>)
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_PCD_MspInit+0x88>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80024d8:	230c      	movs	r3, #12
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	4619      	mov	r1, r3
 80024e2:	480c      	ldr	r0, [pc, #48]	; (8002514 <HAL_PCD_MspInit+0x8c>)
 80024e4:	f002 f826 	bl	8004534 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_PCD_MspInit+0x88>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	4a07      	ldr	r2, [pc, #28]	; (8002510 <HAL_PCD_MspInit+0x88>)
 80024f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024f6:	6313      	str	r3, [r2, #48]	; 0x30
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_PCD_MspInit+0x88>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8002504:	bf00      	nop
 8002506:	3728      	adds	r7, #40	; 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40040000 	.word	0x40040000
 8002510:	40023800 	.word	0x40023800
 8002514:	40020400 	.word	0x40020400

08002518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002550 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800251c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800251e:	e003      	b.n	8002528 <LoopCopyDataInit>

08002520 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002522:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002524:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002526:	3104      	adds	r1, #4

08002528 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002528:	480b      	ldr	r0, [pc, #44]	; (8002558 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800252c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800252e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002530:	d3f6      	bcc.n	8002520 <CopyDataInit>
  ldr  r2, =_sbss
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002534:	e002      	b.n	800253c <LoopFillZerobss>

08002536 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002536:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002538:	f842 3b04 	str.w	r3, [r2], #4

0800253c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800253e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002540:	d3f9      	bcc.n	8002536 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002542:	f7ff fc9b 	bl	8001e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002546:	f004 f975 	bl	8006834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800254a:	f7ff fae7 	bl	8001b1c <main>
  bx  lr    
 800254e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002550:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002554:	08006cb0 	.word	0x08006cb0
  ldr  r0, =_sdata
 8002558:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800255c:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8002560:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8002564:	2000081c 	.word	0x2000081c

08002568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002568:	e7fe      	b.n	8002568 <ADC_IRQHandler>
	...

0800256c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <HAL_Init+0x40>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <HAL_Init+0x40>)
 8002576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_Init+0x40>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_Init+0x40>)
 8002582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a07      	ldr	r2, [pc, #28]	; (80025ac <HAL_Init+0x40>)
 800258e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002594:	2003      	movs	r0, #3
 8002596:	f001 fbf9 	bl	8003d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800259a:	2000      	movs	r0, #0
 800259c:	f000 f808 	bl	80025b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a0:	f7ff fbf8 	bl	8001d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40023c00 	.word	0x40023c00

080025b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_InitTick+0x54>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_InitTick+0x58>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 fc11 	bl	8003df6 <HAL_SYSTICK_Config>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e00e      	b.n	80025fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b0f      	cmp	r3, #15
 80025e2:	d80a      	bhi.n	80025fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e4:	2200      	movs	r2, #0
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f001 fbd9 	bl	8003da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f0:	4a06      	ldr	r2, [pc, #24]	; (800260c <HAL_InitTick+0x5c>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e000      	b.n	80025fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	2000000c 	.word	0x2000000c
 8002608:	20000014 	.word	0x20000014
 800260c:	20000010 	.word	0x20000010

08002610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_IncTick+0x20>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_IncTick+0x24>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4413      	add	r3, r2
 8002620:	4a04      	ldr	r2, [pc, #16]	; (8002634 <HAL_IncTick+0x24>)
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000014 	.word	0x20000014
 8002634:	20000818 	.word	0x20000818

08002638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return uwTick;
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <HAL_GetTick+0x14>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000818 	.word	0x20000818

08002650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff ffee 	bl	8002638 <HAL_GetTick>
 800265c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d005      	beq.n	8002676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_Delay+0x44>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002676:	bf00      	nop
 8002678:	f7ff ffde 	bl	8002638 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	d8f7      	bhi.n	8002678 <HAL_Delay+0x28>
  {
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000014 	.word	0x20000014

08002698 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e033      	b.n	8002716 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff f826 	bl	8001708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d118      	bne.n	8002708 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026de:	f023 0302 	bic.w	r3, r3, #2
 80026e2:	f043 0202 	orr.w	r2, r3, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fa68 	bl	8002bc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	f043 0201 	orr.w	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
 8002706:	e001      	b.n	800270c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_ADC_Start_DMA+0x1e>
 800273a:	2302      	movs	r3, #2
 800273c:	e0e9      	b.n	8002912 <HAL_ADC_Start_DMA+0x1f2>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d018      	beq.n	8002786 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002764:	4b6d      	ldr	r3, [pc, #436]	; (800291c <HAL_ADC_Start_DMA+0x1fc>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a6d      	ldr	r2, [pc, #436]	; (8002920 <HAL_ADC_Start_DMA+0x200>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0c9a      	lsrs	r2, r3, #18
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002778:	e002      	b.n	8002780 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	3b01      	subs	r3, #1
 800277e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f9      	bne.n	800277a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002794:	d107      	bne.n	80027a6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f040 80a1 	bne.w	80028f8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f4:	d106      	bne.n	8002804 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f023 0206 	bic.w	r2, r3, #6
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
 8002802:	e002      	b.n	800280a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002812:	4b44      	ldr	r3, [pc, #272]	; (8002924 <HAL_ADC_Start_DMA+0x204>)
 8002814:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	4a43      	ldr	r2, [pc, #268]	; (8002928 <HAL_ADC_Start_DMA+0x208>)
 800281c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	4a42      	ldr	r2, [pc, #264]	; (800292c <HAL_ADC_Start_DMA+0x20c>)
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	4a41      	ldr	r2, [pc, #260]	; (8002930 <HAL_ADC_Start_DMA+0x210>)
 800282c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002836:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002846:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002856:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	334c      	adds	r3, #76	; 0x4c
 8002862:	4619      	mov	r1, r3
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f001 fba2 	bl	8003fb0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	2b00      	cmp	r3, #0
 8002876:	d12a      	bne.n	80028ce <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a2d      	ldr	r2, [pc, #180]	; (8002934 <HAL_ADC_Start_DMA+0x214>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d015      	beq.n	80028ae <HAL_ADC_Start_DMA+0x18e>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2c      	ldr	r2, [pc, #176]	; (8002938 <HAL_ADC_Start_DMA+0x218>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d105      	bne.n	8002898 <HAL_ADC_Start_DMA+0x178>
 800288c:	4b25      	ldr	r3, [pc, #148]	; (8002924 <HAL_ADC_Start_DMA+0x204>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a27      	ldr	r2, [pc, #156]	; (800293c <HAL_ADC_Start_DMA+0x21c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d136      	bne.n	8002910 <HAL_ADC_Start_DMA+0x1f0>
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_ADC_Start_DMA+0x204>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d130      	bne.n	8002910 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d129      	bne.n	8002910 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	e020      	b.n	8002910 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a18      	ldr	r2, [pc, #96]	; (8002934 <HAL_ADC_Start_DMA+0x214>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d11b      	bne.n	8002910 <HAL_ADC_Start_DMA+0x1f0>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d114      	bne.n	8002910 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	e00b      	b.n	8002910 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f043 0210 	orr.w	r2, r3, #16
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	2000000c 	.word	0x2000000c
 8002920:	431bde83 	.word	0x431bde83
 8002924:	40012300 	.word	0x40012300
 8002928:	08002db9 	.word	0x08002db9
 800292c:	08002e73 	.word	0x08002e73
 8002930:	08002e8f 	.word	0x08002e8f
 8002934:	40012000 	.word	0x40012000
 8002938:	40012100 	.word	0x40012100
 800293c:	40012200 	.word	0x40012200

08002940 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1c>
 8002994:	2302      	movs	r3, #2
 8002996:	e105      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x228>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b09      	cmp	r3, #9
 80029a6:	d925      	bls.n	80029f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68d9      	ldr	r1, [r3, #12]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	3b1e      	subs	r3, #30
 80029be:	2207      	movs	r2, #7
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43da      	mvns	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	400a      	ands	r2, r1
 80029cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68d9      	ldr	r1, [r3, #12]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	4618      	mov	r0, r3
 80029e0:	4603      	mov	r3, r0
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4403      	add	r3, r0
 80029e6:	3b1e      	subs	r3, #30
 80029e8:	409a      	lsls	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	e022      	b.n	8002a3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6919      	ldr	r1, [r3, #16]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	2207      	movs	r2, #7
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	400a      	ands	r2, r1
 8002a16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6919      	ldr	r1, [r3, #16]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	4618      	mov	r0, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4403      	add	r3, r0
 8002a30:	409a      	lsls	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d824      	bhi.n	8002a8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	3b05      	subs	r3, #5
 8002a54:	221f      	movs	r2, #31
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	400a      	ands	r2, r1
 8002a62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b05      	subs	r3, #5
 8002a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	635a      	str	r2, [r3, #52]	; 0x34
 8002a8a:	e04c      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b0c      	cmp	r3, #12
 8002a92:	d824      	bhi.n	8002ade <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3b23      	subs	r3, #35	; 0x23
 8002aa6:	221f      	movs	r2, #31
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43da      	mvns	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	3b23      	subs	r3, #35	; 0x23
 8002ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
 8002adc:	e023      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	3b41      	subs	r3, #65	; 0x41
 8002af0:	221f      	movs	r2, #31
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43da      	mvns	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	400a      	ands	r2, r1
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	3b41      	subs	r3, #65	; 0x41
 8002b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b26:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <HAL_ADC_ConfigChannel+0x234>)
 8002b28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a21      	ldr	r2, [pc, #132]	; (8002bb4 <HAL_ADC_ConfigChannel+0x238>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d109      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x1cc>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b12      	cmp	r3, #18
 8002b3a:	d105      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <HAL_ADC_ConfigChannel+0x238>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d123      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x21e>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d003      	beq.n	8002b62 <HAL_ADC_ConfigChannel+0x1e6>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b11      	cmp	r3, #17
 8002b60:	d11b      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d111      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_ADC_ConfigChannel+0x23c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <HAL_ADC_ConfigChannel+0x240>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	0c9a      	lsrs	r2, r3, #18
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b8c:	e002      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f9      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	40012300 	.word	0x40012300
 8002bb4:	40012000 	.word	0x40012000
 8002bb8:	2000000c 	.word	0x2000000c
 8002bbc:	431bde83 	.word	0x431bde83

08002bc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bc8:	4b79      	ldr	r3, [pc, #484]	; (8002db0 <ADC_Init+0x1f0>)
 8002bca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	021a      	lsls	r2, r3, #8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6899      	ldr	r1, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	4a58      	ldr	r2, [pc, #352]	; (8002db4 <ADC_Init+0x1f4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d022      	beq.n	8002c9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6899      	ldr	r1, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	e00f      	b.n	8002cbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0202 	bic.w	r2, r2, #2
 8002ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6899      	ldr	r1, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7e1b      	ldrb	r3, [r3, #24]
 8002cd8:	005a      	lsls	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01b      	beq.n	8002d24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6859      	ldr	r1, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	3b01      	subs	r3, #1
 8002d18:	035a      	lsls	r2, r3, #13
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	e007      	b.n	8002d34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	051a      	lsls	r2, r3, #20
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6899      	ldr	r1, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d76:	025a      	lsls	r2, r3, #9
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6899      	ldr	r1, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	029a      	lsls	r2, r3, #10
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40012300 	.word	0x40012300
 8002db4:	0f000001 	.word	0x0f000001

08002db8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d13c      	bne.n	8002e4c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d12b      	bne.n	8002e44 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d127      	bne.n	8002e44 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d006      	beq.n	8002e10 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d119      	bne.n	8002e44 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0220 	bic.w	r2, r2, #32
 8002e1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d105      	bne.n	8002e44 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff fd7b 	bl	8002940 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e4a:	e00e      	b.n	8002e6a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7ff fd85 	bl	8002968 <HAL_ADC_ErrorCallback>
}
 8002e5e:	e004      	b.n	8002e6a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7ff fd67 	bl	8002954 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2240      	movs	r2, #64	; 0x40
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	f043 0204 	orr.w	r2, r3, #4
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f7ff fd5a 	bl	8002968 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eb4:	bf00      	nop
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e0ed      	b.n	80030aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fe fcde 	bl	800189c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef0:	f7ff fba2 	bl	8002638 <HAL_GetTick>
 8002ef4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ef6:	e012      	b.n	8002f1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ef8:	f7ff fb9e 	bl	8002638 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b0a      	cmp	r3, #10
 8002f04:	d90b      	bls.n	8002f1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2205      	movs	r2, #5
 8002f16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0c5      	b.n	80030aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0e5      	beq.n	8002ef8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0202 	bic.w	r2, r2, #2
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f3c:	f7ff fb7c 	bl	8002638 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f42:	e012      	b.n	8002f6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f44:	f7ff fb78 	bl	8002638 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b0a      	cmp	r3, #10
 8002f50:	d90b      	bls.n	8002f6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2205      	movs	r2, #5
 8002f62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e09f      	b.n	80030aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e5      	bne.n	8002f44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7e1b      	ldrb	r3, [r3, #24]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d108      	bne.n	8002f92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e007      	b.n	8002fa2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7e5b      	ldrb	r3, [r3, #25]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d108      	bne.n	8002fbc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e007      	b.n	8002fcc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7e9b      	ldrb	r3, [r3, #26]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d108      	bne.n	8002fe6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0220 	orr.w	r2, r2, #32
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e007      	b.n	8002ff6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0220 	bic.w	r2, r2, #32
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7edb      	ldrb	r3, [r3, #27]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d108      	bne.n	8003010 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0210 	bic.w	r2, r2, #16
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	e007      	b.n	8003020 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0210 	orr.w	r2, r2, #16
 800301e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7f1b      	ldrb	r3, [r3, #28]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d108      	bne.n	800303a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0208 	orr.w	r2, r2, #8
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e007      	b.n	800304a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0208 	bic.w	r2, r2, #8
 8003048:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7f5b      	ldrb	r3, [r3, #29]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d108      	bne.n	8003064 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0204 	orr.w	r2, r2, #4
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e007      	b.n	8003074 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0204 	bic.w	r2, r2, #4
 8003072:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	ea42 0103 	orr.w	r1, r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	1e5a      	subs	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d003      	beq.n	80030da <HAL_CAN_ConfigFilter+0x26>
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	f040 80be 	bne.w	8003256 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80030da:	4b65      	ldr	r3, [pc, #404]	; (8003270 <HAL_CAN_ConfigFilter+0x1bc>)
 80030dc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	431a      	orrs	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	2201      	movs	r2, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	43db      	mvns	r3, r3
 800312c:	401a      	ands	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d123      	bne.n	8003184 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	43db      	mvns	r3, r3
 8003146:	401a      	ands	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800315e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	3248      	adds	r2, #72	; 0x48
 8003164:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003178:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800317a:	6979      	ldr	r1, [r7, #20]
 800317c:	3348      	adds	r3, #72	; 0x48
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d122      	bne.n	80031d2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	431a      	orrs	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	3248      	adds	r2, #72	; 0x48
 80031b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031c8:	6979      	ldr	r1, [r7, #20]
 80031ca:	3348      	adds	r3, #72	; 0x48
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	440b      	add	r3, r1
 80031d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	401a      	ands	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80031ec:	e007      	b.n	80031fe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	43db      	mvns	r3, r3
 8003210:	401a      	ands	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003218:	e007      	b.n	800322a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	431a      	orrs	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	431a      	orrs	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003248:	f023 0201 	bic.w	r2, r3, #1
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e006      	b.n	8003264 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
  }
}
 8003264:	4618      	mov	r0, r3
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	40006400 	.word	0x40006400

08003274 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d12e      	bne.n	80032e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032a0:	f7ff f9ca 	bl	8002638 <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032a6:	e012      	b.n	80032ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032a8:	f7ff f9c6 	bl	8002638 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b0a      	cmp	r3, #10
 80032b4:	d90b      	bls.n	80032ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2205      	movs	r2, #5
 80032c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e012      	b.n	80032f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e5      	bne.n	80032a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e006      	b.n	80032f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
  }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b089      	sub	sp, #36	; 0x24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003310:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800331a:	7ffb      	ldrb	r3, [r7, #31]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d003      	beq.n	8003328 <HAL_CAN_AddTxMessage+0x2c>
 8003320:	7ffb      	ldrb	r3, [r7, #31]
 8003322:	2b02      	cmp	r3, #2
 8003324:	f040 80b8 	bne.w	8003498 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10a      	bne.n	8003348 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80a0 	beq.w	8003488 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	0e1b      	lsrs	r3, r3, #24
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d907      	bls.n	8003368 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e09e      	b.n	80034a6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003368:	2201      	movs	r2, #1
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	409a      	lsls	r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003384:	68f9      	ldr	r1, [r7, #12]
 8003386:	6809      	ldr	r1, [r1, #0]
 8003388:	431a      	orrs	r2, r3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	3318      	adds	r3, #24
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	440b      	add	r3, r1
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e00f      	b.n	80033b6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033a6:	68f9      	ldr	r1, [r7, #12]
 80033a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80033aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3318      	adds	r3, #24
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	440b      	add	r3, r1
 80033b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	3318      	adds	r3, #24
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	440b      	add	r3, r1
 80033c6:	3304      	adds	r3, #4
 80033c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	7d1b      	ldrb	r3, [r3, #20]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d111      	bne.n	80033f6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	3318      	adds	r3, #24
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	4413      	add	r3, r2
 80033de:	3304      	adds	r3, #4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	6811      	ldr	r1, [r2, #0]
 80033e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	3318      	adds	r3, #24
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	440b      	add	r3, r1
 80033f2:	3304      	adds	r3, #4
 80033f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3307      	adds	r3, #7
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	061a      	lsls	r2, r3, #24
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3306      	adds	r3, #6
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3305      	adds	r3, #5
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	4313      	orrs	r3, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	3204      	adds	r2, #4
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	4610      	mov	r0, r2
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	6811      	ldr	r1, [r2, #0]
 800341e:	ea43 0200 	orr.w	r2, r3, r0
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	440b      	add	r3, r1
 8003428:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800342c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3303      	adds	r3, #3
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	061a      	lsls	r2, r3, #24
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3302      	adds	r3, #2
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3301      	adds	r3, #1
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	4313      	orrs	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	7812      	ldrb	r2, [r2, #0]
 800344e:	4610      	mov	r0, r2
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	6811      	ldr	r1, [r2, #0]
 8003454:	ea43 0200 	orr.w	r2, r3, r0
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	440b      	add	r3, r1
 800345e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003462:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	3318      	adds	r3, #24
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	4413      	add	r3, r2
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	6811      	ldr	r1, [r2, #0]
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	3318      	adds	r3, #24
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	440b      	add	r3, r1
 8003482:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	e00e      	b.n	80034a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e006      	b.n	80034a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
  }
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3724      	adds	r7, #36	; 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b085      	sub	sp, #20
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80034c6:	7afb      	ldrb	r3, [r7, #11]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d002      	beq.n	80034d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80034cc:	7afb      	ldrb	r3, [r7, #11]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d11d      	bne.n	800350e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3301      	adds	r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3301      	adds	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3301      	adds	r3, #1
 800350c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800350e:	68fb      	ldr	r3, [r7, #12]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003530:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d003      	beq.n	8003540 <HAL_CAN_GetRxMessage+0x24>
 8003538:	7dfb      	ldrb	r3, [r7, #23]
 800353a:	2b02      	cmp	r3, #2
 800353c:	f040 80f3 	bne.w	8003726 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10e      	bne.n	8003564 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d116      	bne.n	8003582 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0e7      	b.n	8003734 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d107      	bne.n	8003582 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e0d8      	b.n	8003734 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	331b      	adds	r3, #27
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	4413      	add	r3, r2
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0204 	and.w	r2, r3, #4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10c      	bne.n	80035ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	331b      	adds	r3, #27
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	4413      	add	r3, r2
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	0d5b      	lsrs	r3, r3, #21
 80035b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	e00b      	b.n	80035d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	331b      	adds	r3, #27
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	4413      	add	r3, r2
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	08db      	lsrs	r3, r3, #3
 80035ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	331b      	adds	r3, #27
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	4413      	add	r3, r2
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0202 	and.w	r2, r3, #2
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	331b      	adds	r3, #27
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	4413      	add	r3, r2
 80035f4:	3304      	adds	r3, #4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 020f 	and.w	r2, r3, #15
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	331b      	adds	r3, #27
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	3304      	adds	r3, #4
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0a1b      	lsrs	r3, r3, #8
 8003612:	b2da      	uxtb	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	331b      	adds	r3, #27
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4413      	add	r3, r2
 8003624:	3304      	adds	r3, #4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	4413      	add	r3, r2
 800363a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	4413      	add	r3, r2
 8003650:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	0a1a      	lsrs	r2, r3, #8
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	3301      	adds	r3, #1
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	4413      	add	r3, r2
 800366a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	0c1a      	lsrs	r2, r3, #16
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	3302      	adds	r3, #2
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	4413      	add	r3, r2
 8003684:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	0e1a      	lsrs	r2, r3, #24
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	3303      	adds	r3, #3
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	4413      	add	r3, r2
 800369e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	3304      	adds	r3, #4
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0a1a      	lsrs	r2, r3, #8
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	3305      	adds	r3, #5
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	0c1a      	lsrs	r2, r3, #16
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	3306      	adds	r3, #6
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	0e1a      	lsrs	r2, r3, #24
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	3307      	adds	r3, #7
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d108      	bne.n	8003712 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0220 	orr.w	r2, r2, #32
 800370e:	60da      	str	r2, [r3, #12]
 8003710:	e007      	b.n	8003722 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0220 	orr.w	r2, r2, #32
 8003720:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	e006      	b.n	8003734 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
  }
}
 8003734:	4618      	mov	r0, r3
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003750:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d002      	beq.n	800375e <HAL_CAN_ActivateNotification+0x1e>
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d109      	bne.n	8003772 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6959      	ldr	r1, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e006      	b.n	8003780 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
  }
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003794:	2300      	movs	r3, #0
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d07c      	beq.n	80038cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d023      	beq.n	8003824 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2201      	movs	r2, #1
 80037e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f983 	bl	8003afa <HAL_CAN_TxMailbox0CompleteCallback>
 80037f4:	e016      	b.n	8003824 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d004      	beq.n	800380a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
 8003808:	e00c      	b.n	8003824 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d004      	beq.n	800381e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
 800381c:	e002      	b.n	8003824 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f989 	bl	8003b36 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d024      	beq.n	8003878 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003836:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f963 	bl	8003b0e <HAL_CAN_TxMailbox1CompleteCallback>
 8003848:	e016      	b.n	8003878 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d004      	beq.n	800385e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
 800385c:	e00c      	b.n	8003878 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003864:	2b00      	cmp	r3, #0
 8003866:	d004      	beq.n	8003872 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
 8003870:	e002      	b.n	8003878 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f969 	bl	8003b4a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d024      	beq.n	80038cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800388a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f943 	bl	8003b22 <HAL_CAN_TxMailbox2CompleteCallback>
 800389c:	e016      	b.n	80038cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d004      	beq.n	80038b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
 80038b0:	e00c      	b.n	80038cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
 80038c4:	e002      	b.n	80038cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f949 	bl	8003b5e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00c      	beq.n	80038f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2210      	movs	r2, #16
 80038ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d006      	beq.n	8003912 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2208      	movs	r2, #8
 800390a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f930 	bl	8003b72 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd fc34 	bl	8001198 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00c      	beq.n	8003954 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800394a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2210      	movs	r2, #16
 8003952:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d006      	beq.n	8003976 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2208      	movs	r2, #8
 800396e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f912 	bl	8003b9a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	d009      	beq.n	8003994 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f8f9 	bl	8003b86 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d006      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2210      	movs	r2, #16
 80039ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f8fc 	bl	8003bae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00b      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d006      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2208      	movs	r2, #8
 80039d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8f5 	bl	8003bc2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d07b      	beq.n	8003ada <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d072      	beq.n	8003ad2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	f043 0304 	orr.w	r3, r3, #4
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d043      	beq.n	8003ad2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d03e      	beq.n	8003ad2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a5a:	2b60      	cmp	r3, #96	; 0x60
 8003a5c:	d02b      	beq.n	8003ab6 <HAL_CAN_IRQHandler+0x32a>
 8003a5e:	2b60      	cmp	r3, #96	; 0x60
 8003a60:	d82e      	bhi.n	8003ac0 <HAL_CAN_IRQHandler+0x334>
 8003a62:	2b50      	cmp	r3, #80	; 0x50
 8003a64:	d022      	beq.n	8003aac <HAL_CAN_IRQHandler+0x320>
 8003a66:	2b50      	cmp	r3, #80	; 0x50
 8003a68:	d82a      	bhi.n	8003ac0 <HAL_CAN_IRQHandler+0x334>
 8003a6a:	2b40      	cmp	r3, #64	; 0x40
 8003a6c:	d019      	beq.n	8003aa2 <HAL_CAN_IRQHandler+0x316>
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	d826      	bhi.n	8003ac0 <HAL_CAN_IRQHandler+0x334>
 8003a72:	2b30      	cmp	r3, #48	; 0x30
 8003a74:	d010      	beq.n	8003a98 <HAL_CAN_IRQHandler+0x30c>
 8003a76:	2b30      	cmp	r3, #48	; 0x30
 8003a78:	d822      	bhi.n	8003ac0 <HAL_CAN_IRQHandler+0x334>
 8003a7a:	2b10      	cmp	r3, #16
 8003a7c:	d002      	beq.n	8003a84 <HAL_CAN_IRQHandler+0x2f8>
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d005      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a82:	e01d      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	f043 0308 	orr.w	r3, r3, #8
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a8c:	e019      	b.n	8003ac2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	f043 0310 	orr.w	r3, r3, #16
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a96:	e014      	b.n	8003ac2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	f043 0320 	orr.w	r3, r3, #32
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aa0:	e00f      	b.n	8003ac2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aaa:	e00a      	b.n	8003ac2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ab4:	e005      	b.n	8003ac2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003abe:	e000      	b.n	8003ac2 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ac0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ad0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2204      	movs	r2, #4
 8003ad8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f872 	bl	8003bd6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003af2:	bf00      	nop
 8003af4:	3728      	adds	r7, #40	; 0x28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <__NVIC_SetPriorityGrouping>:
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c1e:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	60d3      	str	r3, [r2, #12]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <__NVIC_GetPriorityGrouping>:
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <__NVIC_GetPriorityGrouping+0x18>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f003 0307 	and.w	r3, r3, #7
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <__NVIC_EnableIRQ>:
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	db0b      	blt.n	8003c7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	f003 021f 	and.w	r2, r3, #31
 8003c68:	4907      	ldr	r1, [pc, #28]	; (8003c88 <__NVIC_EnableIRQ+0x38>)
 8003c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2001      	movs	r0, #1
 8003c72:	fa00 f202 	lsl.w	r2, r0, r2
 8003c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	e000e100 	.word	0xe000e100

08003c8c <__NVIC_SetPriority>:
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	6039      	str	r1, [r7, #0]
 8003c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	db0a      	blt.n	8003cb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	490c      	ldr	r1, [pc, #48]	; (8003cd8 <__NVIC_SetPriority+0x4c>)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	0112      	lsls	r2, r2, #4
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	440b      	add	r3, r1
 8003cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003cb4:	e00a      	b.n	8003ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4908      	ldr	r1, [pc, #32]	; (8003cdc <__NVIC_SetPriority+0x50>)
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	3b04      	subs	r3, #4
 8003cc4:	0112      	lsls	r2, r2, #4
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	440b      	add	r3, r1
 8003cca:	761a      	strb	r2, [r3, #24]
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000e100 	.word	0xe000e100
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <NVIC_EncodePriority>:
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f1c3 0307 	rsb	r3, r3, #7
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	bf28      	it	cs
 8003cfe:	2304      	movcs	r3, #4
 8003d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3304      	adds	r3, #4
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d902      	bls.n	8003d10 <NVIC_EncodePriority+0x30>
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3b03      	subs	r3, #3
 8003d0e:	e000      	b.n	8003d12 <NVIC_EncodePriority+0x32>
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d14:	f04f 32ff 	mov.w	r2, #4294967295
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	401a      	ands	r2, r3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d28:	f04f 31ff 	mov.w	r1, #4294967295
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d32:	43d9      	mvns	r1, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d38:	4313      	orrs	r3, r2
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3724      	adds	r7, #36	; 0x24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <SysTick_Config>:
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d58:	d301      	bcc.n	8003d5e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e00f      	b.n	8003d7e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <SysTick_Config+0x40>)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d66:	210f      	movs	r1, #15
 8003d68:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6c:	f7ff ff8e 	bl	8003c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <SysTick_Config+0x40>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d76:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <SysTick_Config+0x40>)
 8003d78:	2207      	movs	r2, #7
 8003d7a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	e000e010 	.word	0xe000e010

08003d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff ff29 	bl	8003bec <__NVIC_SetPriorityGrouping>
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b086      	sub	sp, #24
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	4603      	mov	r3, r0
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
 8003dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003db4:	f7ff ff3e 	bl	8003c34 <__NVIC_GetPriorityGrouping>
 8003db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	6978      	ldr	r0, [r7, #20]
 8003dc0:	f7ff ff8e 	bl	8003ce0 <NVIC_EncodePriority>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff ff5d 	bl	8003c8c <__NVIC_SetPriority>
}
 8003dd2:	bf00      	nop
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	4603      	mov	r3, r0
 8003de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff ff31 	bl	8003c50 <__NVIC_EnableIRQ>
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff ffa2 	bl	8003d48 <SysTick_Config>
 8003e04:	4603      	mov	r3, r0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003e12:	f7fd fa79 	bl	8001308 <HAL_SYSTICK_Callback>
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e00e      	b.n	8003e4a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	795b      	ldrb	r3, [r3, #5]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d105      	bne.n	8003e42 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7fd fda7 	bl	8001990 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e60:	f7fe fbea 	bl	8002638 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e099      	b.n	8003fa4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e90:	e00f      	b.n	8003eb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e92:	f7fe fbd1 	bl	8002638 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d908      	bls.n	8003eb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e078      	b.n	8003fa4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e8      	bne.n	8003e92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4b38      	ldr	r3, [pc, #224]	; (8003fac <HAL_DMA_Init+0x158>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d107      	bne.n	8003f1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	4313      	orrs	r3, r2
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0307 	bic.w	r3, r3, #7
 8003f32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d117      	bne.n	8003f76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00e      	beq.n	8003f76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fa6f 	bl	800443c <DMA_CheckFifoParam>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2240      	movs	r2, #64	; 0x40
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f72:	2301      	movs	r3, #1
 8003f74:	e016      	b.n	8003fa4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa26 	bl	80043d0 <DMA_CalcBaseAndBitshift>
 8003f84:	4603      	mov	r3, r0
 8003f86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8c:	223f      	movs	r2, #63	; 0x3f
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	f010803f 	.word	0xf010803f

08003fb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_DMA_Start_IT+0x26>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e040      	b.n	8004058 <HAL_DMA_Start_IT+0xa8>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d12f      	bne.n	800404a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2202      	movs	r2, #2
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f9b8 	bl	8004374 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004008:	223f      	movs	r2, #63	; 0x3f
 800400a:	409a      	lsls	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0216 	orr.w	r2, r2, #22
 800401e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0208 	orr.w	r2, r2, #8
 8004036:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e005      	b.n	8004056 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004052:	2302      	movs	r3, #2
 8004054:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004056:	7dfb      	ldrb	r3, [r7, #23]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800406c:	4b92      	ldr	r3, [pc, #584]	; (80042b8 <HAL_DMA_IRQHandler+0x258>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a92      	ldr	r2, [pc, #584]	; (80042bc <HAL_DMA_IRQHandler+0x25c>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	0a9b      	lsrs	r3, r3, #10
 8004078:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408a:	2208      	movs	r2, #8
 800408c:	409a      	lsls	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4013      	ands	r3, r2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01a      	beq.n	80040cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d013      	beq.n	80040cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0204 	bic.w	r2, r2, #4
 80040b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b8:	2208      	movs	r2, #8
 80040ba:	409a      	lsls	r2, r3
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c4:	f043 0201 	orr.w	r2, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d0:	2201      	movs	r2, #1
 80040d2:	409a      	lsls	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d012      	beq.n	8004102 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ee:	2201      	movs	r2, #1
 80040f0:	409a      	lsls	r2, r3
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	f043 0202 	orr.w	r2, r3, #2
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004106:	2204      	movs	r2, #4
 8004108:	409a      	lsls	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4013      	ands	r3, r2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d012      	beq.n	8004138 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004124:	2204      	movs	r2, #4
 8004126:	409a      	lsls	r2, r3
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	f043 0204 	orr.w	r2, r3, #4
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	2210      	movs	r2, #16
 800413e:	409a      	lsls	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d043      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d03c      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	2210      	movs	r2, #16
 800415c:	409a      	lsls	r2, r3
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d018      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d108      	bne.n	8004190 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d024      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
 800418e:	e01f      	b.n	80041d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01b      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
 80041a0:	e016      	b.n	80041d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d107      	bne.n	80041c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0208 	bic.w	r2, r2, #8
 80041be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d4:	2220      	movs	r2, #32
 80041d6:	409a      	lsls	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 808e 	beq.w	80042fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8086 	beq.w	80042fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f6:	2220      	movs	r2, #32
 80041f8:	409a      	lsls	r2, r3
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b05      	cmp	r3, #5
 8004208:	d136      	bne.n	8004278 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0216 	bic.w	r2, r2, #22
 8004218:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004228:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <HAL_DMA_IRQHandler+0x1da>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0208 	bic.w	r2, r2, #8
 8004248:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	223f      	movs	r2, #63	; 0x3f
 8004250:	409a      	lsls	r2, r3
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426a:	2b00      	cmp	r3, #0
 800426c:	d07d      	beq.n	800436a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	4798      	blx	r3
        }
        return;
 8004276:	e078      	b.n	800436a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d01c      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d108      	bne.n	80042a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	2b00      	cmp	r3, #0
 800429a:	d030      	beq.n	80042fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
 80042a4:	e02b      	b.n	80042fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d027      	beq.n	80042fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	4798      	blx	r3
 80042b6:	e022      	b.n	80042fe <HAL_DMA_IRQHandler+0x29e>
 80042b8:	2000000c 	.word	0x2000000c
 80042bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10f      	bne.n	80042ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0210 	bic.w	r2, r2, #16
 80042dc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	2b00      	cmp	r3, #0
 8004304:	d032      	beq.n	800436c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d022      	beq.n	8004358 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2205      	movs	r2, #5
 8004316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0201 	bic.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	3301      	adds	r3, #1
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	429a      	cmp	r2, r3
 8004334:	d307      	bcc.n	8004346 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f2      	bne.n	800432a <HAL_DMA_IRQHandler+0x2ca>
 8004344:	e000      	b.n	8004348 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004346:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4798      	blx	r3
 8004368:	e000      	b.n	800436c <HAL_DMA_IRQHandler+0x30c>
        return;
 800436a:	bf00      	nop
    }
  }
}
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop

08004374 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004390:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d108      	bne.n	80043b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043b2:	e007      	b.n	80043c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	60da      	str	r2, [r3, #12]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	3b10      	subs	r3, #16
 80043e0:	4a14      	ldr	r2, [pc, #80]	; (8004434 <DMA_CalcBaseAndBitshift+0x64>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	091b      	lsrs	r3, r3, #4
 80043e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043ea:	4a13      	ldr	r2, [pc, #76]	; (8004438 <DMA_CalcBaseAndBitshift+0x68>)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d909      	bls.n	8004412 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004406:	f023 0303 	bic.w	r3, r3, #3
 800440a:	1d1a      	adds	r2, r3, #4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	659a      	str	r2, [r3, #88]	; 0x58
 8004410:	e007      	b.n	8004422 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800441a:	f023 0303 	bic.w	r3, r3, #3
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	aaaaaaab 	.word	0xaaaaaaab
 8004438:	08006c68 	.word	0x08006c68

0800443c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d11f      	bne.n	8004496 <DMA_CheckFifoParam+0x5a>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d856      	bhi.n	800450a <DMA_CheckFifoParam+0xce>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <DMA_CheckFifoParam+0x28>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	08004475 	.word	0x08004475
 8004468:	08004487 	.word	0x08004487
 800446c:	08004475 	.word	0x08004475
 8004470:	0800450b 	.word	0x0800450b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d046      	beq.n	800450e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004484:	e043      	b.n	800450e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800448e:	d140      	bne.n	8004512 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004494:	e03d      	b.n	8004512 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800449e:	d121      	bne.n	80044e4 <DMA_CheckFifoParam+0xa8>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d837      	bhi.n	8004516 <DMA_CheckFifoParam+0xda>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <DMA_CheckFifoParam+0x70>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044bd 	.word	0x080044bd
 80044b0:	080044c3 	.word	0x080044c3
 80044b4:	080044bd 	.word	0x080044bd
 80044b8:	080044d5 	.word	0x080044d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
      break;
 80044c0:	e030      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d025      	beq.n	800451a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d2:	e022      	b.n	800451a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044dc:	d11f      	bne.n	800451e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044e2:	e01c      	b.n	800451e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d903      	bls.n	80044f2 <DMA_CheckFifoParam+0xb6>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d003      	beq.n	80044f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044f0:	e018      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	73fb      	strb	r3, [r7, #15]
      break;
 80044f6:	e015      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00e      	beq.n	8004522 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
      break;
 8004508:	e00b      	b.n	8004522 <DMA_CheckFifoParam+0xe6>
      break;
 800450a:	bf00      	nop
 800450c:	e00a      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      break;
 800450e:	bf00      	nop
 8004510:	e008      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      break;
 8004512:	bf00      	nop
 8004514:	e006      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      break;
 8004516:	bf00      	nop
 8004518:	e004      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      break;
 800451a:	bf00      	nop
 800451c:	e002      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      break;   
 800451e:	bf00      	nop
 8004520:	e000      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      break;
 8004522:	bf00      	nop
    }
  } 
  
  return status; 
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop

08004534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004534:	b480      	push	{r7}
 8004536:	b089      	sub	sp, #36	; 0x24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004546:	2300      	movs	r3, #0
 8004548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
 800454e:	e16b      	b.n	8004828 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004550:	2201      	movs	r2, #1
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4013      	ands	r3, r2
 8004562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	429a      	cmp	r2, r3
 800456a:	f040 815a 	bne.w	8004822 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b01      	cmp	r3, #1
 8004578:	d005      	beq.n	8004586 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004582:	2b02      	cmp	r3, #2
 8004584:	d130      	bne.n	80045e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	2203      	movs	r2, #3
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43db      	mvns	r3, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4013      	ands	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045bc:	2201      	movs	r2, #1
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	43db      	mvns	r3, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4013      	ands	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	091b      	lsrs	r3, r3, #4
 80045d2:	f003 0201 	and.w	r2, r3, #1
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d017      	beq.n	8004624 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	2203      	movs	r2, #3
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4013      	ands	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4313      	orrs	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 0303 	and.w	r3, r3, #3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d123      	bne.n	8004678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	08da      	lsrs	r2, r3, #3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3208      	adds	r2, #8
 8004638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800463c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	220f      	movs	r2, #15
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4013      	ands	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4313      	orrs	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	08da      	lsrs	r2, r3, #3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3208      	adds	r2, #8
 8004672:	69b9      	ldr	r1, [r7, #24]
 8004674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	2203      	movs	r2, #3
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	43db      	mvns	r3, r3
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4013      	ands	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 0203 	and.w	r2, r3, #3
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 80b4 	beq.w	8004822 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	4b60      	ldr	r3, [pc, #384]	; (8004840 <HAL_GPIO_Init+0x30c>)
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	4a5f      	ldr	r2, [pc, #380]	; (8004840 <HAL_GPIO_Init+0x30c>)
 80046c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c8:	6453      	str	r3, [r2, #68]	; 0x44
 80046ca:	4b5d      	ldr	r3, [pc, #372]	; (8004840 <HAL_GPIO_Init+0x30c>)
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046d6:	4a5b      	ldr	r2, [pc, #364]	; (8004844 <HAL_GPIO_Init+0x310>)
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	089b      	lsrs	r3, r3, #2
 80046dc:	3302      	adds	r3, #2
 80046de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	220f      	movs	r2, #15
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4013      	ands	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a52      	ldr	r2, [pc, #328]	; (8004848 <HAL_GPIO_Init+0x314>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d02b      	beq.n	800475a <HAL_GPIO_Init+0x226>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a51      	ldr	r2, [pc, #324]	; (800484c <HAL_GPIO_Init+0x318>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d025      	beq.n	8004756 <HAL_GPIO_Init+0x222>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a50      	ldr	r2, [pc, #320]	; (8004850 <HAL_GPIO_Init+0x31c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d01f      	beq.n	8004752 <HAL_GPIO_Init+0x21e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a4f      	ldr	r2, [pc, #316]	; (8004854 <HAL_GPIO_Init+0x320>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d019      	beq.n	800474e <HAL_GPIO_Init+0x21a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a4e      	ldr	r2, [pc, #312]	; (8004858 <HAL_GPIO_Init+0x324>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <HAL_GPIO_Init+0x216>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a4d      	ldr	r2, [pc, #308]	; (800485c <HAL_GPIO_Init+0x328>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00d      	beq.n	8004746 <HAL_GPIO_Init+0x212>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a4c      	ldr	r2, [pc, #304]	; (8004860 <HAL_GPIO_Init+0x32c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d007      	beq.n	8004742 <HAL_GPIO_Init+0x20e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a4b      	ldr	r2, [pc, #300]	; (8004864 <HAL_GPIO_Init+0x330>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d101      	bne.n	800473e <HAL_GPIO_Init+0x20a>
 800473a:	2307      	movs	r3, #7
 800473c:	e00e      	b.n	800475c <HAL_GPIO_Init+0x228>
 800473e:	2308      	movs	r3, #8
 8004740:	e00c      	b.n	800475c <HAL_GPIO_Init+0x228>
 8004742:	2306      	movs	r3, #6
 8004744:	e00a      	b.n	800475c <HAL_GPIO_Init+0x228>
 8004746:	2305      	movs	r3, #5
 8004748:	e008      	b.n	800475c <HAL_GPIO_Init+0x228>
 800474a:	2304      	movs	r3, #4
 800474c:	e006      	b.n	800475c <HAL_GPIO_Init+0x228>
 800474e:	2303      	movs	r3, #3
 8004750:	e004      	b.n	800475c <HAL_GPIO_Init+0x228>
 8004752:	2302      	movs	r3, #2
 8004754:	e002      	b.n	800475c <HAL_GPIO_Init+0x228>
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <HAL_GPIO_Init+0x228>
 800475a:	2300      	movs	r3, #0
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	f002 0203 	and.w	r2, r2, #3
 8004762:	0092      	lsls	r2, r2, #2
 8004764:	4093      	lsls	r3, r2
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4313      	orrs	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800476c:	4935      	ldr	r1, [pc, #212]	; (8004844 <HAL_GPIO_Init+0x310>)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	089b      	lsrs	r3, r3, #2
 8004772:	3302      	adds	r3, #2
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800477a:	4b3b      	ldr	r3, [pc, #236]	; (8004868 <HAL_GPIO_Init+0x334>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	43db      	mvns	r3, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4013      	ands	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800479e:	4a32      	ldr	r2, [pc, #200]	; (8004868 <HAL_GPIO_Init+0x334>)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047a4:	4b30      	ldr	r3, [pc, #192]	; (8004868 <HAL_GPIO_Init+0x334>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047c8:	4a27      	ldr	r2, [pc, #156]	; (8004868 <HAL_GPIO_Init+0x334>)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047ce:	4b26      	ldr	r3, [pc, #152]	; (8004868 <HAL_GPIO_Init+0x334>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	43db      	mvns	r3, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4013      	ands	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047f2:	4a1d      	ldr	r2, [pc, #116]	; (8004868 <HAL_GPIO_Init+0x334>)
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_GPIO_Init+0x334>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800481c:	4a12      	ldr	r2, [pc, #72]	; (8004868 <HAL_GPIO_Init+0x334>)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3301      	adds	r3, #1
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b0f      	cmp	r3, #15
 800482c:	f67f ae90 	bls.w	8004550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop
 8004834:	3724      	adds	r7, #36	; 0x24
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40023800 	.word	0x40023800
 8004844:	40013800 	.word	0x40013800
 8004848:	40020000 	.word	0x40020000
 800484c:	40020400 	.word	0x40020400
 8004850:	40020800 	.word	0x40020800
 8004854:	40020c00 	.word	0x40020c00
 8004858:	40021000 	.word	0x40021000
 800485c:	40021400 	.word	0x40021400
 8004860:	40021800 	.word	0x40021800
 8004864:	40021c00 	.word	0x40021c00
 8004868:	40013c00 	.word	0x40013c00

0800486c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	807b      	strh	r3, [r7, #2]
 8004878:	4613      	mov	r3, r2
 800487a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800487c:	787b      	ldrb	r3, [r7, #1]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004882:	887a      	ldrh	r2, [r7, #2]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004888:	e003      	b.n	8004892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800488a:	887b      	ldrh	r3, [r7, #2]
 800488c:	041a      	lsls	r2, r3, #16
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	619a      	str	r2, [r3, #24]
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048b0:	887a      	ldrh	r2, [r7, #2]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4013      	ands	r3, r2
 80048b6:	041a      	lsls	r2, r3, #16
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	43d9      	mvns	r1, r3
 80048bc:	887b      	ldrh	r3, [r7, #2]
 80048be:	400b      	ands	r3, r1
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	619a      	str	r2, [r3, #24]
}
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d4:	b08f      	sub	sp, #60	; 0x3c
 80048d6:	af0a      	add	r7, sp, #40	; 0x28
 80048d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e10f      	b.n	8004b04 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fd fdc2 	bl	8002488 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2203      	movs	r2, #3
 8004908:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d102      	bne.n	800491e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f001 fd01 	bl	800632a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	603b      	str	r3, [r7, #0]
 800492e:	687e      	ldr	r6, [r7, #4]
 8004930:	466d      	mov	r5, sp
 8004932:	f106 0410 	add.w	r4, r6, #16
 8004936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800493a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800493c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800493e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004942:	e885 0003 	stmia.w	r5, {r0, r1}
 8004946:	1d33      	adds	r3, r6, #4
 8004948:	cb0e      	ldmia	r3, {r1, r2, r3}
 800494a:	6838      	ldr	r0, [r7, #0]
 800494c:	f001 fc8c 	bl	8006268 <USB_CoreInit>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e0d0      	b.n	8004b04 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2100      	movs	r1, #0
 8004968:	4618      	mov	r0, r3
 800496a:	f001 fcef 	bl	800634c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800496e:	2300      	movs	r3, #0
 8004970:	73fb      	strb	r3, [r7, #15]
 8004972:	e04a      	b.n	8004a0a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004974:	7bfa      	ldrb	r2, [r7, #15]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	333d      	adds	r3, #61	; 0x3d
 8004984:	2201      	movs	r2, #1
 8004986:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004988:	7bfa      	ldrb	r2, [r7, #15]
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	4613      	mov	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	333c      	adds	r3, #60	; 0x3c
 8004998:	7bfa      	ldrb	r2, [r7, #15]
 800499a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800499c:	7bfa      	ldrb	r2, [r7, #15]
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	b298      	uxth	r0, r3
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	4613      	mov	r3, r2
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	1a9b      	subs	r3, r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	3342      	adds	r3, #66	; 0x42
 80049b0:	4602      	mov	r2, r0
 80049b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049b4:	7bfa      	ldrb	r2, [r7, #15]
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	4613      	mov	r3, r2
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	1a9b      	subs	r3, r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	333f      	adds	r3, #63	; 0x3f
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049c8:	7bfa      	ldrb	r2, [r7, #15]
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	1a9b      	subs	r3, r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	3344      	adds	r3, #68	; 0x44
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049dc:	7bfa      	ldrb	r2, [r7, #15]
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	3348      	adds	r3, #72	; 0x48
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049f0:	7bfa      	ldrb	r2, [r7, #15]
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	1a9b      	subs	r3, r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	3350      	adds	r3, #80	; 0x50
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	3301      	adds	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d3af      	bcc.n	8004974 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a14:	2300      	movs	r3, #0
 8004a16:	73fb      	strb	r3, [r7, #15]
 8004a18:	e044      	b.n	8004aa4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a1a:	7bfa      	ldrb	r2, [r7, #15]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a30:	7bfa      	ldrb	r2, [r7, #15]
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	4613      	mov	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004a42:	7bfa      	ldrb	r2, [r7, #15]
 8004a44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a46:	7bfa      	ldrb	r2, [r7, #15]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a5c:	7bfa      	ldrb	r2, [r7, #15]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a72:	7bfa      	ldrb	r2, [r7, #15]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a88:	7bfa      	ldrb	r2, [r7, #15]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
 8004aa4:	7bfa      	ldrb	r2, [r7, #15]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d3b5      	bcc.n	8004a1a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	687e      	ldr	r6, [r7, #4]
 8004ab6:	466d      	mov	r5, sp
 8004ab8:	f106 0410 	add.w	r4, r6, #16
 8004abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ac8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004acc:	1d33      	adds	r3, r6, #4
 8004ace:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ad0:	6838      	ldr	r0, [r7, #0]
 8004ad2:	f001 fc87 	bl	80063e4 <USB_DevInit>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e00d      	b.n	8004b04 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f001 fe32 	bl	8006766 <USB_DevDisconnect>

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e264      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d075      	beq.n	8004c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b2a:	4ba3      	ldr	r3, [pc, #652]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d00c      	beq.n	8004b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b36:	4ba0      	ldr	r3, [pc, #640]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d112      	bne.n	8004b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b42:	4b9d      	ldr	r3, [pc, #628]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b4e:	d10b      	bne.n	8004b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	4b99      	ldr	r3, [pc, #612]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d05b      	beq.n	8004c14 <HAL_RCC_OscConfig+0x108>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d157      	bne.n	8004c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e23f      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b70:	d106      	bne.n	8004b80 <HAL_RCC_OscConfig+0x74>
 8004b72:	4b91      	ldr	r3, [pc, #580]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a90      	ldr	r2, [pc, #576]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e01d      	b.n	8004bbc <HAL_RCC_OscConfig+0xb0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b88:	d10c      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x98>
 8004b8a:	4b8b      	ldr	r3, [pc, #556]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a8a      	ldr	r2, [pc, #552]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	4b88      	ldr	r3, [pc, #544]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a87      	ldr	r2, [pc, #540]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e00b      	b.n	8004bbc <HAL_RCC_OscConfig+0xb0>
 8004ba4:	4b84      	ldr	r3, [pc, #528]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a83      	ldr	r2, [pc, #524]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	4b81      	ldr	r3, [pc, #516]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a80      	ldr	r2, [pc, #512]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d013      	beq.n	8004bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fd fd38 	bl	8002638 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7fd fd34 	bl	8002638 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e204      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bde:	4b76      	ldr	r3, [pc, #472]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0xc0>
 8004bea:	e014      	b.n	8004c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7fd fd24 	bl	8002638 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bf4:	f7fd fd20 	bl	8002638 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	; 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e1f0      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c06:	4b6c      	ldr	r3, [pc, #432]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0xe8>
 8004c12:	e000      	b.n	8004c16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d063      	beq.n	8004cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c22:	4b65      	ldr	r3, [pc, #404]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c2e:	4b62      	ldr	r3, [pc, #392]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d11c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3a:	4b5f      	ldr	r3, [pc, #380]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d116      	bne.n	8004c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c46:	4b5c      	ldr	r3, [pc, #368]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_RCC_OscConfig+0x152>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d001      	beq.n	8004c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e1c4      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5e:	4b56      	ldr	r3, [pc, #344]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4952      	ldr	r1, [pc, #328]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c72:	e03a      	b.n	8004cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d020      	beq.n	8004cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c7c:	4b4f      	ldr	r3, [pc, #316]	; (8004dbc <HAL_RCC_OscConfig+0x2b0>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fd fcd9 	bl	8002638 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c8a:	f7fd fcd5 	bl	8002638 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e1a5      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9c:	4b46      	ldr	r3, [pc, #280]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca8:	4b43      	ldr	r3, [pc, #268]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	4940      	ldr	r1, [pc, #256]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	600b      	str	r3, [r1, #0]
 8004cbc:	e015      	b.n	8004cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cbe:	4b3f      	ldr	r3, [pc, #252]	; (8004dbc <HAL_RCC_OscConfig+0x2b0>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fd fcb8 	bl	8002638 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ccc:	f7fd fcb4 	bl	8002638 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e184      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cde:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d030      	beq.n	8004d58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d016      	beq.n	8004d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cfe:	4b30      	ldr	r3, [pc, #192]	; (8004dc0 <HAL_RCC_OscConfig+0x2b4>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7fd fc98 	bl	8002638 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d0c:	f7fd fc94 	bl	8002638 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e164      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d1e:	4b26      	ldr	r3, [pc, #152]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x200>
 8004d2a:	e015      	b.n	8004d58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d2c:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <HAL_RCC_OscConfig+0x2b4>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d32:	f7fd fc81 	bl	8002638 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d3a:	f7fd fc7d 	bl	8002638 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e14d      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f0      	bne.n	8004d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80a0 	beq.w	8004ea6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6a:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10f      	bne.n	8004d96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	4a0e      	ldr	r2, [pc, #56]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d84:	6413      	str	r3, [r2, #64]	; 0x40
 8004d86:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <HAL_RCC_OscConfig+0x2ac>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_OscConfig+0x2b8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d121      	bne.n	8004de6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da2:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <HAL_RCC_OscConfig+0x2b8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a07      	ldr	r2, [pc, #28]	; (8004dc4 <HAL_RCC_OscConfig+0x2b8>)
 8004da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dae:	f7fd fc43 	bl	8002638 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db4:	e011      	b.n	8004dda <HAL_RCC_OscConfig+0x2ce>
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	42470000 	.word	0x42470000
 8004dc0:	42470e80 	.word	0x42470e80
 8004dc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc8:	f7fd fc36 	bl	8002638 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e106      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dda:	4b85      	ldr	r3, [pc, #532]	; (8004ff0 <HAL_RCC_OscConfig+0x4e4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d106      	bne.n	8004dfc <HAL_RCC_OscConfig+0x2f0>
 8004dee:	4b81      	ldr	r3, [pc, #516]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df2:	4a80      	ldr	r2, [pc, #512]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfa:	e01c      	b.n	8004e36 <HAL_RCC_OscConfig+0x32a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b05      	cmp	r3, #5
 8004e02:	d10c      	bne.n	8004e1e <HAL_RCC_OscConfig+0x312>
 8004e04:	4b7b      	ldr	r3, [pc, #492]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	4a7a      	ldr	r2, [pc, #488]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e0a:	f043 0304 	orr.w	r3, r3, #4
 8004e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e10:	4b78      	ldr	r3, [pc, #480]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	4a77      	ldr	r2, [pc, #476]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1c:	e00b      	b.n	8004e36 <HAL_RCC_OscConfig+0x32a>
 8004e1e:	4b75      	ldr	r3, [pc, #468]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e22:	4a74      	ldr	r2, [pc, #464]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2a:	4b72      	ldr	r3, [pc, #456]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	4a71      	ldr	r2, [pc, #452]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e30:	f023 0304 	bic.w	r3, r3, #4
 8004e34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d015      	beq.n	8004e6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3e:	f7fd fbfb 	bl	8002638 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e44:	e00a      	b.n	8004e5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e46:	f7fd fbf7 	bl	8002638 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e0c5      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5c:	4b65      	ldr	r3, [pc, #404]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0ee      	beq.n	8004e46 <HAL_RCC_OscConfig+0x33a>
 8004e68:	e014      	b.n	8004e94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e6a:	f7fd fbe5 	bl	8002638 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e70:	e00a      	b.n	8004e88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e72:	f7fd fbe1 	bl	8002638 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e0af      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e88:	4b5a      	ldr	r3, [pc, #360]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1ee      	bne.n	8004e72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d105      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e9a:	4b56      	ldr	r3, [pc, #344]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	4a55      	ldr	r2, [pc, #340]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 809b 	beq.w	8004fe6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eb0:	4b50      	ldr	r3, [pc, #320]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 030c 	and.w	r3, r3, #12
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d05c      	beq.n	8004f76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d141      	bne.n	8004f48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec4:	4b4c      	ldr	r3, [pc, #304]	; (8004ff8 <HAL_RCC_OscConfig+0x4ec>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eca:	f7fd fbb5 	bl	8002638 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed2:	f7fd fbb1 	bl	8002638 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e081      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee4:	4b43      	ldr	r3, [pc, #268]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f0      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	019b      	lsls	r3, r3, #6
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	041b      	lsls	r3, r3, #16
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	061b      	lsls	r3, r3, #24
 8004f14:	4937      	ldr	r1, [pc, #220]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f1a:	4b37      	ldr	r3, [pc, #220]	; (8004ff8 <HAL_RCC_OscConfig+0x4ec>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fd fb8a 	bl	8002638 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f28:	f7fd fb86 	bl	8002638 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e056      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0x41c>
 8004f46:	e04e      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f48:	4b2b      	ldr	r3, [pc, #172]	; (8004ff8 <HAL_RCC_OscConfig+0x4ec>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4e:	f7fd fb73 	bl	8002638 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f56:	f7fd fb6f 	bl	8002638 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e03f      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f68:	4b22      	ldr	r3, [pc, #136]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f0      	bne.n	8004f56 <HAL_RCC_OscConfig+0x44a>
 8004f74:	e037      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e032      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f82:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <HAL_RCC_OscConfig+0x4e8>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d028      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d121      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d11a      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fb8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d111      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	085b      	lsrs	r3, r3, #1
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d001      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40007000 	.word	0x40007000
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	42470060 	.word	0x42470060

08004ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0cc      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005010:	4b68      	ldr	r3, [pc, #416]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d90c      	bls.n	8005038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b65      	ldr	r3, [pc, #404]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005026:	4b63      	ldr	r3, [pc, #396]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d001      	beq.n	8005038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0b8      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d020      	beq.n	8005086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005050:	4b59      	ldr	r3, [pc, #356]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	4a58      	ldr	r2, [pc, #352]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800505a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005068:	4b53      	ldr	r3, [pc, #332]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4a52      	ldr	r2, [pc, #328]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005074:	4b50      	ldr	r3, [pc, #320]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	494d      	ldr	r1, [pc, #308]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d044      	beq.n	800511c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d107      	bne.n	80050aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509a:	4b47      	ldr	r3, [pc, #284]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d119      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e07f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d003      	beq.n	80050ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ba:	4b3f      	ldr	r3, [pc, #252]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e06f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ca:	4b3b      	ldr	r3, [pc, #236]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e067      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050da:	4b37      	ldr	r3, [pc, #220]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4934      	ldr	r1, [pc, #208]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050ec:	f7fd faa4 	bl	8002638 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fd faa0 	bl	8002638 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e04f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 020c 	and.w	r2, r3, #12
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	429a      	cmp	r2, r3
 800511a:	d1eb      	bne.n	80050f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d20c      	bcs.n	8005144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005132:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d001      	beq.n	8005144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e032      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005150:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4916      	ldr	r1, [pc, #88]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	490e      	ldr	r1, [pc, #56]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005182:	f000 f82d 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 8005186:	4602      	mov	r2, r0
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	490a      	ldr	r1, [pc, #40]	; (80051bc <HAL_RCC_ClockConfig+0x1c0>)
 8005194:	5ccb      	ldrb	r3, [r1, r3]
 8005196:	fa22 f303 	lsr.w	r3, r2, r3
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <HAL_RCC_ClockConfig+0x1c4>)
 800519c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800519e:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <HAL_RCC_ClockConfig+0x1c8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fd fa04 	bl	80025b0 <HAL_InitTick>

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40023c00 	.word	0x40023c00
 80051b8:	40023800 	.word	0x40023800
 80051bc:	08006c58 	.word	0x08006c58
 80051c0:	2000000c 	.word	0x2000000c
 80051c4:	20000010 	.word	0x20000010

080051c8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80051cc:	4b03      	ldr	r3, [pc, #12]	; (80051dc <HAL_RCC_EnableCSS+0x14>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
}
 80051d2:	bf00      	nop
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	4247004c 	.word	0x4247004c

080051e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	607b      	str	r3, [r7, #4]
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	2300      	movs	r3, #0
 80051f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051f8:	4b67      	ldr	r3, [pc, #412]	; (8005398 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 030c 	and.w	r3, r3, #12
 8005200:	2b08      	cmp	r3, #8
 8005202:	d00d      	beq.n	8005220 <HAL_RCC_GetSysClockFreq+0x40>
 8005204:	2b08      	cmp	r3, #8
 8005206:	f200 80bd 	bhi.w	8005384 <HAL_RCC_GetSysClockFreq+0x1a4>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <HAL_RCC_GetSysClockFreq+0x34>
 800520e:	2b04      	cmp	r3, #4
 8005210:	d003      	beq.n	800521a <HAL_RCC_GetSysClockFreq+0x3a>
 8005212:	e0b7      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005214:	4b61      	ldr	r3, [pc, #388]	; (800539c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005216:	60bb      	str	r3, [r7, #8]
       break;
 8005218:	e0b7      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800521a:	4b61      	ldr	r3, [pc, #388]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800521c:	60bb      	str	r3, [r7, #8]
      break;
 800521e:	e0b4      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005220:	4b5d      	ldr	r3, [pc, #372]	; (8005398 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005228:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800522a:	4b5b      	ldr	r3, [pc, #364]	; (8005398 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d04d      	beq.n	80052d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005236:	4b58      	ldr	r3, [pc, #352]	; (8005398 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	099b      	lsrs	r3, r3, #6
 800523c:	461a      	mov	r2, r3
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005246:	f04f 0100 	mov.w	r1, #0
 800524a:	ea02 0800 	and.w	r8, r2, r0
 800524e:	ea03 0901 	and.w	r9, r3, r1
 8005252:	4640      	mov	r0, r8
 8005254:	4649      	mov	r1, r9
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	014b      	lsls	r3, r1, #5
 8005260:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005264:	0142      	lsls	r2, r0, #5
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	ebb0 0008 	subs.w	r0, r0, r8
 800526e:	eb61 0109 	sbc.w	r1, r1, r9
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	018b      	lsls	r3, r1, #6
 800527c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005280:	0182      	lsls	r2, r0, #6
 8005282:	1a12      	subs	r2, r2, r0
 8005284:	eb63 0301 	sbc.w	r3, r3, r1
 8005288:	f04f 0000 	mov.w	r0, #0
 800528c:	f04f 0100 	mov.w	r1, #0
 8005290:	00d9      	lsls	r1, r3, #3
 8005292:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005296:	00d0      	lsls	r0, r2, #3
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	eb12 0208 	adds.w	r2, r2, r8
 80052a0:	eb43 0309 	adc.w	r3, r3, r9
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	f04f 0100 	mov.w	r1, #0
 80052ac:	0259      	lsls	r1, r3, #9
 80052ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80052b2:	0250      	lsls	r0, r2, #9
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4610      	mov	r0, r2
 80052ba:	4619      	mov	r1, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	461a      	mov	r2, r3
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	f7fb fc4e 	bl	8000b64 <__aeabi_uldivmod>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4613      	mov	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	e04a      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d2:	4b31      	ldr	r3, [pc, #196]	; (8005398 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	099b      	lsrs	r3, r3, #6
 80052d8:	461a      	mov	r2, r3
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052e2:	f04f 0100 	mov.w	r1, #0
 80052e6:	ea02 0400 	and.w	r4, r2, r0
 80052ea:	ea03 0501 	and.w	r5, r3, r1
 80052ee:	4620      	mov	r0, r4
 80052f0:	4629      	mov	r1, r5
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	014b      	lsls	r3, r1, #5
 80052fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005300:	0142      	lsls	r2, r0, #5
 8005302:	4610      	mov	r0, r2
 8005304:	4619      	mov	r1, r3
 8005306:	1b00      	subs	r0, r0, r4
 8005308:	eb61 0105 	sbc.w	r1, r1, r5
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	018b      	lsls	r3, r1, #6
 8005316:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800531a:	0182      	lsls	r2, r0, #6
 800531c:	1a12      	subs	r2, r2, r0
 800531e:	eb63 0301 	sbc.w	r3, r3, r1
 8005322:	f04f 0000 	mov.w	r0, #0
 8005326:	f04f 0100 	mov.w	r1, #0
 800532a:	00d9      	lsls	r1, r3, #3
 800532c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005330:	00d0      	lsls	r0, r2, #3
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	1912      	adds	r2, r2, r4
 8005338:	eb45 0303 	adc.w	r3, r5, r3
 800533c:	f04f 0000 	mov.w	r0, #0
 8005340:	f04f 0100 	mov.w	r1, #0
 8005344:	0299      	lsls	r1, r3, #10
 8005346:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800534a:	0290      	lsls	r0, r2, #10
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4610      	mov	r0, r2
 8005352:	4619      	mov	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	461a      	mov	r2, r3
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	f7fb fc02 	bl	8000b64 <__aeabi_uldivmod>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4613      	mov	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	0c1b      	lsrs	r3, r3, #16
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	3301      	adds	r3, #1
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	60bb      	str	r3, [r7, #8]
      break;
 8005382:	e002      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005384:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005386:	60bb      	str	r3, [r7, #8]
      break;
 8005388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800538a:	68bb      	ldr	r3, [r7, #8]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005396:	bf00      	nop
 8005398:	40023800 	.word	0x40023800
 800539c:	00f42400 	.word	0x00f42400
 80053a0:	007a1200 	.word	0x007a1200

080053a4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b0:	2b80      	cmp	r3, #128	; 0x80
 80053b2:	d104      	bne.n	80053be <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80053b4:	f000 f80a 	bl	80053cc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80053b8:	4b03      	ldr	r3, [pc, #12]	; (80053c8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80053ba:	2280      	movs	r2, #128	; 0x80
 80053bc:	701a      	strb	r2, [r3, #0]
  }
}
 80053be:	bf00      	nop
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40023800 	.word	0x40023800
 80053c8:	4002380e 	.word	0x4002380e

080053cc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e07b      	b.n	80054e4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d108      	bne.n	8005406 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053fc:	d009      	beq.n	8005412 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	61da      	str	r2, [r3, #28]
 8005404:	e005      	b.n	8005412 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d106      	bne.n	8005432 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7fc fc47 	bl	8001cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2202      	movs	r2, #2
 8005436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005448:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005496:	ea42 0103 	orr.w	r1, r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	0c1b      	lsrs	r3, r3, #16
 80054b0:	f003 0104 	and.w	r1, r3, #4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	f003 0210 	and.w	r2, r3, #16
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69da      	ldr	r2, [r3, #28]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e041      	b.n	8005582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fc feda 	bl	80022cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3304      	adds	r3, #4
 8005528:	4619      	mov	r1, r3
 800552a:	4610      	mov	r0, r2
 800552c:	f000 fa48 	bl	80059c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e041      	b.n	8005620 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7fc fe3d 	bl	8002230 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3304      	adds	r3, #4
 80055c6:	4619      	mov	r1, r3
 80055c8:	4610      	mov	r0, r2
 80055ca:	f000 f9f9 	bl	80059c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d109      	bne.n	800564c <HAL_TIM_PWM_Start+0x24>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	bf14      	ite	ne
 8005644:	2301      	movne	r3, #1
 8005646:	2300      	moveq	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	e022      	b.n	8005692 <HAL_TIM_PWM_Start+0x6a>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b04      	cmp	r3, #4
 8005650:	d109      	bne.n	8005666 <HAL_TIM_PWM_Start+0x3e>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b01      	cmp	r3, #1
 800565c:	bf14      	ite	ne
 800565e:	2301      	movne	r3, #1
 8005660:	2300      	moveq	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	e015      	b.n	8005692 <HAL_TIM_PWM_Start+0x6a>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d109      	bne.n	8005680 <HAL_TIM_PWM_Start+0x58>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b01      	cmp	r3, #1
 8005676:	bf14      	ite	ne
 8005678:	2301      	movne	r3, #1
 800567a:	2300      	moveq	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	e008      	b.n	8005692 <HAL_TIM_PWM_Start+0x6a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	bf14      	ite	ne
 800568c:	2301      	movne	r3, #1
 800568e:	2300      	moveq	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e07c      	b.n	8005794 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d104      	bne.n	80056aa <HAL_TIM_PWM_Start+0x82>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a8:	e013      	b.n	80056d2 <HAL_TIM_PWM_Start+0xaa>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d104      	bne.n	80056ba <HAL_TIM_PWM_Start+0x92>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b8:	e00b      	b.n	80056d2 <HAL_TIM_PWM_Start+0xaa>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d104      	bne.n	80056ca <HAL_TIM_PWM_Start+0xa2>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056c8:	e003      	b.n	80056d2 <HAL_TIM_PWM_Start+0xaa>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2201      	movs	r2, #1
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fcd0 	bl	8006080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a2d      	ldr	r2, [pc, #180]	; (800579c <HAL_TIM_PWM_Start+0x174>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_TIM_PWM_Start+0xcc>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <HAL_TIM_PWM_Start+0x178>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d101      	bne.n	80056f8 <HAL_TIM_PWM_Start+0xd0>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <HAL_TIM_PWM_Start+0xd2>
 80056f8:	2300      	movs	r3, #0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d007      	beq.n	800570e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800570c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a22      	ldr	r2, [pc, #136]	; (800579c <HAL_TIM_PWM_Start+0x174>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d022      	beq.n	800575e <HAL_TIM_PWM_Start+0x136>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005720:	d01d      	beq.n	800575e <HAL_TIM_PWM_Start+0x136>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a1f      	ldr	r2, [pc, #124]	; (80057a4 <HAL_TIM_PWM_Start+0x17c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d018      	beq.n	800575e <HAL_TIM_PWM_Start+0x136>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <HAL_TIM_PWM_Start+0x180>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <HAL_TIM_PWM_Start+0x136>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1c      	ldr	r2, [pc, #112]	; (80057ac <HAL_TIM_PWM_Start+0x184>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00e      	beq.n	800575e <HAL_TIM_PWM_Start+0x136>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a16      	ldr	r2, [pc, #88]	; (80057a0 <HAL_TIM_PWM_Start+0x178>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d009      	beq.n	800575e <HAL_TIM_PWM_Start+0x136>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a18      	ldr	r2, [pc, #96]	; (80057b0 <HAL_TIM_PWM_Start+0x188>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <HAL_TIM_PWM_Start+0x136>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a16      	ldr	r2, [pc, #88]	; (80057b4 <HAL_TIM_PWM_Start+0x18c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d111      	bne.n	8005782 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b06      	cmp	r3, #6
 800576e:	d010      	beq.n	8005792 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005780:	e007      	b.n	8005792 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0201 	orr.w	r2, r2, #1
 8005790:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40010000 	.word	0x40010000
 80057a0:	40010400 	.word	0x40010400
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40000800 	.word	0x40000800
 80057ac:	40000c00 	.word	0x40000c00
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40001800 	.word	0x40001800

080057b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e0ae      	b.n	8005934 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b0c      	cmp	r3, #12
 80057e2:	f200 809f 	bhi.w	8005924 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057e6:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	08005821 	.word	0x08005821
 80057f0:	08005925 	.word	0x08005925
 80057f4:	08005925 	.word	0x08005925
 80057f8:	08005925 	.word	0x08005925
 80057fc:	08005861 	.word	0x08005861
 8005800:	08005925 	.word	0x08005925
 8005804:	08005925 	.word	0x08005925
 8005808:	08005925 	.word	0x08005925
 800580c:	080058a3 	.word	0x080058a3
 8005810:	08005925 	.word	0x08005925
 8005814:	08005925 	.word	0x08005925
 8005818:	08005925 	.word	0x08005925
 800581c:	080058e3 	.word	0x080058e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	4618      	mov	r0, r3
 8005828:	f000 f96a 	bl	8005b00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699a      	ldr	r2, [r3, #24]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0208 	orr.w	r2, r2, #8
 800583a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0204 	bic.w	r2, r2, #4
 800584a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6999      	ldr	r1, [r3, #24]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	619a      	str	r2, [r3, #24]
      break;
 800585e:	e064      	b.n	800592a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 f9ba 	bl	8005be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800587a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800588a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6999      	ldr	r1, [r3, #24]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	021a      	lsls	r2, r3, #8
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	619a      	str	r2, [r3, #24]
      break;
 80058a0:	e043      	b.n	800592a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fa0f 	bl	8005ccc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69da      	ldr	r2, [r3, #28]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 0208 	orr.w	r2, r2, #8
 80058bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0204 	bic.w	r2, r2, #4
 80058cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69d9      	ldr	r1, [r3, #28]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	61da      	str	r2, [r3, #28]
      break;
 80058e0:	e023      	b.n	800592a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fa63 	bl	8005db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69da      	ldr	r2, [r3, #28]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800590c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69d9      	ldr	r1, [r3, #28]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	021a      	lsls	r2, r3, #8
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	61da      	str	r2, [r3, #28]
      break;
 8005922:	e002      	b.n	800592a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	75fb      	strb	r3, [r7, #23]
      break;
 8005928:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005932:	7dfb      	ldrb	r3, [r7, #23]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005950:	2302      	movs	r3, #2
 8005952:	e031      	b.n	80059b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fa7a 	bl	8005e60 <TIM_SlaveTimer_SetConfig>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e018      	b.n	80059b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005994:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059a4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a40      	ldr	r2, [pc, #256]	; (8005ad4 <TIM_Base_SetConfig+0x114>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d013      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d00f      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a3d      	ldr	r2, [pc, #244]	; (8005ad8 <TIM_Base_SetConfig+0x118>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00b      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a3c      	ldr	r2, [pc, #240]	; (8005adc <TIM_Base_SetConfig+0x11c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d007      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a3b      	ldr	r2, [pc, #236]	; (8005ae0 <TIM_Base_SetConfig+0x120>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a3a      	ldr	r2, [pc, #232]	; (8005ae4 <TIM_Base_SetConfig+0x124>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d108      	bne.n	8005a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a2f      	ldr	r2, [pc, #188]	; (8005ad4 <TIM_Base_SetConfig+0x114>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d02b      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a20:	d027      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2c      	ldr	r2, [pc, #176]	; (8005ad8 <TIM_Base_SetConfig+0x118>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d023      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2b      	ldr	r2, [pc, #172]	; (8005adc <TIM_Base_SetConfig+0x11c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01f      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2a      	ldr	r2, [pc, #168]	; (8005ae0 <TIM_Base_SetConfig+0x120>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01b      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a29      	ldr	r2, [pc, #164]	; (8005ae4 <TIM_Base_SetConfig+0x124>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d017      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a28      	ldr	r2, [pc, #160]	; (8005ae8 <TIM_Base_SetConfig+0x128>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a27      	ldr	r2, [pc, #156]	; (8005aec <TIM_Base_SetConfig+0x12c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00f      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a26      	ldr	r2, [pc, #152]	; (8005af0 <TIM_Base_SetConfig+0x130>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00b      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a25      	ldr	r2, [pc, #148]	; (8005af4 <TIM_Base_SetConfig+0x134>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d007      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a24      	ldr	r2, [pc, #144]	; (8005af8 <TIM_Base_SetConfig+0x138>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a23      	ldr	r2, [pc, #140]	; (8005afc <TIM_Base_SetConfig+0x13c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d108      	bne.n	8005a84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <TIM_Base_SetConfig+0x114>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_Base_SetConfig+0xf8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <TIM_Base_SetConfig+0x124>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d103      	bne.n	8005ac0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	615a      	str	r2, [r3, #20]
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40000400 	.word	0x40000400
 8005adc:	40000800 	.word	0x40000800
 8005ae0:	40000c00 	.word	0x40000c00
 8005ae4:	40010400 	.word	0x40010400
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40014400 	.word	0x40014400
 8005af0:	40014800 	.word	0x40014800
 8005af4:	40001800 	.word	0x40001800
 8005af8:	40001c00 	.word	0x40001c00
 8005afc:	40002000 	.word	0x40002000

08005b00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f023 0201 	bic.w	r2, r3, #1
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0303 	bic.w	r3, r3, #3
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f023 0302 	bic.w	r3, r3, #2
 8005b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a20      	ldr	r2, [pc, #128]	; (8005bd8 <TIM_OC1_SetConfig+0xd8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d003      	beq.n	8005b64 <TIM_OC1_SetConfig+0x64>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a1f      	ldr	r2, [pc, #124]	; (8005bdc <TIM_OC1_SetConfig+0xdc>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d10c      	bne.n	8005b7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f023 0308 	bic.w	r3, r3, #8
 8005b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f023 0304 	bic.w	r3, r3, #4
 8005b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a15      	ldr	r2, [pc, #84]	; (8005bd8 <TIM_OC1_SetConfig+0xd8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d003      	beq.n	8005b8e <TIM_OC1_SetConfig+0x8e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a14      	ldr	r2, [pc, #80]	; (8005bdc <TIM_OC1_SetConfig+0xdc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d111      	bne.n	8005bb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	621a      	str	r2, [r3, #32]
}
 8005bcc:	bf00      	nop
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	40010000 	.word	0x40010000
 8005bdc:	40010400 	.word	0x40010400

08005be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f023 0210 	bic.w	r2, r3, #16
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	021b      	lsls	r3, r3, #8
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0320 	bic.w	r3, r3, #32
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a22      	ldr	r2, [pc, #136]	; (8005cc4 <TIM_OC2_SetConfig+0xe4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_OC2_SetConfig+0x68>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a21      	ldr	r2, [pc, #132]	; (8005cc8 <TIM_OC2_SetConfig+0xe8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d10d      	bne.n	8005c64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a17      	ldr	r2, [pc, #92]	; (8005cc4 <TIM_OC2_SetConfig+0xe4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d003      	beq.n	8005c74 <TIM_OC2_SetConfig+0x94>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a16      	ldr	r2, [pc, #88]	; (8005cc8 <TIM_OC2_SetConfig+0xe8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d113      	bne.n	8005c9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	621a      	str	r2, [r3, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40010000 	.word	0x40010000
 8005cc8:	40010400 	.word	0x40010400

08005ccc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0303 	bic.w	r3, r3, #3
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	021b      	lsls	r3, r3, #8
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a21      	ldr	r2, [pc, #132]	; (8005dac <TIM_OC3_SetConfig+0xe0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d003      	beq.n	8005d32 <TIM_OC3_SetConfig+0x66>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a20      	ldr	r2, [pc, #128]	; (8005db0 <TIM_OC3_SetConfig+0xe4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10d      	bne.n	8005d4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a16      	ldr	r2, [pc, #88]	; (8005dac <TIM_OC3_SetConfig+0xe0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d003      	beq.n	8005d5e <TIM_OC3_SetConfig+0x92>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <TIM_OC3_SetConfig+0xe4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d113      	bne.n	8005d86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	621a      	str	r2, [r3, #32]
}
 8005da0:	bf00      	nop
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40010400 	.word	0x40010400

08005db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	031b      	lsls	r3, r3, #12
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a12      	ldr	r2, [pc, #72]	; (8005e58 <TIM_OC4_SetConfig+0xa4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC4_SetConfig+0x68>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a11      	ldr	r2, [pc, #68]	; (8005e5c <TIM_OC4_SetConfig+0xa8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d109      	bne.n	8005e30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	019b      	lsls	r3, r3, #6
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40010000 	.word	0x40010000
 8005e5c:	40010400 	.word	0x40010400

08005e60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f023 0307 	bic.w	r3, r3, #7
 8005e8e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2b70      	cmp	r3, #112	; 0x70
 8005ea8:	d01a      	beq.n	8005ee0 <TIM_SlaveTimer_SetConfig+0x80>
 8005eaa:	2b70      	cmp	r3, #112	; 0x70
 8005eac:	d860      	bhi.n	8005f70 <TIM_SlaveTimer_SetConfig+0x110>
 8005eae:	2b60      	cmp	r3, #96	; 0x60
 8005eb0:	d054      	beq.n	8005f5c <TIM_SlaveTimer_SetConfig+0xfc>
 8005eb2:	2b60      	cmp	r3, #96	; 0x60
 8005eb4:	d85c      	bhi.n	8005f70 <TIM_SlaveTimer_SetConfig+0x110>
 8005eb6:	2b50      	cmp	r3, #80	; 0x50
 8005eb8:	d046      	beq.n	8005f48 <TIM_SlaveTimer_SetConfig+0xe8>
 8005eba:	2b50      	cmp	r3, #80	; 0x50
 8005ebc:	d858      	bhi.n	8005f70 <TIM_SlaveTimer_SetConfig+0x110>
 8005ebe:	2b40      	cmp	r3, #64	; 0x40
 8005ec0:	d019      	beq.n	8005ef6 <TIM_SlaveTimer_SetConfig+0x96>
 8005ec2:	2b40      	cmp	r3, #64	; 0x40
 8005ec4:	d854      	bhi.n	8005f70 <TIM_SlaveTimer_SetConfig+0x110>
 8005ec6:	2b30      	cmp	r3, #48	; 0x30
 8005ec8:	d055      	beq.n	8005f76 <TIM_SlaveTimer_SetConfig+0x116>
 8005eca:	2b30      	cmp	r3, #48	; 0x30
 8005ecc:	d850      	bhi.n	8005f70 <TIM_SlaveTimer_SetConfig+0x110>
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d051      	beq.n	8005f76 <TIM_SlaveTimer_SetConfig+0x116>
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d84c      	bhi.n	8005f70 <TIM_SlaveTimer_SetConfig+0x110>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d04d      	beq.n	8005f76 <TIM_SlaveTimer_SetConfig+0x116>
 8005eda:	2b10      	cmp	r3, #16
 8005edc:	d04b      	beq.n	8005f76 <TIM_SlaveTimer_SetConfig+0x116>
 8005ede:	e047      	b.n	8005f70 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6818      	ldr	r0, [r3, #0]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68d9      	ldr	r1, [r3, #12]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f000 f8a6 	bl	8006040 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005ef4:	e040      	b.n	8005f78 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b05      	cmp	r3, #5
 8005efc:	d101      	bne.n	8005f02 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e03b      	b.n	8005f7a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6a1a      	ldr	r2, [r3, #32]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0201 	bic.w	r2, r2, #1
 8005f18:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f28:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]
      break;
 8005f46:	e017      	b.n	8005f78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	6899      	ldr	r1, [r3, #8]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	461a      	mov	r2, r3
 8005f56:	f000 f814 	bl	8005f82 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005f5a:	e00d      	b.n	8005f78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	6899      	ldr	r1, [r3, #8]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	f000 f839 	bl	8005fe0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005f6e:	e003      	b.n	8005f78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	75fb      	strb	r3, [r7, #23]
      break;
 8005f74:	e000      	b.n	8005f78 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005f76:	bf00      	nop
  }

  return status;
 8005f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b087      	sub	sp, #28
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	f023 0201 	bic.w	r2, r3, #1
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f023 030a 	bic.w	r3, r3, #10
 8005fbe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	621a      	str	r2, [r3, #32]
}
 8005fd4:	bf00      	nop
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	f023 0210 	bic.w	r2, r3, #16
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800600a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	031b      	lsls	r3, r3, #12
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800601c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	621a      	str	r2, [r3, #32]
}
 8006034:	bf00      	nop
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800605a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	021a      	lsls	r2, r3, #8
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	431a      	orrs	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4313      	orrs	r3, r2
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	609a      	str	r2, [r3, #8]
}
 8006074:	bf00      	nop
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	2201      	movs	r2, #1
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1a      	ldr	r2, [r3, #32]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	43db      	mvns	r3, r3
 80060a2:	401a      	ands	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a1a      	ldr	r2, [r3, #32]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	fa01 f303 	lsl.w	r3, r1, r3
 80060b8:	431a      	orrs	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
	...

080060cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d101      	bne.n	80060e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e05a      	b.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a21      	ldr	r2, [pc, #132]	; (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d022      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006130:	d01d      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a1d      	ldr	r2, [pc, #116]	; (80061ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d018      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1b      	ldr	r2, [pc, #108]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d013      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1a      	ldr	r2, [pc, #104]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00e      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a18      	ldr	r2, [pc, #96]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d009      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a17      	ldr	r2, [pc, #92]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d004      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a15      	ldr	r2, [pc, #84]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d10c      	bne.n	8006188 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	4313      	orrs	r3, r2
 800617e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40010000 	.word	0x40010000
 80061ac:	40000400 	.word	0x40000400
 80061b0:	40000800 	.word	0x40000800
 80061b4:	40000c00 	.word	0x40000c00
 80061b8:	40010400 	.word	0x40010400
 80061bc:	40014000 	.word	0x40014000
 80061c0:	40001800 	.word	0x40001800

080061c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061dc:	2302      	movs	r3, #2
 80061de:	e03d      	b.n	800625c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006268:	b084      	sub	sp, #16
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	f107 001c 	add.w	r0, r7, #28
 8006276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	2b01      	cmp	r3, #1
 800627e:	d122      	bne.n	80062c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d105      	bne.n	80062ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa82 	bl	80067c4 <USB_CoreReset>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
 80062c4:	e01a      	b.n	80062fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fa76 	bl	80067c4 <USB_CoreReset>
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	639a      	str	r2, [r3, #56]	; 0x38
 80062ee:	e005      	b.n	80062fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d10b      	bne.n	800631a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f043 0206 	orr.w	r2, r3, #6
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f043 0220 	orr.w	r2, r3, #32
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800631a:	7bfb      	ldrb	r3, [r7, #15]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006326:	b004      	add	sp, #16
 8006328:	4770      	bx	lr

0800632a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f023 0201 	bic.w	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d115      	bne.n	800639a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800637a:	2001      	movs	r0, #1
 800637c:	f7fc f968 	bl	8002650 <HAL_Delay>
      ms++;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3301      	adds	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fa0e 	bl	80067a8 <USB_GetMode>
 800638c:	4603      	mov	r3, r0
 800638e:	2b01      	cmp	r3, #1
 8006390:	d01e      	beq.n	80063d0 <USB_SetCurrentMode+0x84>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b31      	cmp	r3, #49	; 0x31
 8006396:	d9f0      	bls.n	800637a <USB_SetCurrentMode+0x2e>
 8006398:	e01a      	b.n	80063d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d115      	bne.n	80063cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063ac:	2001      	movs	r0, #1
 80063ae:	f7fc f94f 	bl	8002650 <HAL_Delay>
      ms++;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3301      	adds	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f9f5 	bl	80067a8 <USB_GetMode>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <USB_SetCurrentMode+0x84>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b31      	cmp	r3, #49	; 0x31
 80063c8:	d9f0      	bls.n	80063ac <USB_SetCurrentMode+0x60>
 80063ca:	e001      	b.n	80063d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e005      	b.n	80063dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b32      	cmp	r3, #50	; 0x32
 80063d4:	d101      	bne.n	80063da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063e4:	b084      	sub	sp, #16
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b086      	sub	sp, #24
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063fe:	2300      	movs	r3, #0
 8006400:	613b      	str	r3, [r7, #16]
 8006402:	e009      	b.n	8006418 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	3340      	adds	r3, #64	; 0x40
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	2200      	movs	r2, #0
 8006410:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	3301      	adds	r3, #1
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	2b0e      	cmp	r3, #14
 800641c:	d9f2      	bls.n	8006404 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800641e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006420:	2b00      	cmp	r3, #0
 8006422:	d11c      	bne.n	800645e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006432:	f043 0302 	orr.w	r3, r3, #2
 8006436:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	639a      	str	r2, [r3, #56]	; 0x38
 800645c:	e00b      	b.n	8006476 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006462:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800647c:	461a      	mov	r2, r3
 800647e:	2300      	movs	r3, #0
 8006480:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006488:	4619      	mov	r1, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006490:	461a      	mov	r2, r3
 8006492:	680b      	ldr	r3, [r1, #0]
 8006494:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	2b01      	cmp	r3, #1
 800649a:	d10c      	bne.n	80064b6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d104      	bne.n	80064ac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064a2:	2100      	movs	r1, #0
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f945 	bl	8006734 <USB_SetDevSpeed>
 80064aa:	e008      	b.n	80064be <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064ac:	2101      	movs	r1, #1
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f940 	bl	8006734 <USB_SetDevSpeed>
 80064b4:	e003      	b.n	80064be <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064b6:	2103      	movs	r1, #3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f93b 	bl	8006734 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064be:	2110      	movs	r1, #16
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f8f3 	bl	80066ac <USB_FlushTxFifo>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f90f 	bl	80066f4 <USB_FlushRxFifo>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e6:	461a      	mov	r2, r3
 80064e8:	2300      	movs	r3, #0
 80064ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f2:	461a      	mov	r2, r3
 80064f4:	2300      	movs	r3, #0
 80064f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fe:	461a      	mov	r2, r3
 8006500:	2300      	movs	r3, #0
 8006502:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006504:	2300      	movs	r3, #0
 8006506:	613b      	str	r3, [r7, #16]
 8006508:	e043      	b.n	8006592 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800651c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006520:	d118      	bne.n	8006554 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10a      	bne.n	800653e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006534:	461a      	mov	r2, r3
 8006536:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	e013      	b.n	8006566 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654a:	461a      	mov	r2, r3
 800654c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e008      	b.n	8006566 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	461a      	mov	r2, r3
 8006562:	2300      	movs	r3, #0
 8006564:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006572:	461a      	mov	r2, r3
 8006574:	2300      	movs	r3, #0
 8006576:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006584:	461a      	mov	r2, r3
 8006586:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800658a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	3301      	adds	r3, #1
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	429a      	cmp	r2, r3
 8006598:	d3b7      	bcc.n	800650a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800659a:	2300      	movs	r3, #0
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	e043      	b.n	8006628 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065b6:	d118      	bne.n	80065ea <USB_DevInit+0x206>
    {
      if (i == 0U)
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10a      	bne.n	80065d4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ca:	461a      	mov	r2, r3
 80065cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	e013      	b.n	80065fc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e0:	461a      	mov	r2, r3
 80065e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	e008      	b.n	80065fc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f6:	461a      	mov	r2, r3
 80065f8:	2300      	movs	r3, #0
 80065fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	461a      	mov	r2, r3
 800660a:	2300      	movs	r3, #0
 800660c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661a:	461a      	mov	r2, r3
 800661c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006620:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	3301      	adds	r3, #1
 8006626:	613b      	str	r3, [r7, #16]
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	429a      	cmp	r2, r3
 800662e:	d3b7      	bcc.n	80065a0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800663e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006642:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006650:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	2b00      	cmp	r3, #0
 8006656:	d105      	bne.n	8006664 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	f043 0210 	orr.w	r2, r3, #16
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699a      	ldr	r2, [r3, #24]
 8006668:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <USB_DevInit+0x2c4>)
 800666a:	4313      	orrs	r3, r2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d005      	beq.n	8006682 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f043 0208 	orr.w	r2, r3, #8
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006684:	2b01      	cmp	r3, #1
 8006686:	d107      	bne.n	8006698 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006690:	f043 0304 	orr.w	r3, r3, #4
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066a4:	b004      	add	sp, #16
 80066a6:	4770      	bx	lr
 80066a8:	803c3800 	.word	0x803c3800

080066ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	019b      	lsls	r3, r3, #6
 80066be:	f043 0220 	orr.w	r2, r3, #32
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3301      	adds	r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	4a08      	ldr	r2, [pc, #32]	; (80066f0 <USB_FlushTxFifo+0x44>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d901      	bls.n	80066d6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e006      	b.n	80066e4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f003 0320 	and.w	r3, r3, #32
 80066de:	2b20      	cmp	r3, #32
 80066e0:	d0f1      	beq.n	80066c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	00030d40 	.word	0x00030d40

080066f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2210      	movs	r2, #16
 8006704:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3301      	adds	r3, #1
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	4a08      	ldr	r2, [pc, #32]	; (8006730 <USB_FlushRxFifo+0x3c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d901      	bls.n	8006716 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e006      	b.n	8006724 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	f003 0310 	and.w	r3, r3, #16
 800671e:	2b10      	cmp	r3, #16
 8006720:	d0f1      	beq.n	8006706 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	00030d40 	.word	0x00030d40

08006734 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	68f9      	ldr	r1, [r7, #12]
 8006750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006754:	4313      	orrs	r3, r2
 8006756:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006766:	b480      	push	{r7}
 8006768:	b085      	sub	sp, #20
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006780:	f023 0303 	bic.w	r3, r3, #3
 8006784:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006794:	f043 0302 	orr.w	r3, r3, #2
 8006798:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	f003 0301 	and.w	r3, r3, #1
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3301      	adds	r3, #1
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	4a13      	ldr	r2, [pc, #76]	; (8006824 <USB_CoreReset+0x60>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d901      	bls.n	80067e0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e01a      	b.n	8006816 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	daf3      	bge.n	80067d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	f043 0201 	orr.w	r2, r3, #1
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	4a09      	ldr	r2, [pc, #36]	; (8006824 <USB_CoreReset+0x60>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d901      	bls.n	8006808 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e006      	b.n	8006816 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b01      	cmp	r3, #1
 8006812:	d0f1      	beq.n	80067f8 <USB_CoreReset+0x34>

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	00030d40 	.word	0x00030d40

08006828 <__errno>:
 8006828:	4b01      	ldr	r3, [pc, #4]	; (8006830 <__errno+0x8>)
 800682a:	6818      	ldr	r0, [r3, #0]
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20000018 	.word	0x20000018

08006834 <__libc_init_array>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	4d0d      	ldr	r5, [pc, #52]	; (800686c <__libc_init_array+0x38>)
 8006838:	4c0d      	ldr	r4, [pc, #52]	; (8006870 <__libc_init_array+0x3c>)
 800683a:	1b64      	subs	r4, r4, r5
 800683c:	10a4      	asrs	r4, r4, #2
 800683e:	2600      	movs	r6, #0
 8006840:	42a6      	cmp	r6, r4
 8006842:	d109      	bne.n	8006858 <__libc_init_array+0x24>
 8006844:	4d0b      	ldr	r5, [pc, #44]	; (8006874 <__libc_init_array+0x40>)
 8006846:	4c0c      	ldr	r4, [pc, #48]	; (8006878 <__libc_init_array+0x44>)
 8006848:	f000 f9f8 	bl	8006c3c <_init>
 800684c:	1b64      	subs	r4, r4, r5
 800684e:	10a4      	asrs	r4, r4, #2
 8006850:	2600      	movs	r6, #0
 8006852:	42a6      	cmp	r6, r4
 8006854:	d105      	bne.n	8006862 <__libc_init_array+0x2e>
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	f855 3b04 	ldr.w	r3, [r5], #4
 800685c:	4798      	blx	r3
 800685e:	3601      	adds	r6, #1
 8006860:	e7ee      	b.n	8006840 <__libc_init_array+0xc>
 8006862:	f855 3b04 	ldr.w	r3, [r5], #4
 8006866:	4798      	blx	r3
 8006868:	3601      	adds	r6, #1
 800686a:	e7f2      	b.n	8006852 <__libc_init_array+0x1e>
 800686c:	08006ca8 	.word	0x08006ca8
 8006870:	08006ca8 	.word	0x08006ca8
 8006874:	08006ca8 	.word	0x08006ca8
 8006878:	08006cac 	.word	0x08006cac

0800687c <memset>:
 800687c:	4402      	add	r2, r0
 800687e:	4603      	mov	r3, r0
 8006880:	4293      	cmp	r3, r2
 8006882:	d100      	bne.n	8006886 <memset+0xa>
 8006884:	4770      	bx	lr
 8006886:	f803 1b01 	strb.w	r1, [r3], #1
 800688a:	e7f9      	b.n	8006880 <memset+0x4>
 800688c:	0000      	movs	r0, r0
	...

08006890 <exp>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	ed2d 8b02 	vpush	{d8}
 8006896:	ec55 4b10 	vmov	r4, r5, d0
 800689a:	f000 f849 	bl	8006930 <__ieee754_exp>
 800689e:	4b22      	ldr	r3, [pc, #136]	; (8006928 <exp+0x98>)
 80068a0:	eeb0 8a40 	vmov.f32	s16, s0
 80068a4:	eef0 8a60 	vmov.f32	s17, s1
 80068a8:	f993 3000 	ldrsb.w	r3, [r3]
 80068ac:	3301      	adds	r3, #1
 80068ae:	d012      	beq.n	80068d6 <exp+0x46>
 80068b0:	ec45 4b10 	vmov	d0, r4, r5
 80068b4:	f000 f9b6 	bl	8006c24 <finite>
 80068b8:	b168      	cbz	r0, 80068d6 <exp+0x46>
 80068ba:	a313      	add	r3, pc, #76	; (adr r3, 8006908 <exp+0x78>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	4620      	mov	r0, r4
 80068c2:	4629      	mov	r1, r5
 80068c4:	f7fa f8cc 	bl	8000a60 <__aeabi_dcmpgt>
 80068c8:	b160      	cbz	r0, 80068e4 <exp+0x54>
 80068ca:	f7ff ffad 	bl	8006828 <__errno>
 80068ce:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8006910 <exp+0x80>
 80068d2:	2322      	movs	r3, #34	; 0x22
 80068d4:	6003      	str	r3, [r0, #0]
 80068d6:	eeb0 0a48 	vmov.f32	s0, s16
 80068da:	eef0 0a68 	vmov.f32	s1, s17
 80068de:	ecbd 8b02 	vpop	{d8}
 80068e2:	bd38      	pop	{r3, r4, r5, pc}
 80068e4:	a30c      	add	r3, pc, #48	; (adr r3, 8006918 <exp+0x88>)
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	4620      	mov	r0, r4
 80068ec:	4629      	mov	r1, r5
 80068ee:	f7fa f899 	bl	8000a24 <__aeabi_dcmplt>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d0ef      	beq.n	80068d6 <exp+0x46>
 80068f6:	f7ff ff97 	bl	8006828 <__errno>
 80068fa:	2322      	movs	r3, #34	; 0x22
 80068fc:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8006920 <exp+0x90>
 8006900:	6003      	str	r3, [r0, #0]
 8006902:	e7e8      	b.n	80068d6 <exp+0x46>
 8006904:	f3af 8000 	nop.w
 8006908:	fefa39ef 	.word	0xfefa39ef
 800690c:	40862e42 	.word	0x40862e42
 8006910:	00000000 	.word	0x00000000
 8006914:	7ff00000 	.word	0x7ff00000
 8006918:	d52d3051 	.word	0xd52d3051
 800691c:	c0874910 	.word	0xc0874910
	...
 8006928:	2000007c 	.word	0x2000007c
 800692c:	00000000 	.word	0x00000000

08006930 <__ieee754_exp>:
 8006930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006934:	ec55 4b10 	vmov	r4, r5, d0
 8006938:	49b1      	ldr	r1, [pc, #708]	; (8006c00 <__ieee754_exp+0x2d0>)
 800693a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800693e:	428b      	cmp	r3, r1
 8006940:	ed2d 8b04 	vpush	{d8-d9}
 8006944:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8006948:	d937      	bls.n	80069ba <__ieee754_exp+0x8a>
 800694a:	49ae      	ldr	r1, [pc, #696]	; (8006c04 <__ieee754_exp+0x2d4>)
 800694c:	428b      	cmp	r3, r1
 800694e:	d916      	bls.n	800697e <__ieee754_exp+0x4e>
 8006950:	ee10 3a10 	vmov	r3, s0
 8006954:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8006958:	4313      	orrs	r3, r2
 800695a:	d009      	beq.n	8006970 <__ieee754_exp+0x40>
 800695c:	ee10 2a10 	vmov	r2, s0
 8006960:	462b      	mov	r3, r5
 8006962:	4620      	mov	r0, r4
 8006964:	4629      	mov	r1, r5
 8006966:	f7f9 fc35 	bl	80001d4 <__adddf3>
 800696a:	4604      	mov	r4, r0
 800696c:	460d      	mov	r5, r1
 800696e:	e000      	b.n	8006972 <__ieee754_exp+0x42>
 8006970:	bb06      	cbnz	r6, 80069b4 <__ieee754_exp+0x84>
 8006972:	ecbd 8b04 	vpop	{d8-d9}
 8006976:	ec45 4b10 	vmov	d0, r4, r5
 800697a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697e:	a38a      	add	r3, pc, #552	; (adr r3, 8006ba8 <__ieee754_exp+0x278>)
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	ee10 0a10 	vmov	r0, s0
 8006988:	4629      	mov	r1, r5
 800698a:	f7fa f869 	bl	8000a60 <__aeabi_dcmpgt>
 800698e:	b138      	cbz	r0, 80069a0 <__ieee754_exp+0x70>
 8006990:	a387      	add	r3, pc, #540	; (adr r3, 8006bb0 <__ieee754_exp+0x280>)
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	4610      	mov	r0, r2
 8006998:	4619      	mov	r1, r3
 800699a:	f7f9 fdd1 	bl	8000540 <__aeabi_dmul>
 800699e:	e7e4      	b.n	800696a <__ieee754_exp+0x3a>
 80069a0:	a385      	add	r3, pc, #532	; (adr r3, 8006bb8 <__ieee754_exp+0x288>)
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	4620      	mov	r0, r4
 80069a8:	4629      	mov	r1, r5
 80069aa:	f7fa f83b 	bl	8000a24 <__aeabi_dcmplt>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	f000 8087 	beq.w	8006ac2 <__ieee754_exp+0x192>
 80069b4:	2400      	movs	r4, #0
 80069b6:	2500      	movs	r5, #0
 80069b8:	e7db      	b.n	8006972 <__ieee754_exp+0x42>
 80069ba:	4a93      	ldr	r2, [pc, #588]	; (8006c08 <__ieee754_exp+0x2d8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	f240 80ac 	bls.w	8006b1a <__ieee754_exp+0x1ea>
 80069c2:	4a92      	ldr	r2, [pc, #584]	; (8006c0c <__ieee754_exp+0x2dc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d87c      	bhi.n	8006ac2 <__ieee754_exp+0x192>
 80069c8:	4b91      	ldr	r3, [pc, #580]	; (8006c10 <__ieee754_exp+0x2e0>)
 80069ca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d2:	ee10 0a10 	vmov	r0, s0
 80069d6:	4629      	mov	r1, r5
 80069d8:	f7f9 fbfa 	bl	80001d0 <__aeabi_dsub>
 80069dc:	4b8d      	ldr	r3, [pc, #564]	; (8006c14 <__ieee754_exp+0x2e4>)
 80069de:	00f7      	lsls	r7, r6, #3
 80069e0:	443b      	add	r3, r7
 80069e2:	ed93 7b00 	vldr	d7, [r3]
 80069e6:	f1c6 0a01 	rsb	sl, r6, #1
 80069ea:	4680      	mov	r8, r0
 80069ec:	4689      	mov	r9, r1
 80069ee:	ebaa 0a06 	sub.w	sl, sl, r6
 80069f2:	eeb0 8a47 	vmov.f32	s16, s14
 80069f6:	eef0 8a67 	vmov.f32	s17, s15
 80069fa:	ec53 2b18 	vmov	r2, r3, d8
 80069fe:	4640      	mov	r0, r8
 8006a00:	4649      	mov	r1, r9
 8006a02:	f7f9 fbe5 	bl	80001d0 <__aeabi_dsub>
 8006a06:	4604      	mov	r4, r0
 8006a08:	460d      	mov	r5, r1
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	4620      	mov	r0, r4
 8006a10:	4629      	mov	r1, r5
 8006a12:	f7f9 fd95 	bl	8000540 <__aeabi_dmul>
 8006a16:	a36a      	add	r3, pc, #424	; (adr r3, 8006bc0 <__ieee754_exp+0x290>)
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	460f      	mov	r7, r1
 8006a20:	f7f9 fd8e 	bl	8000540 <__aeabi_dmul>
 8006a24:	a368      	add	r3, pc, #416	; (adr r3, 8006bc8 <__ieee754_exp+0x298>)
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	f7f9 fbd1 	bl	80001d0 <__aeabi_dsub>
 8006a2e:	4632      	mov	r2, r6
 8006a30:	463b      	mov	r3, r7
 8006a32:	f7f9 fd85 	bl	8000540 <__aeabi_dmul>
 8006a36:	a366      	add	r3, pc, #408	; (adr r3, 8006bd0 <__ieee754_exp+0x2a0>)
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	f7f9 fbca 	bl	80001d4 <__adddf3>
 8006a40:	4632      	mov	r2, r6
 8006a42:	463b      	mov	r3, r7
 8006a44:	f7f9 fd7c 	bl	8000540 <__aeabi_dmul>
 8006a48:	a363      	add	r3, pc, #396	; (adr r3, 8006bd8 <__ieee754_exp+0x2a8>)
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	f7f9 fbbf 	bl	80001d0 <__aeabi_dsub>
 8006a52:	4632      	mov	r2, r6
 8006a54:	463b      	mov	r3, r7
 8006a56:	f7f9 fd73 	bl	8000540 <__aeabi_dmul>
 8006a5a:	a361      	add	r3, pc, #388	; (adr r3, 8006be0 <__ieee754_exp+0x2b0>)
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	f7f9 fbb8 	bl	80001d4 <__adddf3>
 8006a64:	4632      	mov	r2, r6
 8006a66:	463b      	mov	r3, r7
 8006a68:	f7f9 fd6a 	bl	8000540 <__aeabi_dmul>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4620      	mov	r0, r4
 8006a72:	4629      	mov	r1, r5
 8006a74:	f7f9 fbac 	bl	80001d0 <__aeabi_dsub>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	460f      	mov	r7, r1
 8006a80:	4620      	mov	r0, r4
 8006a82:	4629      	mov	r1, r5
 8006a84:	f7f9 fd5c 	bl	8000540 <__aeabi_dmul>
 8006a88:	ec41 0b19 	vmov	d9, r0, r1
 8006a8c:	f1ba 0f00 	cmp.w	sl, #0
 8006a90:	d15d      	bne.n	8006b4e <__ieee754_exp+0x21e>
 8006a92:	2200      	movs	r2, #0
 8006a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a98:	4630      	mov	r0, r6
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	f7f9 fb98 	bl	80001d0 <__aeabi_dsub>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	ec51 0b19 	vmov	r0, r1, d9
 8006aa8:	f7f9 fe74 	bl	8000794 <__aeabi_ddiv>
 8006aac:	4622      	mov	r2, r4
 8006aae:	462b      	mov	r3, r5
 8006ab0:	f7f9 fb8e 	bl	80001d0 <__aeabi_dsub>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	2000      	movs	r0, #0
 8006aba:	4957      	ldr	r1, [pc, #348]	; (8006c18 <__ieee754_exp+0x2e8>)
 8006abc:	f7f9 fb88 	bl	80001d0 <__aeabi_dsub>
 8006ac0:	e753      	b.n	800696a <__ieee754_exp+0x3a>
 8006ac2:	4856      	ldr	r0, [pc, #344]	; (8006c1c <__ieee754_exp+0x2ec>)
 8006ac4:	a348      	add	r3, pc, #288	; (adr r3, 8006be8 <__ieee754_exp+0x2b8>)
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8006ace:	4629      	mov	r1, r5
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f7f9 fd35 	bl	8000540 <__aeabi_dmul>
 8006ad6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ada:	f7f9 fb7b 	bl	80001d4 <__adddf3>
 8006ade:	f7f9 ffc9 	bl	8000a74 <__aeabi_d2iz>
 8006ae2:	4682      	mov	sl, r0
 8006ae4:	f7f9 fcc2 	bl	800046c <__aeabi_i2d>
 8006ae8:	a341      	add	r3, pc, #260	; (adr r3, 8006bf0 <__ieee754_exp+0x2c0>)
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	4606      	mov	r6, r0
 8006af0:	460f      	mov	r7, r1
 8006af2:	f7f9 fd25 	bl	8000540 <__aeabi_dmul>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4620      	mov	r0, r4
 8006afc:	4629      	mov	r1, r5
 8006afe:	f7f9 fb67 	bl	80001d0 <__aeabi_dsub>
 8006b02:	a33d      	add	r3, pc, #244	; (adr r3, 8006bf8 <__ieee754_exp+0x2c8>)
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	4680      	mov	r8, r0
 8006b0a:	4689      	mov	r9, r1
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	4639      	mov	r1, r7
 8006b10:	f7f9 fd16 	bl	8000540 <__aeabi_dmul>
 8006b14:	ec41 0b18 	vmov	d8, r0, r1
 8006b18:	e76f      	b.n	80069fa <__ieee754_exp+0xca>
 8006b1a:	4a41      	ldr	r2, [pc, #260]	; (8006c20 <__ieee754_exp+0x2f0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d811      	bhi.n	8006b44 <__ieee754_exp+0x214>
 8006b20:	a323      	add	r3, pc, #140	; (adr r3, 8006bb0 <__ieee754_exp+0x280>)
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	ee10 0a10 	vmov	r0, s0
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f7f9 fb52 	bl	80001d4 <__adddf3>
 8006b30:	4b39      	ldr	r3, [pc, #228]	; (8006c18 <__ieee754_exp+0x2e8>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	f7f9 ff94 	bl	8000a60 <__aeabi_dcmpgt>
 8006b38:	b138      	cbz	r0, 8006b4a <__ieee754_exp+0x21a>
 8006b3a:	4b37      	ldr	r3, [pc, #220]	; (8006c18 <__ieee754_exp+0x2e8>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	4620      	mov	r0, r4
 8006b40:	4629      	mov	r1, r5
 8006b42:	e710      	b.n	8006966 <__ieee754_exp+0x36>
 8006b44:	f04f 0a00 	mov.w	sl, #0
 8006b48:	e75f      	b.n	8006a0a <__ieee754_exp+0xda>
 8006b4a:	4682      	mov	sl, r0
 8006b4c:	e75d      	b.n	8006a0a <__ieee754_exp+0xda>
 8006b4e:	4632      	mov	r2, r6
 8006b50:	463b      	mov	r3, r7
 8006b52:	2000      	movs	r0, #0
 8006b54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006b58:	f7f9 fb3a 	bl	80001d0 <__aeabi_dsub>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	ec51 0b19 	vmov	r0, r1, d9
 8006b64:	f7f9 fe16 	bl	8000794 <__aeabi_ddiv>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	ec51 0b18 	vmov	r0, r1, d8
 8006b70:	f7f9 fb2e 	bl	80001d0 <__aeabi_dsub>
 8006b74:	4642      	mov	r2, r8
 8006b76:	464b      	mov	r3, r9
 8006b78:	f7f9 fb2a 	bl	80001d0 <__aeabi_dsub>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	2000      	movs	r0, #0
 8006b82:	4925      	ldr	r1, [pc, #148]	; (8006c18 <__ieee754_exp+0x2e8>)
 8006b84:	f7f9 fb24 	bl	80001d0 <__aeabi_dsub>
 8006b88:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8006b8c:	4592      	cmp	sl, r2
 8006b8e:	db02      	blt.n	8006b96 <__ieee754_exp+0x266>
 8006b90:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8006b94:	e6e9      	b.n	800696a <__ieee754_exp+0x3a>
 8006b96:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8006b9a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8006ba4:	e6f9      	b.n	800699a <__ieee754_exp+0x6a>
 8006ba6:	bf00      	nop
 8006ba8:	fefa39ef 	.word	0xfefa39ef
 8006bac:	40862e42 	.word	0x40862e42
 8006bb0:	8800759c 	.word	0x8800759c
 8006bb4:	7e37e43c 	.word	0x7e37e43c
 8006bb8:	d52d3051 	.word	0xd52d3051
 8006bbc:	c0874910 	.word	0xc0874910
 8006bc0:	72bea4d0 	.word	0x72bea4d0
 8006bc4:	3e663769 	.word	0x3e663769
 8006bc8:	c5d26bf1 	.word	0xc5d26bf1
 8006bcc:	3ebbbd41 	.word	0x3ebbbd41
 8006bd0:	af25de2c 	.word	0xaf25de2c
 8006bd4:	3f11566a 	.word	0x3f11566a
 8006bd8:	16bebd93 	.word	0x16bebd93
 8006bdc:	3f66c16c 	.word	0x3f66c16c
 8006be0:	5555553e 	.word	0x5555553e
 8006be4:	3fc55555 	.word	0x3fc55555
 8006be8:	652b82fe 	.word	0x652b82fe
 8006bec:	3ff71547 	.word	0x3ff71547
 8006bf0:	fee00000 	.word	0xfee00000
 8006bf4:	3fe62e42 	.word	0x3fe62e42
 8006bf8:	35793c76 	.word	0x35793c76
 8006bfc:	3dea39ef 	.word	0x3dea39ef
 8006c00:	40862e41 	.word	0x40862e41
 8006c04:	7fefffff 	.word	0x7fefffff
 8006c08:	3fd62e42 	.word	0x3fd62e42
 8006c0c:	3ff0a2b1 	.word	0x3ff0a2b1
 8006c10:	08006c80 	.word	0x08006c80
 8006c14:	08006c90 	.word	0x08006c90
 8006c18:	3ff00000 	.word	0x3ff00000
 8006c1c:	08006c70 	.word	0x08006c70
 8006c20:	3e2fffff 	.word	0x3e2fffff

08006c24 <finite>:
 8006c24:	b082      	sub	sp, #8
 8006c26:	ed8d 0b00 	vstr	d0, [sp]
 8006c2a:	9801      	ldr	r0, [sp, #4]
 8006c2c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006c30:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006c34:	0fc0      	lsrs	r0, r0, #31
 8006c36:	b002      	add	sp, #8
 8006c38:	4770      	bx	lr
	...

08006c3c <_init>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	bf00      	nop
 8006c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c42:	bc08      	pop	{r3}
 8006c44:	469e      	mov	lr, r3
 8006c46:	4770      	bx	lr

08006c48 <_fini>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	bf00      	nop
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr
