
STM32F405R_Cooling_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c5c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006de8  08006de8  00016de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e30  08006e30  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006e30  08006e30  00016e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e38  08006e38  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e3c  08006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  20000080  08006ec0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  08006ec0  000207d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fbb  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bd1  00000000  00000000  0003606b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00039c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0003afb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c99  00000000  00000000  0003c160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197f0  00000000  00000000  0005fdf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1e4f  00000000  00000000  000795e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b438  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005390  00000000  00000000  0014b488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006dcc 	.word	0x08006dcc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08006dcc 	.word	0x08006dcc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b974 	b.w	8000e64 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	468e      	mov	lr, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14d      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4694      	mov	ip, r2
 8000ba6:	d969      	bls.n	8000c7c <__udivmoddi4+0xe8>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b152      	cbz	r2, 8000bc4 <__udivmoddi4+0x30>
 8000bae:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb2:	f1c2 0120 	rsb	r1, r2, #32
 8000bb6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000bc2:	4094      	lsls	r4, r2
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	0c21      	lsrs	r1, r4, #16
 8000bca:	fbbe f6f8 	udiv	r6, lr, r8
 8000bce:	fa1f f78c 	uxth.w	r7, ip
 8000bd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000bd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bda:	fb06 f107 	mul.w	r1, r6, r7
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bea:	f080 811f 	bcs.w	8000e2c <__udivmoddi4+0x298>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 811c 	bls.w	8000e2c <__udivmoddi4+0x298>
 8000bf4:	3e02      	subs	r6, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a5b      	subs	r3, r3, r1
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c00:	fb08 3310 	mls	r3, r8, r0, r3
 8000c04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c08:	fb00 f707 	mul.w	r7, r0, r7
 8000c0c:	42a7      	cmp	r7, r4
 8000c0e:	d90a      	bls.n	8000c26 <__udivmoddi4+0x92>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c18:	f080 810a 	bcs.w	8000e30 <__udivmoddi4+0x29c>
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	f240 8107 	bls.w	8000e30 <__udivmoddi4+0x29c>
 8000c22:	4464      	add	r4, ip
 8000c24:	3802      	subs	r0, #2
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	1be4      	subs	r4, r4, r7
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	b11d      	cbz	r5, 8000c38 <__udivmoddi4+0xa4>
 8000c30:	40d4      	lsrs	r4, r2
 8000c32:	2300      	movs	r3, #0
 8000c34:	e9c5 4300 	strd	r4, r3, [r5]
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0xc2>
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	f000 80ef 	beq.w	8000e26 <__udivmoddi4+0x292>
 8000c48:	2600      	movs	r6, #0
 8000c4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4e:	4630      	mov	r0, r6
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f683 	clz	r6, r3
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d14a      	bne.n	8000cf4 <__udivmoddi4+0x160>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd4>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80f9 	bhi.w	8000e5a <__udivmoddi4+0x2c6>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	469e      	mov	lr, r3
 8000c72:	2d00      	cmp	r5, #0
 8000c74:	d0e0      	beq.n	8000c38 <__udivmoddi4+0xa4>
 8000c76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c7a:	e7dd      	b.n	8000c38 <__udivmoddi4+0xa4>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xec>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 8092 	bne.w	8000dae <__udivmoddi4+0x21a>
 8000c8a:	eba1 010c 	sub.w	r1, r1, ip
 8000c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	2601      	movs	r6, #1
 8000c98:	0c20      	lsrs	r0, r4, #16
 8000c9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ca2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca6:	fb0e f003 	mul.w	r0, lr, r3
 8000caa:	4288      	cmp	r0, r1
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x12c>
 8000cae:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x12a>
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2c0>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	1a09      	subs	r1, r1, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ccc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x156>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x154>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80bb 	bhi.w	8000e5e <__udivmoddi4+0x2ca>
 8000ce8:	4608      	mov	r0, r1
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cf2:	e79c      	b.n	8000c2e <__udivmoddi4+0x9a>
 8000cf4:	f1c6 0720 	rsb	r7, r6, #32
 8000cf8:	40b3      	lsls	r3, r6
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa20 f407 	lsr.w	r4, r0, r7
 8000d06:	fa01 f306 	lsl.w	r3, r1, r6
 8000d0a:	431c      	orrs	r4, r3
 8000d0c:	40f9      	lsrs	r1, r7
 8000d0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d12:	fa00 f306 	lsl.w	r3, r0, r6
 8000d16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d1a:	0c20      	lsrs	r0, r4, #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fb09 1118 	mls	r1, r9, r8, r1
 8000d24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d28:	fb08 f00e 	mul.w	r0, r8, lr
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b8>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2bc>
 8000d40:	4288      	cmp	r0, r1
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2bc>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4461      	add	r1, ip
 8000d4c:	1a09      	subs	r1, r1, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d54:	fb09 1110 	mls	r1, r9, r0, r1
 8000d58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d60:	458e      	cmp	lr, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1e2>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2b4>
 8000d6e:	458e      	cmp	lr, r1
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2b4>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d7e:	eba1 010e 	sub.w	r1, r1, lr
 8000d82:	42a1      	cmp	r1, r4
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46a6      	mov	lr, r4
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x2a4>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x2a0>
 8000d8c:	b15d      	cbz	r5, 8000da6 <__udivmoddi4+0x212>
 8000d8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d92:	eb61 010e 	sbc.w	r1, r1, lr
 8000d96:	fa01 f707 	lsl.w	r7, r1, r7
 8000d9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d9e:	40f1      	lsrs	r1, r6
 8000da0:	431f      	orrs	r7, r3
 8000da2:	e9c5 7100 	strd	r7, r1, [r5]
 8000da6:	2600      	movs	r6, #0
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	40d8      	lsrs	r0, r3
 8000db4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbc:	4091      	lsls	r1, r2
 8000dbe:	4301      	orrs	r1, r0
 8000dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000dd0:	0c0b      	lsrs	r3, r1, #16
 8000dd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dda:	429e      	cmp	r6, r3
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x260>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b8>
 8000dec:	429e      	cmp	r6, r3
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b8>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	1b9b      	subs	r3, r3, r6
 8000df6:	b289      	uxth	r1, r1
 8000df8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dfc:	fb07 3316 	mls	r3, r7, r6, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb06 f30e 	mul.w	r3, r6, lr
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x28a>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000e1a:	3e02      	subs	r6, #2
 8000e1c:	4461      	add	r1, ip
 8000e1e:	1ac9      	subs	r1, r1, r3
 8000e20:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0x104>
 8000e26:	462e      	mov	r6, r5
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e705      	b.n	8000c38 <__udivmoddi4+0xa4>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	e6e3      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e30:	4618      	mov	r0, r3
 8000e32:	e6f8      	b.n	8000c26 <__udivmoddi4+0x92>
 8000e34:	454b      	cmp	r3, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f8>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e40:	3801      	subs	r0, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f8>
 8000e44:	4646      	mov	r6, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x28a>
 8000e48:	4620      	mov	r0, r4
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1e2>
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b8>
 8000e54:	3b02      	subs	r3, #2
 8000e56:	4461      	add	r1, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x12c>
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	e709      	b.n	8000c72 <__udivmoddi4+0xde>
 8000e5e:	4464      	add	r4, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e742      	b.n	8000cea <__udivmoddi4+0x156>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <GAS_CCTL_outputInit>:
static void GAS_CCTL_onAll(void);
static void GAS_CCTL_offAll(void);
void GAS_CCTL_Control(void);

void GAS_CCTL_outputInit(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	480a      	ldr	r0, [pc, #40]	; (8000e98 <GAS_CCTL_outputInit+0x30>)
 8000e70:	f004 fc74 	bl	800575c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e74:	2100      	movs	r1, #0
 8000e76:	4809      	ldr	r0, [pc, #36]	; (8000e9c <GAS_CCTL_outputInit+0x34>)
 8000e78:	f004 fc70 	bl	800575c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000e7c:	2104      	movs	r1, #4
 8000e7e:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <GAS_CCTL_outputInit+0x38>)
 8000e80:	f004 fc6c 	bl	800575c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000e84:	2108      	movs	r1, #8
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <GAS_CCTL_outputInit+0x34>)
 8000e88:	f004 fc68 	bl	800575c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000e8c:	210c      	movs	r1, #12
 8000e8e:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <GAS_CCTL_outputInit+0x38>)
 8000e90:	f004 fc64 	bl	800575c <HAL_TIM_PWM_Start>

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200002a8 	.word	0x200002a8
 8000e9c:	200002f0 	.word	0x200002f0
 8000ea0:	20000380 	.word	0x20000380

08000ea4 <GAS_CCTL_onAll>:

static void GAS_CCTL_onAll(void){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Radiator0_INH_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2140      	movs	r1, #64	; 0x40
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <GAS_CCTL_onAll+0x1c>)
 8000eae:	f003 fd53 	bl	8004958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Radiator1_INH_Pin, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <GAS_CCTL_onAll+0x1c>)
 8000eb8:	f003 fd4e 	bl	8004958 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOB,WaterPump0_INH_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOB,Waterpump1_INH_Pin, GPIO_PIN_SET);
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40020400 	.word	0x40020400

08000ec4 <GAS_CCTL_Control>:
//	HAL_GPIO_WritePin(GPIOB,WaterPump0_INH_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOB,Waterpump1_INH_Pin, GPIO_PIN_SET);
}


void GAS_CCTL_Control(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	; 0x38
 8000ec8:	af00      	add	r7, sp, #0
	GAS_CCTL_onAll();
 8000eca:	f7ff ffeb 	bl	8000ea4 <GAS_CCTL_onAll>
	if (StartCount < 100){
 8000ece:	4b90      	ldr	r3, [pc, #576]	; (8001110 <GAS_CCTL_Control+0x24c>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	2b63      	cmp	r3, #99	; 0x63
 8000ed4:	d806      	bhi.n	8000ee4 <GAS_CCTL_Control+0x20>

		StartCount+=1;
 8000ed6:	4b8e      	ldr	r3, [pc, #568]	; (8001110 <GAS_CCTL_Control+0x24c>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	4b8c      	ldr	r3, [pc, #560]	; (8001110 <GAS_CCTL_Control+0x24c>)
 8000ee0:	801a      	strh	r2, [r3, #0]
			stm32_tx1.B.Radiator0_T = CoolingADC.Radiator0_T;
			stm32_tx1.B.Radiator1_T = CoolingADC.Radiator1_T;
			stm32_tx1.B.manualMode_isON = TC_switch.B.manualMode_ON;

	}
}
 8000ee2:	e110      	b.n	8001106 <GAS_CCTL_Control+0x242>
		float a0 = 0.37;
 8000ee4:	4b8b      	ldr	r3, [pc, #556]	; (8001114 <GAS_CCTL_Control+0x250>)
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
			float b0 = -30.5;
 8000ee8:	4b8b      	ldr	r3, [pc, #556]	; (8001118 <GAS_CCTL_Control+0x254>)
 8000eea:	633b      	str	r3, [r7, #48]	; 0x30
			float a1 = 0.925;
 8000eec:	4b8b      	ldr	r3, [pc, #556]	; (800111c <GAS_CCTL_Control+0x258>)
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
			float b1 = -113.75;
 8000ef0:	4b8b      	ldr	r3, [pc, #556]	; (8001120 <GAS_CCTL_Control+0x25c>)
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
			float a2 = (float)(49/74);
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
			float b2 = (float)(2475/74);
 8000efa:	4b8a      	ldr	r3, [pc, #552]	; (8001124 <GAS_CCTL_Control+0x260>)
 8000efc:	623b      	str	r3, [r7, #32]
			volatile int8_t duty0 = (int)(CoolingADC.Radiator0_T*a0 + b0) ;			//Radiator0,1_T => celcius degree of coolant producted by 10.
 8000efe:	4b8a      	ldr	r3, [pc, #552]	; (8001128 <GAS_CCTL_Control+0x264>)
 8000f00:	895b      	ldrh	r3, [r3, #10]
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f0a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f1e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f22:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000f26:	72fb      	strb	r3, [r7, #11]
			volatile int8_t duty1 = (int)(CoolingADC.Radiator1_T*a1 + b1);
 8000f28:	4b7f      	ldr	r3, [pc, #508]	; (8001128 <GAS_CCTL_Control+0x264>)
 8000f2a:	899b      	ldrh	r3, [r3, #12]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f34:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f48:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f4c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000f50:	72bb      	strb	r3, [r7, #10]
			if (duty1>99)duty1 = 99;
 8000f52:	7abb      	ldrb	r3, [r7, #10]
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	2b63      	cmp	r3, #99	; 0x63
 8000f58:	dd01      	ble.n	8000f5e <GAS_CCTL_Control+0x9a>
 8000f5a:	2363      	movs	r3, #99	; 0x63
 8000f5c:	72bb      	strb	r3, [r7, #10]
			if (duty1<30)duty1 = 30;
 8000f5e:	7abb      	ldrb	r3, [r7, #10]
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	2b1d      	cmp	r3, #29
 8000f64:	dc01      	bgt.n	8000f6a <GAS_CCTL_Control+0xa6>
 8000f66:	231e      	movs	r3, #30
 8000f68:	72bb      	strb	r3, [r7, #10]
			if (duty0>99)duty0 = 99;
 8000f6a:	7afb      	ldrb	r3, [r7, #11]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	2b63      	cmp	r3, #99	; 0x63
 8000f70:	dd01      	ble.n	8000f76 <GAS_CCTL_Control+0xb2>
 8000f72:	2363      	movs	r3, #99	; 0x63
 8000f74:	72fb      	strb	r3, [r7, #11]
			if (duty0<30)duty0=30;
 8000f76:	7afb      	ldrb	r3, [r7, #11]
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	2b1d      	cmp	r3, #29
 8000f7c:	dc01      	bgt.n	8000f82 <GAS_CCTL_Control+0xbe>
 8000f7e:	231e      	movs	r3, #30
 8000f80:	72fb      	strb	r3, [r7, #11]
			if (duty1>49){
 8000f82:	7abb      	ldrb	r3, [r7, #10]
 8000f84:	b25b      	sxtb	r3, r3
 8000f86:	2b31      	cmp	r3, #49	; 0x31
 8000f88:	dd06      	ble.n	8000f98 <GAS_CCTL_Control+0xd4>
				HAL_GPIO_WritePin(GPIOB,ExternalFan_INH_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f90:	4866      	ldr	r0, [pc, #408]	; (800112c <GAS_CCTL_Control+0x268>)
 8000f92:	f003 fce1 	bl	8004958 <HAL_GPIO_WritePin>
 8000f96:	e005      	b.n	8000fa4 <GAS_CCTL_Control+0xe0>
				HAL_GPIO_WritePin(GPIOB,ExternalFan_INH_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9e:	4863      	ldr	r0, [pc, #396]	; (800112c <GAS_CCTL_Control+0x268>)
 8000fa0:	f003 fcda 	bl	8004958 <HAL_GPIO_WritePin>
			if (TC_switch.B.manualMode_ON!=1){
 8000fa4:	4b62      	ldr	r3, [pc, #392]	; (8001130 <GAS_CCTL_Control+0x26c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d113      	bne.n	8000fda <GAS_CCTL_Control+0x116>
				TIM1 -> CCR1 = duty1;  //External FAN
 8000fb2:	7abb      	ldrb	r3, [r7, #10]
 8000fb4:	b25a      	sxtb	r2, r3
 8000fb6:	4b5f      	ldr	r3, [pc, #380]	; (8001134 <GAS_CCTL_Control+0x270>)
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3 -> CCR1 = duty1;  //Radiator fan 1  (right)
 8000fba:	7abb      	ldrb	r3, [r7, #10]
 8000fbc:	b25a      	sxtb	r2, r3
 8000fbe:	4b5e      	ldr	r3, [pc, #376]	; (8001138 <GAS_CCTL_Control+0x274>)
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34
				TIM8 -> CCR2 = duty1;	 //Water pump 1     (right)
 8000fc2:	7abb      	ldrb	r3, [r7, #10]
 8000fc4:	b25a      	sxtb	r2, r3
 8000fc6:	4b5d      	ldr	r3, [pc, #372]	; (800113c <GAS_CCTL_Control+0x278>)
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38
				TIM3 -> CCR3 = duty0;  //Radiator 0	   (left)
 8000fca:	7afb      	ldrb	r3, [r7, #11]
 8000fcc:	b25a      	sxtb	r2, r3
 8000fce:	4b5a      	ldr	r3, [pc, #360]	; (8001138 <GAS_CCTL_Control+0x274>)
 8000fd0:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM8 -> CCR4 = duty0;	 //Water pump 0      (left)
 8000fd2:	7afb      	ldrb	r3, [r7, #11]
 8000fd4:	b25a      	sxtb	r2, r3
 8000fd6:	4b59      	ldr	r3, [pc, #356]	; (800113c <GAS_CCTL_Control+0x278>)
 8000fd8:	641a      	str	r2, [r3, #64]	; 0x40
			if(TC_switch.B.manualMode_ON){
 8000fda:	4b55      	ldr	r3, [pc, #340]	; (8001130 <GAS_CCTL_Control+0x26c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d016      	beq.n	8001016 <GAS_CCTL_Control+0x152>
				uint8_t defaultDuty = TC_order.B.defaultDutyOrder;
 8000fe8:	4b55      	ldr	r3, [pc, #340]	; (8001140 <GAS_CCTL_Control+0x27c>)
 8000fea:	795b      	ldrb	r3, [r3, #5]
 8000fec:	77fb      	strb	r3, [r7, #31]
				TIM1 -> CCR1 = TC_order.B.ExternalFan_DutyOrder ;// + CoolingADC.External_IS * Pe;
 8000fee:	4b54      	ldr	r3, [pc, #336]	; (8001140 <GAS_CCTL_Control+0x27c>)
 8000ff0:	791a      	ldrb	r2, [r3, #4]
 8000ff2:	4b50      	ldr	r3, [pc, #320]	; (8001134 <GAS_CCTL_Control+0x270>)
 8000ff4:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3 -> CCR1 = TC_order.B.Radiator0_DutyOrder ;// + CoolingADC.Radiator_T * Pr;
 8000ff6:	4b52      	ldr	r3, [pc, #328]	; (8001140 <GAS_CCTL_Control+0x27c>)
 8000ff8:	789a      	ldrb	r2, [r3, #2]
 8000ffa:	4b4f      	ldr	r3, [pc, #316]	; (8001138 <GAS_CCTL_Control+0x274>)
 8000ffc:	635a      	str	r2, [r3, #52]	; 0x34
				TIM8 -> CCR2 = TC_order.B.WaterPump0_DutyOrder;// + CoolingADC.WaterPump_P * Pw;
 8000ffe:	4b50      	ldr	r3, [pc, #320]	; (8001140 <GAS_CCTL_Control+0x27c>)
 8001000:	781a      	ldrb	r2, [r3, #0]
 8001002:	4b4e      	ldr	r3, [pc, #312]	; (800113c <GAS_CCTL_Control+0x278>)
 8001004:	639a      	str	r2, [r3, #56]	; 0x38
				TIM3 -> CCR3 = TC_order.B.Radiator1_DutyOrder ;// + CoolingADC.Radiator_T * Pr;
 8001006:	4b4e      	ldr	r3, [pc, #312]	; (8001140 <GAS_CCTL_Control+0x27c>)
 8001008:	78da      	ldrb	r2, [r3, #3]
 800100a:	4b4b      	ldr	r3, [pc, #300]	; (8001138 <GAS_CCTL_Control+0x274>)
 800100c:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM8 -> CCR4 = TC_order.B.WaterPump1_DutyOrder ;// + CoolingADC.WaterPump_P * Pw;
 800100e:	4b4c      	ldr	r3, [pc, #304]	; (8001140 <GAS_CCTL_Control+0x27c>)
 8001010:	785a      	ldrb	r2, [r3, #1]
 8001012:	4b4a      	ldr	r3, [pc, #296]	; (800113c <GAS_CCTL_Control+0x278>)
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
			float Ke = 0.5;
 8001016:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800101a:	61bb      	str	r3, [r7, #24]
			float Kr = 0.5;
 800101c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001020:	617b      	str	r3, [r7, #20]
			float Kw = 0.5;
 8001022:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001026:	613b      	str	r3, [r7, #16]
			float Kp = 0.5;
 8001028:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800102c:	60fb      	str	r3, [r7, #12]
			stm32_tx1.B.External_IS = (uint8_t)(CoolingADC.External_IS * Ke);
 800102e:	4b3e      	ldr	r3, [pc, #248]	; (8001128 <GAS_CCTL_Control+0x264>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800103a:	edd7 7a06 	vldr	s15, [r7, #24]
 800103e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001046:	edc7 7a01 	vstr	s15, [r7, #4]
 800104a:	793b      	ldrb	r3, [r7, #4]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <GAS_CCTL_Control+0x280>)
 8001050:	701a      	strb	r2, [r3, #0]
			stm32_tx1.B.Radiator0_IS = (uint8_t)(CoolingADC.Radiator0_IS * Kr);
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <GAS_CCTL_Control+0x264>)
 8001054:	88db      	ldrh	r3, [r3, #6]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800106a:	edc7 7a01 	vstr	s15, [r7, #4]
 800106e:	793b      	ldrb	r3, [r7, #4]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b34      	ldr	r3, [pc, #208]	; (8001144 <GAS_CCTL_Control+0x280>)
 8001074:	70da      	strb	r2, [r3, #3]
			stm32_tx1.B.Radiator1_IS = (uint8_t)(CoolingADC.Radiator1_IS* Kr);
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <GAS_CCTL_Control+0x264>)
 8001078:	891b      	ldrh	r3, [r3, #8]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001082:	edd7 7a05 	vldr	s15, [r7, #20]
 8001086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800108e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001092:	793b      	ldrb	r3, [r7, #4]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <GAS_CCTL_Control+0x280>)
 8001098:	711a      	strb	r2, [r3, #4]
			stm32_tx1.B.WaterPump0_IS = (uint8_t)(CoolingADC.WaterPump0_IS*Kw);
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <GAS_CCTL_Control+0x264>)
 800109c:	885b      	ldrh	r3, [r3, #2]
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80010aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80010b6:	793b      	ldrb	r3, [r7, #4]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <GAS_CCTL_Control+0x280>)
 80010bc:	705a      	strb	r2, [r3, #1]
			stm32_tx1.B.WaterPump1_IS = (uint8_t)(CoolingADC.WaterPump1_IS*Kw);
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <GAS_CCTL_Control+0x264>)
 80010c0:	889b      	ldrh	r3, [r3, #4]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80010da:	793b      	ldrb	r3, [r7, #4]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <GAS_CCTL_Control+0x280>)
 80010e0:	709a      	strb	r2, [r3, #2]
			stm32_tx1.B.Radiator0_T = CoolingADC.Radiator0_T;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <GAS_CCTL_Control+0x264>)
 80010e4:	895b      	ldrh	r3, [r3, #10]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <GAS_CCTL_Control+0x280>)
 80010ea:	719a      	strb	r2, [r3, #6]
			stm32_tx1.B.Radiator1_T = CoolingADC.Radiator1_T;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <GAS_CCTL_Control+0x264>)
 80010ee:	899b      	ldrh	r3, [r3, #12]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <GAS_CCTL_Control+0x280>)
 80010f4:	71da      	strb	r2, [r3, #7]
			stm32_tx1.B.manualMode_isON = TC_switch.B.manualMode_ON;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <GAS_CCTL_Control+0x26c>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <GAS_CCTL_Control+0x280>)
 8001104:	715a      	strb	r2, [r3, #5]
}
 8001106:	bf00      	nop
 8001108:	3738      	adds	r7, #56	; 0x38
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000009c 	.word	0x2000009c
 8001114:	3ebd70a4 	.word	0x3ebd70a4
 8001118:	c1f40000 	.word	0xc1f40000
 800111c:	3f6ccccd 	.word	0x3f6ccccd
 8001120:	c2e38000 	.word	0xc2e38000
 8001124:	42040000 	.word	0x42040000
 8001128:	20000164 	.word	0x20000164
 800112c:	40020400 	.word	0x40020400
 8001130:	20000128 	.word	0x20000128
 8001134:	40010000 	.word	0x40010000
 8001138:	40000400 	.word	0x40000400
 800113c:	40010400 	.word	0x40010400
 8001140:	20000130 	.word	0x20000130
 8001144:	20000118 	.word	0x20000118

08001148 <GAS_Can_txSetting>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef* hcan);
//void GAS_Can_recieveMessage(CAN_HandleTypeDef *hcan);

void GAS_Can_txSetting(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	/*
	 * CAN tx set function
	 * set ID, IDE, DLC
	 */
	canTxHeader.ExtId = STM32_tx1_ID;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <GAS_Can_txSetting+0x44>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <GAS_Can_txSetting+0x48>)
 8001152:	6053      	str	r3, [r2, #4]
	canTxHeader.IDE	= CAN_ID_EXT;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <GAS_Can_txSetting+0x48>)
 8001156:	2204      	movs	r2, #4
 8001158:	609a      	str	r2, [r3, #8]
	canTxHeader.RTR	= CAN_RTR_DATA;
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <GAS_Can_txSetting+0x48>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
	canTxHeader.DLC	=	8;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <GAS_Can_txSetting+0x48>)
 8001162:	2208      	movs	r2, #8
 8001164:	611a      	str	r2, [r3, #16]

	canTxHeader2.ExtId = STM32_tx2_ID;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <GAS_Can_txSetting+0x4c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <GAS_Can_txSetting+0x50>)
 800116c:	6053      	str	r3, [r2, #4]
	canTxHeader2.IDE	= CAN_ID_EXT;
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <GAS_Can_txSetting+0x50>)
 8001170:	2204      	movs	r2, #4
 8001172:	609a      	str	r2, [r3, #8]
	canTxHeader2.RTR	= CAN_RTR_DATA;
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <GAS_Can_txSetting+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
	canTxHeader2.DLC	=	8;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <GAS_Can_txSetting+0x50>)
 800117c:	2208      	movs	r2, #8
 800117e:	611a      	str	r2, [r3, #16]


}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000000 	.word	0x20000000
 8001190:	200000e4 	.word	0x200000e4
 8001194:	20000004 	.word	0x20000004
 8001198:	200000fc 	.word	0x200000fc

0800119c <GAS_Can_rxSetting>:

void GAS_Can_rxSetting(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	 * CAN rx set function
	 * IdHigh, IdLow for each 16bit in 29bit ID
	 * Set different FIFO and FilterBank
	 *
	 */
	sFilterConfig.FilterIdHigh = (TC_switch_ID<<3)>>16;				/*first 2byte in 29bit (shift need to IED,RTR,0)*/
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <GAS_Can_rxSetting+0x6c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	0c1b      	lsrs	r3, r3, #16
 80011a8:	4a18      	ldr	r2, [pc, #96]	; (800120c <GAS_Can_rxSetting+0x70>)
 80011aa:	6013      	str	r3, [r2, #0]
	sFilterConfig.FilterIdLow = (0xffff & (TC_switch_ID << 3)) | (1<<2);	/*second 2byte in 29bit + IDE (shift need to IED,RTR,0/)*/
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <GAS_Can_rxSetting+0x6c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <GAS_Can_rxSetting+0x70>)
 80011ba:	6053      	str	r3, [r2, #4]
	sFilterConfig.FilterMaskIdHigh = (0x0ffffff0<<3)>>16;
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <GAS_Can_rxSetting+0x70>)
 80011be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80011c2:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow =(0xffff & (0x0FFFFFF0 << 3)) | (1<<2);
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <GAS_Can_rxSetting+0x70>)
 80011c6:	f64f 7284 	movw	r2, #65412	; 0xff84
 80011ca:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <GAS_Can_rxSetting+0x70>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterBank = 14;   /* YOU MUST USE FILTERBANK 14 if YOU USE CAN2!!!!!!!!!!!!!!! */
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <GAS_Can_rxSetting+0x70>)
 80011d4:	220e      	movs	r2, #14
 80011d6:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <GAS_Can_rxSetting+0x70>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <GAS_Can_rxSetting+0x70>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <GAS_Can_rxSetting+0x70>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <GAS_Can_rxSetting+0x70>)
 80011ec:	220e      	movs	r2, #14
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24

		 if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 80011f0:	4906      	ldr	r1, [pc, #24]	; (800120c <GAS_Can_rxSetting+0x70>)
 80011f2:	4807      	ldr	r0, [pc, #28]	; (8001210 <GAS_Can_rxSetting+0x74>)
 80011f4:	f001 ffd4 	bl	80031a0 <HAL_CAN_ConfigFilter>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <GAS_Can_rxSetting+0x66>
		  {
		    /* Filter configuration Error */
		    Error_Handler();
 80011fe:	f000 fd91 	bl	8001d24 <Error_Handler>
//	  {
//	    /* Filter configuration Error */
//	    Error_Handler();
//	  }

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008
 800120c:	200000a0 	.word	0x200000a0
 8001210:	20000220 	.word	0x20000220

08001214 <GAS_Can_init>:

void GAS_Can_init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	/*
	 * GAS_CAN_init
	 * ActiveNotification for Rx message pending
	 */
	GAS_Can_txSetting();
 8001218:	f7ff ff96 	bl	8001148 <GAS_Can_txSetting>
	GAS_Can_rxSetting();
 800121c:	f7ff ffbe 	bl	800119c <GAS_Can_rxSetting>
	HAL_CAN_Start(&hcan2);
 8001220:	4806      	ldr	r0, [pc, #24]	; (800123c <GAS_Can_init+0x28>)
 8001222:	f002 f89d 	bl	8003360 <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001226:	2102      	movs	r1, #2
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <GAS_Can_init+0x28>)
 800122a:	f002 faff 	bl	800382c <HAL_CAN_ActivateNotification>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <GAS_Can_init+0x24>
	{
	  Error_Handler();
 8001234:	f000 fd76 	bl	8001d24 <Error_Handler>
//	{
//	  Error_Handler();
//	}


}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000220 	.word	0x20000220

08001240 <GAS_Can_sendMessage>:

void GAS_Can_sendMessage()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	/*
	 * CAN send message function
	 * send Message data with sendData[8]
	 */
	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 8001244:	480c      	ldr	r0, [pc, #48]	; (8001278 <GAS_Can_sendMessage+0x38>)
 8001246:	f002 f9aa 	bl	800359e <HAL_CAN_GetTxMailboxesFreeLevel>
 800124a:	4603      	mov	r3, r0
 800124c:	4a0b      	ldr	r2, [pc, #44]	; (800127c <GAS_Can_sendMessage+0x3c>)
 800124e:	6013      	str	r3, [r2, #0]
	HAL_CAN_AddTxMessage(&hcan2, &canTxHeader, &stm32_tx1.TxData[0], &TxMailBox);
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <GAS_Can_sendMessage+0x3c>)
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <GAS_Can_sendMessage+0x40>)
 8001254:	490b      	ldr	r1, [pc, #44]	; (8001284 <GAS_Can_sendMessage+0x44>)
 8001256:	4808      	ldr	r0, [pc, #32]	; (8001278 <GAS_Can_sendMessage+0x38>)
 8001258:	f002 f8c6 	bl	80033e8 <HAL_CAN_AddTxMessage>

	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 800125c:	4806      	ldr	r0, [pc, #24]	; (8001278 <GAS_Can_sendMessage+0x38>)
 800125e:	f002 f99e 	bl	800359e <HAL_CAN_GetTxMailboxesFreeLevel>
 8001262:	4603      	mov	r3, r0
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <GAS_Can_sendMessage+0x3c>)
 8001266:	6013      	str	r3, [r2, #0]
	HAL_CAN_AddTxMessage(&hcan2, &canTxHeader2, &stm32_tx2.TxData[0], &TxMailBox);
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <GAS_Can_sendMessage+0x3c>)
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <GAS_Can_sendMessage+0x48>)
 800126c:	4907      	ldr	r1, [pc, #28]	; (800128c <GAS_Can_sendMessage+0x4c>)
 800126e:	4802      	ldr	r0, [pc, #8]	; (8001278 <GAS_Can_sendMessage+0x38>)
 8001270:	f002 f8ba 	bl	80033e8 <HAL_CAN_AddTxMessage>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000220 	.word	0x20000220
 800127c:	20000114 	.word	0x20000114
 8001280:	20000118 	.word	0x20000118
 8001284:	200000e4 	.word	0x200000e4
 8001288:	20000120 	.word	0x20000120
 800128c:	200000fc 	.word	0x200000fc

08001290 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	/*
	 * CAN recieve data interrupt function
	 * Check Instance then recieve data in stm32_2.RxData
	 */
	if(hcan->Instance == CAN2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d11c      	bne.n	80012dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
	{
		uint8_t temp[8];
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, temp);
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80012a8:	2100      	movs	r1, #0
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f002 f9ac 	bl	8003608 <HAL_CAN_GetRxMessage>
		if (canRxHeader.ExtId == 0x275C02){
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d108      	bne.n	80012cc <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
			memcpy(TC_order.RxData,temp,sizeof(uint8_t)*8);
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80012bc:	461a      	mov	r2, r3
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012c6:	e882 0003 	stmia.w	r2, {r0, r1}
		}
		else{
			memcpy(TC_switch.RxData,temp,sizeof(uint8_t)*8);
		}
	}
}
 80012ca:	e007      	b.n	80012dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
			memcpy(TC_switch.RxData,temp,sizeof(uint8_t)*8);
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80012ce:	461a      	mov	r2, r3
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012d8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40006800 	.word	0x40006800
 80012e8:	200000c8 	.word	0x200000c8
 80012ec:	00275c02 	.word	0x00275c02
 80012f0:	20000130 	.word	0x20000130
 80012f4:	20000128 	.word	0x20000128

080012f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ffc2 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <GAS_Scheduler_init>:
void GAS_Scheduler_taskCounter_1000ms(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void GAS_Schduler(void);

void GAS_Scheduler_init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0

	SysTick_Config(SystemCoreClock/1000);
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <GAS_Scheduler_init+0x28>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a08      	ldr	r2, [pc, #32]	; (80013bc <GAS_Scheduler_init+0x2c>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	099b      	lsrs	r3, r3, #6
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ffd3 	bl	800134c <SysTick_Config>

//********CAN initialization********
	GAS_Can_init();
 80013a6:	f7ff ff35 	bl	8001214 <GAS_Can_init>

//********PWM initialization********
	GAS_CCTL_outputInit();
 80013aa:	f7ff fd5d 	bl	8000e68 <GAS_CCTL_outputInit>
//	GAS_PWM_outputInit();

//********ADC initialization*******
	GAS_Vadc_init();
 80013ae:	f000 f89d 	bl	80014ec <GAS_Vadc_init>
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000010 	.word	0x20000010
 80013bc:	10624dd3 	.word	0x10624dd3

080013c0 <GAS_Scheduler_taskCounter_1ms>:



void GAS_Scheduler_taskCounter_1ms(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	GAS_Vadc_getValue();
 80013c4:	f000 f908 	bl	80015d8 <GAS_Vadc_getValue>

//	GAS_Can_sendMessage();
//	GAS_PWM_changeOutput_ch1(ValueOfADC[0]);
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <GAS_Scheduler_taskCounter_10ms>:

void GAS_Scheduler_taskCounter_10ms(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	GAS_Can_sendMessage();
 80013d0:	f7ff ff36 	bl	8001240 <GAS_Can_sendMessage>
	GAS_CCTL_Control();
 80013d4:	f7ff fd76 	bl	8000ec4 <GAS_CCTL_Control>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <GAS_Scheduler_taskCounter_100ms>:

void GAS_Scheduler_taskCounter_100ms(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BlueLED_Pin);
 80013e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <GAS_Scheduler_taskCounter_100ms+0x14>)
 80013e6:	f003 fad0 	bl	800498a <HAL_GPIO_TogglePin>
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40020400 	.word	0x40020400

080013f4 <GAS_Scheduler_taskCounter_1000ms>:
void GAS_Scheduler_taskCounter_1000ms(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void){
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	gTimerCnt++;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_SYSTICK_Callback+0x7c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <HAL_SYSTICK_Callback+0x7c>)
 8001410:	6013      	str	r3, [r2, #0]
			gTask.flag_1ms=True;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_SYSTICK_Callback+0x80>)
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
			if(gTimerCnt % 10 == 0)
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_SYSTICK_Callback+0x7c>)
 800141a:	6819      	ldr	r1, [r3, #0]
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_SYSTICK_Callback+0x84>)
 800141e:	fb83 2301 	smull	r2, r3, r3, r1
 8001422:	109a      	asrs	r2, r3, #2
 8001424:	17cb      	asrs	r3, r1, #31
 8001426:	1ad2      	subs	r2, r2, r3
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	1aca      	subs	r2, r1, r3
 8001432:	2a00      	cmp	r2, #0
 8001434:	d102      	bne.n	800143c <HAL_SYSTICK_Callback+0x38>
			{
				gTask.flag_10ms=True;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <HAL_SYSTICK_Callback+0x80>)
 8001438:	2201      	movs	r2, #1
 800143a:	705a      	strb	r2, [r3, #1]
			}
			if(gTimerCnt % 100 == 0)
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_SYSTICK_Callback+0x7c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_SYSTICK_Callback+0x88>)
 8001442:	fb83 1302 	smull	r1, r3, r3, r2
 8001446:	1159      	asrs	r1, r3, #5
 8001448:	17d3      	asrs	r3, r2, #31
 800144a:	1acb      	subs	r3, r1, r3
 800144c:	2164      	movs	r1, #100	; 0x64
 800144e:	fb01 f303 	mul.w	r3, r1, r3
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <HAL_SYSTICK_Callback+0x5a>
			{
				gTask.flag_100ms=True;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_SYSTICK_Callback+0x80>)
 800145a:	2201      	movs	r2, #1
 800145c:	709a      	strb	r2, [r3, #2]
			}

			if(gTimerCnt == 1000)
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_SYSTICK_Callback+0x7c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001466:	d105      	bne.n	8001474 <HAL_SYSTICK_Callback+0x70>
			{
				gTask.flag_1000ms=True;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_SYSTICK_Callback+0x80>)
 800146a:	2201      	movs	r2, #1
 800146c:	70da      	strb	r2, [r3, #3]
				gTimerCnt = 0;
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <HAL_SYSTICK_Callback+0x7c>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
			}
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000138 	.word	0x20000138
 8001484:	2000013c 	.word	0x2000013c
 8001488:	66666667 	.word	0x66666667
 800148c:	51eb851f 	.word	0x51eb851f

08001490 <GAS_Scheduler>:
//		gTimerCnt = 0;
//	}
//}

void GAS_Scheduler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0


	if(gTask.flag_1ms == True)
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <GAS_Scheduler+0x58>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d104      	bne.n	80014a8 <GAS_Scheduler+0x18>
	{
		gTask.flag_1ms = False;
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <GAS_Scheduler+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
		GAS_Scheduler_taskCounter_1ms();
 80014a4:	f7ff ff8c 	bl	80013c0 <GAS_Scheduler_taskCounter_1ms>
	}

	if(gTask.flag_10ms == True)
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <GAS_Scheduler+0x58>)
 80014aa:	785b      	ldrb	r3, [r3, #1]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d104      	bne.n	80014bc <GAS_Scheduler+0x2c>
	{
		gTask.flag_10ms = False;
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <GAS_Scheduler+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	705a      	strb	r2, [r3, #1]
		GAS_Scheduler_taskCounter_10ms();
 80014b8:	f7ff ff88 	bl	80013cc <GAS_Scheduler_taskCounter_10ms>
	}

	if(gTask.flag_100ms == True)
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <GAS_Scheduler+0x58>)
 80014be:	789b      	ldrb	r3, [r3, #2]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d104      	bne.n	80014d0 <GAS_Scheduler+0x40>
	{
		gTask.flag_100ms = False;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <GAS_Scheduler+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	709a      	strb	r2, [r3, #2]
		GAS_Scheduler_taskCounter_100ms();
 80014cc:	f7ff ff86 	bl	80013dc <GAS_Scheduler_taskCounter_100ms>
	}

	if(gTask.flag_1000ms == True)
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <GAS_Scheduler+0x58>)
 80014d2:	78db      	ldrb	r3, [r3, #3]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d104      	bne.n	80014e4 <GAS_Scheduler+0x54>
	{
		gTask.flag_1000ms = False;
 80014da:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <GAS_Scheduler+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	70da      	strb	r2, [r3, #3]
		GAS_Scheduler_taskCounter_1000ms();
 80014e0:	f7ff ff88 	bl	80013f4 <GAS_Scheduler_taskCounter_1000ms>
	}

//	GAS_Can_recieveMessage(&hcan);
//	HAL_CAN_IRQHandler(&hcan);
//	  pin_state=HAL_GPIO_ReadPin(GPIO_PIN_8);
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2000013c 	.word	0x2000013c

080014ec <GAS_Vadc_init>:
void GAS_Vadc_getValue(void);



void GAS_Vadc_init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ValueOfADC, NumberOfVadc) != HAL_OK)
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <GAS_Vadc_init+0x20>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4906      	ldr	r1, [pc, #24]	; (8001510 <GAS_Vadc_init+0x24>)
 80014f8:	4806      	ldr	r0, [pc, #24]	; (8001514 <GAS_Vadc_init+0x28>)
 80014fa:	f001 f987 	bl	800280c <HAL_ADC_Start_DMA>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <GAS_Vadc_init+0x1c>
	{
		Error_Handler();
 8001504:	f000 fc0e 	bl	8001d24 <Error_Handler>
	}
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2000000c 	.word	0x2000000c
 8001510:	20000140 	.word	0x20000140
 8001514:	20000178 	.word	0x20000178

08001518 <calcTemp>:

static uint16_t calcTemp(float ADCVal){
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	ed87 0a01 	vstr	s0, [r7, #4]
	float V = (float)(ADCVal*3.3/4095);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7fe ffb4 	bl	8000490 <__aeabi_f2d>
 8001528:	a323      	add	r3, pc, #140	; (adr r3, 80015b8 <calcTemp+0xa0>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7ff f807 	bl	8000540 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	a321      	add	r3, pc, #132	; (adr r3, 80015c0 <calcTemp+0xa8>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff f928 	bl	8000794 <__aeabi_ddiv>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff faba 	bl	8000ac4 <__aeabi_d2f>
 8001550:	4603      	mov	r3, r0
 8001552:	60fb      	str	r3, [r7, #12]
	float temp = 0.0048*exp(3.0409*V);
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f7fe ff9b 	bl	8000490 <__aeabi_f2d>
 800155a:	a31b      	add	r3, pc, #108	; (adr r3, 80015c8 <calcTemp+0xb0>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7fe ffee 	bl	8000540 <__aeabi_dmul>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	ec43 2b17 	vmov	d7, r2, r3
 800156c:	eeb0 0a47 	vmov.f32	s0, s14
 8001570:	eef0 0a67 	vmov.f32	s1, s15
 8001574:	f005 fa24 	bl	80069c0 <exp>
 8001578:	ec51 0b10 	vmov	r0, r1, d0
 800157c:	a314      	add	r3, pc, #80	; (adr r3, 80015d0 <calcTemp+0xb8>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7fe ffdd 	bl	8000540 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fa99 	bl	8000ac4 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	60bb      	str	r3, [r7, #8]
	return (int)(temp*10);
 8001596:	edd7 7a02 	vldr	s15, [r7, #8]
 800159a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800159e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a6:	ee17 3a90 	vmov	r3, s15
 80015aa:	b29b      	uxth	r3, r3
//	return ;
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	f3af 8000 	nop.w
 80015b8:	66666666 	.word	0x66666666
 80015bc:	400a6666 	.word	0x400a6666
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40affe00 	.word	0x40affe00
 80015c8:	6113404f 	.word	0x6113404f
 80015cc:	400853c3 	.word	0x400853c3
 80015d0:	30553261 	.word	0x30553261
 80015d4:	3f73a92a 	.word	0x3f73a92a

080015d8 <GAS_Vadc_getValue>:

void GAS_Vadc_getValue(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	 * Length of ValueOfADC shall to be updated properly.
	 * Implement the conversions!
	 * */

	// R = 0.1 -> product 10
	CoolingADC.Radiator0_IS=ValueOfADC[0]*10;
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <GAS_Vadc_getValue+0x90>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	0092      	lsls	r2, r2, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <GAS_Vadc_getValue+0x94>)
 80015ee:	80da      	strh	r2, [r3, #6]
	//CoolingADC.Remain=ValueOfADC[1]*10; ///Unused ADC PIN?
	CoolingADC.External_IS=ValueOfADC[2]*10;
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <GAS_Vadc_getValue+0x90>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	0092      	lsls	r2, r2, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <GAS_Vadc_getValue+0x94>)
 8001602:	801a      	strh	r2, [r3, #0]
	//CoolingADC.WaterPump_P=ValueOfADC[3]*10;
	CoolingADC.Radiator0_T=calcTemp(ValueOfADC[4]);			//Left RadTemp
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <GAS_Vadc_getValue+0x90>)
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	f7ff ff80 	bl	8001518 <calcTemp>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <GAS_Vadc_getValue+0x94>)
 800161e:	815a      	strh	r2, [r3, #10]
	CoolingADC.WaterPump0_IS=ValueOfADC[5]*10;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <GAS_Vadc_getValue+0x90>)
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	b29b      	uxth	r3, r3
 8001626:	461a      	mov	r2, r3
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <GAS_Vadc_getValue+0x94>)
 8001632:	805a      	strh	r2, [r3, #2]
	CoolingADC.Radiator1_T=calcTemp(ValueOfADC[3]);			//Right RadTemp
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <GAS_Vadc_getValue+0x90>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	f7ff ff68 	bl	8001518 <calcTemp>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <GAS_Vadc_getValue+0x94>)
 800164e:	819a      	strh	r2, [r3, #12]

	CoolingADC.WaterPump1_IS=ValueOfADC[7]*10;
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <GAS_Vadc_getValue+0x90>)
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	b29b      	uxth	r3, r3
 8001656:	461a      	mov	r2, r3
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b02      	ldr	r3, [pc, #8]	; (800166c <GAS_Vadc_getValue+0x94>)
 8001662:	809a      	strh	r2, [r3, #4]

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000140 	.word	0x20000140
 800166c:	20000164 	.word	0x20000164

08001670 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001676:	463b      	mov	r3, r7
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001682:	4b59      	ldr	r3, [pc, #356]	; (80017e8 <MX_ADC1_Init+0x178>)
 8001684:	4a59      	ldr	r2, [pc, #356]	; (80017ec <MX_ADC1_Init+0x17c>)
 8001686:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001688:	4b57      	ldr	r3, [pc, #348]	; (80017e8 <MX_ADC1_Init+0x178>)
 800168a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800168e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001690:	4b55      	ldr	r3, [pc, #340]	; (80017e8 <MX_ADC1_Init+0x178>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001696:	4b54      	ldr	r3, [pc, #336]	; (80017e8 <MX_ADC1_Init+0x178>)
 8001698:	2201      	movs	r2, #1
 800169a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800169c:	4b52      	ldr	r3, [pc, #328]	; (80017e8 <MX_ADC1_Init+0x178>)
 800169e:	2201      	movs	r2, #1
 80016a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a2:	4b51      	ldr	r3, [pc, #324]	; (80017e8 <MX_ADC1_Init+0x178>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016aa:	4b4f      	ldr	r3, [pc, #316]	; (80017e8 <MX_ADC1_Init+0x178>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016b0:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <MX_ADC1_Init+0x178>)
 80016b2:	4a4f      	ldr	r2, [pc, #316]	; (80017f0 <MX_ADC1_Init+0x180>)
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016b6:	4b4c      	ldr	r3, [pc, #304]	; (80017e8 <MX_ADC1_Init+0x178>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 80016bc:	4b4a      	ldr	r3, [pc, #296]	; (80017e8 <MX_ADC1_Init+0x178>)
 80016be:	2209      	movs	r2, #9
 80016c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80016c2:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <MX_ADC1_Init+0x178>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016ca:	4b47      	ldr	r3, [pc, #284]	; (80017e8 <MX_ADC1_Init+0x178>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016d0:	4845      	ldr	r0, [pc, #276]	; (80017e8 <MX_ADC1_Init+0x178>)
 80016d2:	f001 f857 	bl	8002784 <HAL_ADC_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016dc:	f000 fb22 	bl	8001d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ec:	463b      	mov	r3, r7
 80016ee:	4619      	mov	r1, r3
 80016f0:	483d      	ldr	r0, [pc, #244]	; (80017e8 <MX_ADC1_Init+0x178>)
 80016f2:	f001 f9b9 	bl	8002a68 <HAL_ADC_ConfigChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016fc:	f000 fb12 	bl	8001d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001700:	2302      	movs	r3, #2
 8001702:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001704:	2302      	movs	r3, #2
 8001706:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001708:	463b      	mov	r3, r7
 800170a:	4619      	mov	r1, r3
 800170c:	4836      	ldr	r0, [pc, #216]	; (80017e8 <MX_ADC1_Init+0x178>)
 800170e:	f001 f9ab 	bl	8002a68 <HAL_ADC_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001718:	f000 fb04 	bl	8001d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800171c:	2303      	movs	r3, #3
 800171e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001720:	2303      	movs	r3, #3
 8001722:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001724:	463b      	mov	r3, r7
 8001726:	4619      	mov	r1, r3
 8001728:	482f      	ldr	r0, [pc, #188]	; (80017e8 <MX_ADC1_Init+0x178>)
 800172a:	f001 f99d 	bl	8002a68 <HAL_ADC_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001734:	f000 faf6 	bl	8001d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001738:	2304      	movs	r3, #4
 800173a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800173c:	2304      	movs	r3, #4
 800173e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001740:	463b      	mov	r3, r7
 8001742:	4619      	mov	r1, r3
 8001744:	4828      	ldr	r0, [pc, #160]	; (80017e8 <MX_ADC1_Init+0x178>)
 8001746:	f001 f98f 	bl	8002a68 <HAL_ADC_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001750:	f000 fae8 	bl	8001d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001754:	230d      	movs	r3, #13
 8001756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001758:	2305      	movs	r3, #5
 800175a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	4619      	mov	r1, r3
 8001760:	4821      	ldr	r0, [pc, #132]	; (80017e8 <MX_ADC1_Init+0x178>)
 8001762:	f001 f981 	bl	8002a68 <HAL_ADC_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800176c:	f000 fada 	bl	8001d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001770:	230c      	movs	r3, #12
 8001772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001774:	2306      	movs	r3, #6
 8001776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001778:	463b      	mov	r3, r7
 800177a:	4619      	mov	r1, r3
 800177c:	481a      	ldr	r0, [pc, #104]	; (80017e8 <MX_ADC1_Init+0x178>)
 800177e:	f001 f973 	bl	8002a68 <HAL_ADC_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001788:	f000 facc 	bl	8001d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800178c:	230b      	movs	r3, #11
 800178e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001790:	2307      	movs	r3, #7
 8001792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001794:	463b      	mov	r3, r7
 8001796:	4619      	mov	r1, r3
 8001798:	4813      	ldr	r0, [pc, #76]	; (80017e8 <MX_ADC1_Init+0x178>)
 800179a:	f001 f965 	bl	8002a68 <HAL_ADC_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80017a4:	f000 fabe 	bl	8001d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017a8:	2305      	movs	r3, #5
 80017aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80017ac:	2308      	movs	r3, #8
 80017ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b0:	463b      	mov	r3, r7
 80017b2:	4619      	mov	r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <MX_ADC1_Init+0x178>)
 80017b6:	f001 f957 	bl	8002a68 <HAL_ADC_ConfigChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80017c0:	f000 fab0 	bl	8001d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80017c4:	2306      	movs	r3, #6
 80017c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80017c8:	2309      	movs	r3, #9
 80017ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_ADC1_Init+0x178>)
 80017d2:	f001 f949 	bl	8002a68 <HAL_ADC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80017dc:	f000 faa2 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000178 	.word	0x20000178
 80017ec:	40012000 	.word	0x40012000
 80017f0:	0f000001 	.word	0x0f000001

080017f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a3c      	ldr	r2, [pc, #240]	; (8001904 <HAL_ADC_MspInit+0x110>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d171      	bne.n	80018fa <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <HAL_ADC_MspInit+0x114>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	4a3a      	ldr	r2, [pc, #232]	; (8001908 <HAL_ADC_MspInit+0x114>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6453      	str	r3, [r2, #68]	; 0x44
 8001826:	4b38      	ldr	r3, [pc, #224]	; (8001908 <HAL_ADC_MspInit+0x114>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b34      	ldr	r3, [pc, #208]	; (8001908 <HAL_ADC_MspInit+0x114>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a33      	ldr	r2, [pc, #204]	; (8001908 <HAL_ADC_MspInit+0x114>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_ADC_MspInit+0x114>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <HAL_ADC_MspInit+0x114>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a2c      	ldr	r2, [pc, #176]	; (8001908 <HAL_ADC_MspInit+0x114>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_ADC_MspInit+0x114>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800186a:	230e      	movs	r3, #14
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186e:	2303      	movs	r3, #3
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4823      	ldr	r0, [pc, #140]	; (800190c <HAL_ADC_MspInit+0x118>)
 800187e:	f002 fecf 	bl	8004620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001882:	237d      	movs	r3, #125	; 0x7d
 8001884:	617b      	str	r3, [r7, #20]
                          |_ADC1_IN5_Pin|_ADC1_IN6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001886:	2303      	movs	r3, #3
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	481e      	ldr	r0, [pc, #120]	; (8001910 <HAL_ADC_MspInit+0x11c>)
 8001896:	f002 fec3 	bl	8004620 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <HAL_ADC_MspInit+0x120>)
 800189c:	4a1e      	ldr	r2, [pc, #120]	; (8001918 <HAL_ADC_MspInit+0x124>)
 800189e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_ADC_MspInit+0x120>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_ADC_MspInit+0x120>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_ADC_MspInit+0x120>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_ADC_MspInit+0x120>)
 80018b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <HAL_ADC_MspInit+0x120>)
 80018bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_ADC_MspInit+0x120>)
 80018c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_ADC_MspInit+0x120>)
 80018cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <HAL_ADC_MspInit+0x120>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_ADC_MspInit+0x120>)
 80018da:	2200      	movs	r2, #0
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018de:	480d      	ldr	r0, [pc, #52]	; (8001914 <HAL_ADC_MspInit+0x120>)
 80018e0:	f002 fb2e 	bl	8003f40 <HAL_DMA_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80018ea:	f000 fa1b 	bl	8001d24 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_ADC_MspInit+0x120>)
 80018f2:	639a      	str	r2, [r3, #56]	; 0x38
 80018f4:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_ADC_MspInit+0x120>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40012000 	.word	0x40012000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020800 	.word	0x40020800
 8001910:	40020000 	.word	0x40020000
 8001914:	200001c0 	.word	0x200001c0
 8001918:	40026410 	.word	0x40026410

0800191c <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <MX_CAN2_Init+0x64>)
 8001922:	4a18      	ldr	r2, [pc, #96]	; (8001984 <MX_CAN2_Init+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 8001926:	4b16      	ldr	r3, [pc, #88]	; (8001980 <MX_CAN2_Init+0x64>)
 8001928:	2207      	movs	r2, #7
 800192a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_CAN2_Init+0x64>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <MX_CAN2_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_CAN2_Init+0x64>)
 800193a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800193e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_CAN2_Init+0x64>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_CAN2_Init+0x64>)
 8001948:	2200      	movs	r2, #0
 800194a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_CAN2_Init+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_CAN2_Init+0x64>)
 8001954:	2200      	movs	r2, #0
 8001956:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_CAN2_Init+0x64>)
 800195a:	2200      	movs	r2, #0
 800195c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_CAN2_Init+0x64>)
 8001960:	2200      	movs	r2, #0
 8001962:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_CAN2_Init+0x64>)
 8001966:	2200      	movs	r2, #0
 8001968:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_CAN2_Init+0x64>)
 800196c:	f001 fb1c 	bl	8002fa8 <HAL_CAN_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001976:	f000 f9d5 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000220 	.word	0x20000220
 8001984:	40006800 	.word	0x40006800

08001988 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a28      	ldr	r2, [pc, #160]	; (8001a48 <HAL_CAN_MspInit+0xc0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d14a      	bne.n	8001a40 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_CAN_MspInit+0xc4>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a26      	ldr	r2, [pc, #152]	; (8001a4c <HAL_CAN_MspInit+0xc4>)
 80019b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_CAN_MspInit+0xc4>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_CAN_MspInit+0xc4>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <HAL_CAN_MspInit+0xc4>)
 80019d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_CAN_MspInit+0xc4>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_CAN_MspInit+0xc4>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <HAL_CAN_MspInit+0xc4>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <HAL_CAN_MspInit+0xc4>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019fe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001a10:	2309      	movs	r3, #9
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480d      	ldr	r0, [pc, #52]	; (8001a50 <HAL_CAN_MspInit+0xc8>)
 8001a1c:	f002 fe00 	bl	8004620 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	2040      	movs	r0, #64	; 0x40
 8001a26:	f002 fa32 	bl	8003e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001a2a:	2040      	movs	r0, #64	; 0x40
 8001a2c:	f002 fa4b 	bl	8003ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	2041      	movs	r0, #65	; 0x41
 8001a36:	f002 fa2a 	bl	8003e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001a3a:	2041      	movs	r0, #65	; 0x41
 8001a3c:	f002 fa43 	bl	8003ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	; 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40006800 	.word	0x40006800
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020400 	.word	0x40020400

08001a54 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_CRC_Init+0x20>)
 8001a5a:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <MX_CRC_Init+0x24>)
 8001a5c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_CRC_Init+0x20>)
 8001a60:	f002 fa51 	bl	8003f06 <HAL_CRC_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001a6a:	f000 f95b 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000248 	.word	0x20000248
 8001a78:	40023000 	.word	0x40023000

08001a7c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <HAL_CRC_MspInit+0x3c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d10d      	bne.n	8001aaa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_CRC_MspInit+0x40>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a09      	ldr	r2, [pc, #36]	; (8001abc <HAL_CRC_MspInit+0x40>)
 8001a98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <HAL_CRC_MspInit+0x40>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40023000 	.word	0x40023000
 8001abc:	40023800 	.word	0x40023800

08001ac0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_DMA_Init+0x3c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <MX_DMA_Init+0x3c>)
 8001ad0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_DMA_Init+0x3c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2038      	movs	r0, #56	; 0x38
 8001ae8:	f002 f9d1 	bl	8003e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001aec:	2038      	movs	r0, #56	; 0x38
 8001aee:	f002 f9ea 	bl	8003ec6 <HAL_NVIC_EnableIRQ>

}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a37      	ldr	r2, [pc, #220]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a30      	ldr	r2, [pc, #192]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ErrorLED_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001b8c:	481c      	ldr	r0, [pc, #112]	; (8001c00 <MX_GPIO_Init+0x100>)
 8001b8e:	f002 fee3 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Radiator1_INH_Pin|Waterpump1_INH_Pin|Radiator0_INH_Pin|WaterPump0_INH_Pin
 8001b92:	2200      	movs	r2, #0
 8001b94:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001b98:	481a      	ldr	r0, [pc, #104]	; (8001c04 <MX_GPIO_Init+0x104>)
 8001b9a:	f002 fedd 	bl	8004958 <HAL_GPIO_WritePin>
                          |ExternalFan_INH_Pin|BlueLED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PC14 PC15 */
  GPIO_InitStruct.Pin = ErrorLED_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8001b9e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4812      	ldr	r0, [pc, #72]	; (8001c00 <MX_GPIO_Init+0x100>)
 8001bb8:	f002 fd32 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480c      	ldr	r0, [pc, #48]	; (8001c04 <MX_GPIO_Init+0x104>)
 8001bd2:	f002 fd25 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = Radiator1_INH_Pin|Waterpump1_INH_Pin|Radiator0_INH_Pin|WaterPump0_INH_Pin
 8001bd6:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001bda:	617b      	str	r3, [r7, #20]
                          |ExternalFan_INH_Pin|BlueLED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_GPIO_Init+0x104>)
 8001bf0:	f002 fd16 	bl	8004620 <HAL_GPIO_Init>

}
 8001bf4:	bf00      	nop
 8001bf6:	3728      	adds	r7, #40	; 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020400 	.word	0x40020400

08001c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c0c:	f000 fd24 	bl	8002658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c10:	f000 f81c 	bl	8001c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c14:	f7ff ff74 	bl	8001b00 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c18:	f7ff ff52 	bl	8001ac0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c1c:	f7ff fd28 	bl	8001670 <MX_ADC1_Init>
  MX_CAN2_Init();
 8001c20:	f7ff fe7c 	bl	800191c <MX_CAN2_Init>
  MX_SPI3_Init();
 8001c24:	f000 f88c 	bl	8001d40 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001c28:	f000 f9b4 	bl	8001f94 <MX_TIM1_Init>
  MX_CRC_Init();
 8001c2c:	f7ff ff12 	bl	8001a54 <MX_CRC_Init>
  MX_TIM8_Init();
 8001c30:	f000 fae6 	bl	8002200 <MX_TIM8_Init>
  MX_USB_OTG_HS_PCD_Init();
 8001c34:	f000 fc6c 	bl	8002510 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM5_Init();
 8001c38:	f000 fa92 	bl	8002160 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001c3c:	f000 fa2c 	bl	8002098 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  GAS_Scheduler_init();
 8001c40:	f7ff fba6 	bl	8001390 <GAS_Scheduler_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GAS_Scheduler();
 8001c44:	f7ff fc24 	bl	8001490 <GAS_Scheduler>
  {
 8001c48:	e7fc      	b.n	8001c44 <main+0x3c>
	...

08001c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b094      	sub	sp, #80	; 0x50
 8001c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c52:	f107 0320 	add.w	r3, r7, #32
 8001c56:	2230      	movs	r2, #48	; 0x30
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 fea8 	bl	80069b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <SystemClock_Config+0xd0>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	4a28      	ldr	r2, [pc, #160]	; (8001d1c <SystemClock_Config+0xd0>)
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c80:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <SystemClock_Config+0xd0>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <SystemClock_Config+0xd4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <SystemClock_Config+0xd4>)
 8001c96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <SystemClock_Config+0xd4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001cc0:	23a8      	movs	r3, #168	; 0xa8
 8001cc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cc8:	2307      	movs	r3, #7
 8001cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ccc:	f107 0320 	add.w	r3, r7, #32
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f002 ff91 	bl	8004bf8 <HAL_RCC_OscConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cdc:	f000 f822 	bl	8001d24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 f9f2 	bl	80050e8 <HAL_RCC_ClockConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d0a:	f000 f80b 	bl	8001d24 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001d0e:	f003 fad1 	bl	80052b4 <HAL_RCC_EnableCSS>
}
 8001d12:	bf00      	nop
 8001d14:	3750      	adds	r7, #80	; 0x50
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40007000 	.word	0x40007000

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	HAL_GPIO_WritePin(GPIOC,ErrorLED_Pin, GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d32:	4802      	ldr	r0, [pc, #8]	; (8001d3c <Error_Handler+0x18>)
 8001d34:	f002 fe10 	bl	8004958 <HAL_GPIO_WritePin>
 8001d38:	e7f8      	b.n	8001d2c <Error_Handler+0x8>
 8001d3a:	bf00      	nop
 8001d3c:	40020800 	.word	0x40020800

08001d40 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <MX_SPI3_Init+0x64>)
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <MX_SPI3_Init+0x68>)
 8001d48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <MX_SPI3_Init+0x64>)
 8001d4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <MX_SPI3_Init+0x64>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <MX_SPI3_Init+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <MX_SPI3_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <MX_SPI3_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <MX_SPI3_Init+0x64>)
 8001d6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d70:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <MX_SPI3_Init+0x64>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <MX_SPI3_Init+0x64>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <MX_SPI3_Init+0x64>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <MX_SPI3_Init+0x64>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <MX_SPI3_Init+0x64>)
 8001d8c:	220a      	movs	r2, #10
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d90:	4804      	ldr	r0, [pc, #16]	; (8001da4 <MX_SPI3_Init+0x64>)
 8001d92:	f003 fbbc 	bl	800550e <HAL_SPI_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001d9c:	f7ff ffc2 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000250 	.word	0x20000250
 8001da8:	40003c00 	.word	0x40003c00

08001dac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a29      	ldr	r2, [pc, #164]	; (8001e70 <HAL_SPI_MspInit+0xc4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d14b      	bne.n	8001e66 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <HAL_SPI_MspInit+0xc8>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <HAL_SPI_MspInit+0xc8>)
 8001dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_SPI_MspInit+0xc8>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <HAL_SPI_MspInit+0xc8>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <HAL_SPI_MspInit+0xc8>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_SPI_MspInit+0xc8>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_SPI_MspInit+0xc8>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_SPI_MspInit+0xc8>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_SPI_MspInit+0xc8>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e34:	2306      	movs	r3, #6
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480e      	ldr	r0, [pc, #56]	; (8001e78 <HAL_SPI_MspInit+0xcc>)
 8001e40:	f002 fbee 	bl	8004620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001e44:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e56:	2306      	movs	r3, #6
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4806      	ldr	r0, [pc, #24]	; (8001e7c <HAL_SPI_MspInit+0xd0>)
 8001e62:	f002 fbdd 	bl	8004620 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001e66:	bf00      	nop
 8001e68:	3728      	adds	r7, #40	; 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40003c00 	.word	0x40003c00
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	40020800 	.word	0x40020800

08001e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_MspInit+0x4c>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_MspInit+0x4c>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_MspInit+0x4c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001ed4:	f003 fb00 	bl	80054d8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <NMI_Handler+0x8>

08001eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f20:	f000 fbec 	bl	80026fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001f24:	f001 ffe9 	bl	8003efa <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <DMA2_Stream0_IRQHandler+0x10>)
 8001f32:	f002 f90b 	bl	800414c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200001c0 	.word	0x200001c0

08001f40 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <CAN2_RX0_IRQHandler+0x10>)
 8001f46:	f001 fc97 	bl	8003878 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000220 	.word	0x20000220

08001f54 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <CAN2_RX1_IRQHandler+0x10>)
 8001f5a:	f001 fc8d 	bl	8003878 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000220 	.word	0x20000220

08001f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <SystemInit+0x28>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <SystemInit+0x28>)
 8001f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <SystemInit+0x28>)
 8001f7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f82:	609a      	str	r2, [r3, #8]
#endif
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b092      	sub	sp, #72	; 0x48
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
 8001fb4:	615a      	str	r2, [r3, #20]
 8001fb6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	2220      	movs	r2, #32
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f004 fcf6 	bl	80069b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fc4:	4b32      	ldr	r3, [pc, #200]	; (8002090 <MX_TIM1_Init+0xfc>)
 8001fc6:	4a33      	ldr	r2, [pc, #204]	; (8002094 <MX_TIM1_Init+0x100>)
 8001fc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001fca:	4b31      	ldr	r3, [pc, #196]	; (8002090 <MX_TIM1_Init+0xfc>)
 8001fcc:	2247      	movs	r2, #71	; 0x47
 8001fce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd0:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <MX_TIM1_Init+0xfc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001fd6:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <MX_TIM1_Init+0xfc>)
 8001fd8:	2263      	movs	r2, #99	; 0x63
 8001fda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fdc:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <MX_TIM1_Init+0xfc>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fe2:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <MX_TIM1_Init+0xfc>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <MX_TIM1_Init+0xfc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fee:	4828      	ldr	r0, [pc, #160]	; (8002090 <MX_TIM1_Init+0xfc>)
 8001ff0:	f003 fb65 	bl	80056be <HAL_TIM_PWM_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001ffa:	f7ff fe93 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002006:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800200a:	4619      	mov	r1, r3
 800200c:	4820      	ldr	r0, [pc, #128]	; (8002090 <MX_TIM1_Init+0xfc>)
 800200e:	f004 f8f7 	bl	8006200 <HAL_TIMEx_MasterConfigSynchronization>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8002018:	f7ff fe84 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201c:	2360      	movs	r3, #96	; 0x60
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 99;
 8002020:	2363      	movs	r3, #99	; 0x63
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002024:	2300      	movs	r3, #0
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002028:	2300      	movs	r3, #0
 800202a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002034:	2300      	movs	r3, #0
 8002036:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203c:	2200      	movs	r2, #0
 800203e:	4619      	mov	r1, r3
 8002040:	4813      	ldr	r0, [pc, #76]	; (8002090 <MX_TIM1_Init+0xfc>)
 8002042:	f003 fc53 	bl	80058ec <HAL_TIM_PWM_ConfigChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800204c:	f7ff fe6a 	bl	8001d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002068:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	4619      	mov	r1, r3
 8002072:	4807      	ldr	r0, [pc, #28]	; (8002090 <MX_TIM1_Init+0xfc>)
 8002074:	f004 f940 	bl	80062f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800207e:	f7ff fe51 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002082:	4803      	ldr	r0, [pc, #12]	; (8002090 <MX_TIM1_Init+0xfc>)
 8002084:	f000 f9ba 	bl	80023fc <HAL_TIM_MspPostInit>

}
 8002088:	bf00      	nop
 800208a:	3748      	adds	r7, #72	; 0x48
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200002a8 	.word	0x200002a8
 8002094:	40010000 	.word	0x40010000

08002098 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209e:	f107 0320 	add.w	r3, r7, #32
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	611a      	str	r2, [r3, #16]
 80020b6:	615a      	str	r2, [r3, #20]
 80020b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020ba:	4b27      	ldr	r3, [pc, #156]	; (8002158 <MX_TIM3_Init+0xc0>)
 80020bc:	4a27      	ldr	r2, [pc, #156]	; (800215c <MX_TIM3_Init+0xc4>)
 80020be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80020c0:	4b25      	ldr	r3, [pc, #148]	; (8002158 <MX_TIM3_Init+0xc0>)
 80020c2:	2253      	movs	r2, #83	; 0x53
 80020c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <MX_TIM3_Init+0xc0>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80020cc:	4b22      	ldr	r3, [pc, #136]	; (8002158 <MX_TIM3_Init+0xc0>)
 80020ce:	2263      	movs	r2, #99	; 0x63
 80020d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <MX_TIM3_Init+0xc0>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d8:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <MX_TIM3_Init+0xc0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020de:	481e      	ldr	r0, [pc, #120]	; (8002158 <MX_TIM3_Init+0xc0>)
 80020e0:	f003 faed 	bl	80056be <HAL_TIM_PWM_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80020ea:	f7ff fe1b 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020f6:	f107 0320 	add.w	r3, r7, #32
 80020fa:	4619      	mov	r1, r3
 80020fc:	4816      	ldr	r0, [pc, #88]	; (8002158 <MX_TIM3_Init+0xc0>)
 80020fe:	f004 f87f 	bl	8006200 <HAL_TIMEx_MasterConfigSynchronization>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002108:	f7ff fe0c 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800210c:	2360      	movs	r3, #96	; 0x60
 800210e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 99;
 8002110:	2363      	movs	r3, #99	; 0x63
 8002112:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	2200      	movs	r2, #0
 8002120:	4619      	mov	r1, r3
 8002122:	480d      	ldr	r0, [pc, #52]	; (8002158 <MX_TIM3_Init+0xc0>)
 8002124:	f003 fbe2 	bl	80058ec <HAL_TIM_PWM_ConfigChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800212e:	f7ff fdf9 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	2208      	movs	r2, #8
 8002136:	4619      	mov	r1, r3
 8002138:	4807      	ldr	r0, [pc, #28]	; (8002158 <MX_TIM3_Init+0xc0>)
 800213a:	f003 fbd7 	bl	80058ec <HAL_TIM_PWM_ConfigChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002144:	f7ff fdee 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002148:	4803      	ldr	r0, [pc, #12]	; (8002158 <MX_TIM3_Init+0xc0>)
 800214a:	f000 f957 	bl	80023fc <HAL_TIM_MspPostInit>

}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	; 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200002f0 	.word	0x200002f0
 800215c:	40000400 	.word	0x40000400

08002160 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002166:	f107 030c 	add.w	r3, r7, #12
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
 8002174:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800217e:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <MX_TIM5_Init+0x98>)
 8002180:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <MX_TIM5_Init+0x9c>)
 8002182:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002184:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <MX_TIM5_Init+0x98>)
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <MX_TIM5_Init+0x98>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <MX_TIM5_Init+0x98>)
 8002192:	f04f 32ff 	mov.w	r2, #4294967295
 8002196:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002198:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <MX_TIM5_Init+0x98>)
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219e:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <MX_TIM5_Init+0x98>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021a4:	4814      	ldr	r0, [pc, #80]	; (80021f8 <MX_TIM5_Init+0x98>)
 80021a6:	f003 fa3b 	bl	8005620 <HAL_TIM_Base_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80021b0:	f7ff fdb8 	bl	8001d24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	4619      	mov	r1, r3
 80021c2:	480d      	ldr	r0, [pc, #52]	; (80021f8 <MX_TIM5_Init+0x98>)
 80021c4:	f003 fc54 	bl	8005a70 <HAL_TIM_SlaveConfigSynchro>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80021ce:	f7ff fda9 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	4619      	mov	r1, r3
 80021de:	4806      	ldr	r0, [pc, #24]	; (80021f8 <MX_TIM5_Init+0x98>)
 80021e0:	f004 f80e 	bl	8006200 <HAL_TIMEx_MasterConfigSynchronization>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80021ea:	f7ff fd9b 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000338 	.word	0x20000338
 80021fc:	40000c00 	.word	0x40000c00

08002200 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b092      	sub	sp, #72	; 0x48
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002206:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
 8002220:	615a      	str	r2, [r3, #20]
 8002222:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	2220      	movs	r2, #32
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f004 fbc0 	bl	80069b0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002230:	4b38      	ldr	r3, [pc, #224]	; (8002314 <MX_TIM8_Init+0x114>)
 8002232:	4a39      	ldr	r2, [pc, #228]	; (8002318 <MX_TIM8_Init+0x118>)
 8002234:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 71;
 8002236:	4b37      	ldr	r3, [pc, #220]	; (8002314 <MX_TIM8_Init+0x114>)
 8002238:	2247      	movs	r2, #71	; 0x47
 800223a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223c:	4b35      	ldr	r3, [pc, #212]	; (8002314 <MX_TIM8_Init+0x114>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 8002242:	4b34      	ldr	r3, [pc, #208]	; (8002314 <MX_TIM8_Init+0x114>)
 8002244:	2263      	movs	r2, #99	; 0x63
 8002246:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002248:	4b32      	ldr	r3, [pc, #200]	; (8002314 <MX_TIM8_Init+0x114>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800224e:	4b31      	ldr	r3, [pc, #196]	; (8002314 <MX_TIM8_Init+0x114>)
 8002250:	2200      	movs	r2, #0
 8002252:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002254:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <MX_TIM8_Init+0x114>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800225a:	482e      	ldr	r0, [pc, #184]	; (8002314 <MX_TIM8_Init+0x114>)
 800225c:	f003 fa2f 	bl	80056be <HAL_TIM_PWM_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8002266:	f7ff fd5d 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002272:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002276:	4619      	mov	r1, r3
 8002278:	4826      	ldr	r0, [pc, #152]	; (8002314 <MX_TIM8_Init+0x114>)
 800227a:	f003 ffc1 	bl	8006200 <HAL_TIMEx_MasterConfigSynchronization>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8002284:	f7ff fd4e 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002288:	2360      	movs	r3, #96	; 0x60
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002294:	2300      	movs	r3, #0
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800229c:	2300      	movs	r3, #0
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	2204      	movs	r2, #4
 80022aa:	4619      	mov	r1, r3
 80022ac:	4819      	ldr	r0, [pc, #100]	; (8002314 <MX_TIM8_Init+0x114>)
 80022ae:	f003 fb1d 	bl	80058ec <HAL_TIM_PWM_ConfigChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 80022b8:	f7ff fd34 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c0:	220c      	movs	r2, #12
 80022c2:	4619      	mov	r1, r3
 80022c4:	4813      	ldr	r0, [pc, #76]	; (8002314 <MX_TIM8_Init+0x114>)
 80022c6:	f003 fb11 	bl	80058ec <HAL_TIM_PWM_ConfigChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 80022d0:	f7ff fd28 	bl	8001d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	4619      	mov	r1, r3
 80022f6:	4807      	ldr	r0, [pc, #28]	; (8002314 <MX_TIM8_Init+0x114>)
 80022f8:	f003 fffe 	bl	80062f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8002302:	f7ff fd0f 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002306:	4803      	ldr	r0, [pc, #12]	; (8002314 <MX_TIM8_Init+0x114>)
 8002308:	f000 f878 	bl	80023fc <HAL_TIM_MspPostInit>

}
 800230c:	bf00      	nop
 800230e:	3748      	adds	r7, #72	; 0x48
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000380 	.word	0x20000380
 8002318:	40010400 	.word	0x40010400

0800231c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1f      	ldr	r2, [pc, #124]	; (80023a8 <HAL_TIM_PWM_MspInit+0x8c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d10e      	bne.n	800234c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	4b1e      	ldr	r3, [pc, #120]	; (80023ac <HAL_TIM_PWM_MspInit+0x90>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <HAL_TIM_PWM_MspInit+0x90>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6453      	str	r3, [r2, #68]	; 0x44
 800233e:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <HAL_TIM_PWM_MspInit+0x90>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800234a:	e026      	b.n	800239a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <HAL_TIM_PWM_MspInit+0x94>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10e      	bne.n	8002374 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	4b14      	ldr	r3, [pc, #80]	; (80023ac <HAL_TIM_PWM_MspInit+0x90>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a13      	ldr	r2, [pc, #76]	; (80023ac <HAL_TIM_PWM_MspInit+0x90>)
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_TIM_PWM_MspInit+0x90>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]
}
 8002372:	e012      	b.n	800239a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM8)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <HAL_TIM_PWM_MspInit+0x98>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10d      	bne.n	800239a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_TIM_PWM_MspInit+0x90>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	4a09      	ldr	r2, [pc, #36]	; (80023ac <HAL_TIM_PWM_MspInit+0x90>)
 8002388:	f043 0302 	orr.w	r3, r3, #2
 800238c:	6453      	str	r3, [r2, #68]	; 0x44
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_TIM_PWM_MspInit+0x90>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40010400 	.word	0x40010400

080023b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <HAL_TIM_Base_MspInit+0x3c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d10d      	bne.n	80023e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_TIM_Base_MspInit+0x40>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <HAL_TIM_Base_MspInit+0x40>)
 80023d4:	f043 0308 	orr.w	r3, r3, #8
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <HAL_TIM_Base_MspInit+0x40>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40000c00 	.word	0x40000c00
 80023f8:	40023800 	.word	0x40023800

080023fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a37      	ldr	r2, [pc, #220]	; (80024f8 <HAL_TIM_MspPostInit+0xfc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d11f      	bne.n	800245e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	4b36      	ldr	r3, [pc, #216]	; (80024fc <HAL_TIM_MspPostInit+0x100>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a35      	ldr	r2, [pc, #212]	; (80024fc <HAL_TIM_MspPostInit+0x100>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b33      	ldr	r3, [pc, #204]	; (80024fc <HAL_TIM_MspPostInit+0x100>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800243a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800244c:	2301      	movs	r3, #1
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4619      	mov	r1, r3
 8002456:	482a      	ldr	r0, [pc, #168]	; (8002500 <HAL_TIM_MspPostInit+0x104>)
 8002458:	f002 f8e2 	bl	8004620 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800245c:	e048      	b.n	80024f0 <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM3)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a28      	ldr	r2, [pc, #160]	; (8002504 <HAL_TIM_MspPostInit+0x108>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d11f      	bne.n	80024a8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	4b23      	ldr	r3, [pc, #140]	; (80024fc <HAL_TIM_MspPostInit+0x100>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	4a22      	ldr	r2, [pc, #136]	; (80024fc <HAL_TIM_MspPostInit+0x100>)
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	6313      	str	r3, [r2, #48]	; 0x30
 8002478:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_TIM_MspPostInit+0x100>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8002484:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002496:	2302      	movs	r3, #2
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	4819      	ldr	r0, [pc, #100]	; (8002508 <HAL_TIM_MspPostInit+0x10c>)
 80024a2:	f002 f8bd 	bl	8004620 <HAL_GPIO_Init>
}
 80024a6:	e023      	b.n	80024f0 <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM8)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a17      	ldr	r2, [pc, #92]	; (800250c <HAL_TIM_MspPostInit+0x110>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d11e      	bne.n	80024f0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_TIM_MspPostInit+0x100>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a10      	ldr	r2, [pc, #64]	; (80024fc <HAL_TIM_MspPostInit+0x100>)
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_TIM_MspPostInit+0x100>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80024ce:	f44f 7320 	mov.w	r3, #640	; 0x280
 80024d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80024e0:	2303      	movs	r3, #3
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	4807      	ldr	r0, [pc, #28]	; (8002508 <HAL_TIM_MspPostInit+0x10c>)
 80024ec:	f002 f898 	bl	8004620 <HAL_GPIO_Init>
}
 80024f0:	bf00      	nop
 80024f2:	3728      	adds	r7, #40	; 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40023800 	.word	0x40023800
 8002500:	40020000 	.word	0x40020000
 8002504:	40000400 	.word	0x40000400
 8002508:	40020800 	.word	0x40020800
 800250c:	40010400 	.word	0x40010400

08002510 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002516:	4a16      	ldr	r2, [pc, #88]	; (8002570 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8002518:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800251c:	2206      	movs	r2, #6
 800251e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002522:	2202      	movs	r2, #2
 8002524:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800252e:	2202      	movs	r2, #2
 8002530:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002534:	2200      	movs	r2, #0
 8002536:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800253a:	2200      	movs	r2, #0
 800253c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002540:	2200      	movs	r2, #0
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002546:	2200      	movs	r2, #0
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002552:	2200      	movs	r2, #0
 8002554:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8002556:	4805      	ldr	r0, [pc, #20]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002558:	f002 fa31 	bl	80049be <HAL_PCD_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8002562:	f7ff fbdf 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200003c8 	.word	0x200003c8
 8002570:	40040000 	.word	0x40040000

08002574 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <HAL_PCD_MspInit+0x84>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d12c      	bne.n	80025f0 <HAL_PCD_MspInit+0x7c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	4b18      	ldr	r3, [pc, #96]	; (80025fc <HAL_PCD_MspInit+0x88>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a17      	ldr	r2, [pc, #92]	; (80025fc <HAL_PCD_MspInit+0x88>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <HAL_PCD_MspInit+0x88>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80025b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80025b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c0:	2303      	movs	r3, #3
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80025c4:	230c      	movs	r3, #12
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4619      	mov	r1, r3
 80025ce:	480c      	ldr	r0, [pc, #48]	; (8002600 <HAL_PCD_MspInit+0x8c>)
 80025d0:	f002 f826 	bl	8004620 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_PCD_MspInit+0x88>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	4a07      	ldr	r2, [pc, #28]	; (80025fc <HAL_PCD_MspInit+0x88>)
 80025de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025e2:	6313      	str	r3, [r2, #48]	; 0x30
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_PCD_MspInit+0x88>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80025f0:	bf00      	nop
 80025f2:	3728      	adds	r7, #40	; 0x28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40040000 	.word	0x40040000
 80025fc:	40023800 	.word	0x40023800
 8002600:	40020400 	.word	0x40020400

08002604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800263c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002608:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800260a:	e003      	b.n	8002614 <LoopCopyDataInit>

0800260c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800260e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002610:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002612:	3104      	adds	r1, #4

08002614 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002614:	480b      	ldr	r0, [pc, #44]	; (8002644 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002618:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800261a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800261c:	d3f6      	bcc.n	800260c <CopyDataInit>
  ldr  r2, =_sbss
 800261e:	4a0b      	ldr	r2, [pc, #44]	; (800264c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002620:	e002      	b.n	8002628 <LoopFillZerobss>

08002622 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002622:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002624:	f842 3b04 	str.w	r3, [r2], #4

08002628 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800262a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800262c:	d3f9      	bcc.n	8002622 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800262e:	f7ff fc9b 	bl	8001f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002632:	f004 f999 	bl	8006968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002636:	f7ff fae7 	bl	8001c08 <main>
  bx  lr    
 800263a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800263c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002640:	08006e40 	.word	0x08006e40
  ldr  r0, =_sdata
 8002644:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002648:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 800264c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8002650:	200007d4 	.word	0x200007d4

08002654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002654:	e7fe      	b.n	8002654 <ADC_IRQHandler>
	...

08002658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <HAL_Init+0x40>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <HAL_Init+0x40>)
 8002662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002666:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_Init+0x40>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <HAL_Init+0x40>)
 800266e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002672:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_Init+0x40>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a07      	ldr	r2, [pc, #28]	; (8002698 <HAL_Init+0x40>)
 800267a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002680:	2003      	movs	r0, #3
 8002682:	f001 fbf9 	bl	8003e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002686:	2000      	movs	r0, #0
 8002688:	f000 f808 	bl	800269c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800268c:	f7ff fbf8 	bl	8001e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40023c00 	.word	0x40023c00

0800269c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_InitTick+0x54>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_InitTick+0x58>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 fc11 	bl	8003ee2 <HAL_SYSTICK_Config>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00e      	b.n	80026e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b0f      	cmp	r3, #15
 80026ce:	d80a      	bhi.n	80026e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d0:	2200      	movs	r2, #0
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	f001 fbd9 	bl	8003e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026dc:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <HAL_InitTick+0x5c>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000010 	.word	0x20000010
 80026f4:	20000018 	.word	0x20000018
 80026f8:	20000014 	.word	0x20000014

080026fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x20>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_IncTick+0x24>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4413      	add	r3, r2
 800270c:	4a04      	ldr	r2, [pc, #16]	; (8002720 <HAL_IncTick+0x24>)
 800270e:	6013      	str	r3, [r2, #0]
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000018 	.word	0x20000018
 8002720:	200007d0 	.word	0x200007d0

08002724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return uwTick;
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_GetTick+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	200007d0 	.word	0x200007d0

0800273c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002744:	f7ff ffee 	bl	8002724 <HAL_GetTick>
 8002748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d005      	beq.n	8002762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_Delay+0x44>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002762:	bf00      	nop
 8002764:	f7ff ffde 	bl	8002724 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	429a      	cmp	r2, r3
 8002772:	d8f7      	bhi.n	8002764 <HAL_Delay+0x28>
  {
  }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000018 	.word	0x20000018

08002784 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e033      	b.n	8002802 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff f826 	bl	80017f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d118      	bne.n	80027f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027ca:	f023 0302 	bic.w	r3, r3, #2
 80027ce:	f043 0202 	orr.w	r2, r3, #2
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fa68 	bl	8002cac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f023 0303 	bic.w	r3, r3, #3
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
 80027f2:	e001      	b.n	80027f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_ADC_Start_DMA+0x1e>
 8002826:	2302      	movs	r3, #2
 8002828:	e0e9      	b.n	80029fe <HAL_ADC_Start_DMA+0x1f2>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d018      	beq.n	8002872 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002850:	4b6d      	ldr	r3, [pc, #436]	; (8002a08 <HAL_ADC_Start_DMA+0x1fc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a6d      	ldr	r2, [pc, #436]	; (8002a0c <HAL_ADC_Start_DMA+0x200>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0c9a      	lsrs	r2, r3, #18
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002864:	e002      	b.n	800286c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	3b01      	subs	r3, #1
 800286a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f9      	bne.n	8002866 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002880:	d107      	bne.n	8002892 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002890:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	f040 80a1 	bne.w	80029e4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e0:	d106      	bne.n	80028f0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f023 0206 	bic.w	r2, r3, #6
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	645a      	str	r2, [r3, #68]	; 0x44
 80028ee:	e002      	b.n	80028f6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028fe:	4b44      	ldr	r3, [pc, #272]	; (8002a10 <HAL_ADC_Start_DMA+0x204>)
 8002900:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	4a43      	ldr	r2, [pc, #268]	; (8002a14 <HAL_ADC_Start_DMA+0x208>)
 8002908:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290e:	4a42      	ldr	r2, [pc, #264]	; (8002a18 <HAL_ADC_Start_DMA+0x20c>)
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	4a41      	ldr	r2, [pc, #260]	; (8002a1c <HAL_ADC_Start_DMA+0x210>)
 8002918:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002922:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002932:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002942:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	334c      	adds	r3, #76	; 0x4c
 800294e:	4619      	mov	r1, r3
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f001 fba2 	bl	800409c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	2b00      	cmp	r3, #0
 8002962:	d12a      	bne.n	80029ba <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a2d      	ldr	r2, [pc, #180]	; (8002a20 <HAL_ADC_Start_DMA+0x214>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d015      	beq.n	800299a <HAL_ADC_Start_DMA+0x18e>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2c      	ldr	r2, [pc, #176]	; (8002a24 <HAL_ADC_Start_DMA+0x218>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d105      	bne.n	8002984 <HAL_ADC_Start_DMA+0x178>
 8002978:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <HAL_ADC_Start_DMA+0x204>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a27      	ldr	r2, [pc, #156]	; (8002a28 <HAL_ADC_Start_DMA+0x21c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d136      	bne.n	80029fc <HAL_ADC_Start_DMA+0x1f0>
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_ADC_Start_DMA+0x204>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	d130      	bne.n	80029fc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d129      	bne.n	80029fc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	e020      	b.n	80029fc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <HAL_ADC_Start_DMA+0x214>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d11b      	bne.n	80029fc <HAL_ADC_Start_DMA+0x1f0>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d114      	bne.n	80029fc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	e00b      	b.n	80029fc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f043 0210 	orr.w	r2, r3, #16
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f4:	f043 0201 	orr.w	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000010 	.word	0x20000010
 8002a0c:	431bde83 	.word	0x431bde83
 8002a10:	40012300 	.word	0x40012300
 8002a14:	08002ea5 	.word	0x08002ea5
 8002a18:	08002f5f 	.word	0x08002f5f
 8002a1c:	08002f7b 	.word	0x08002f7b
 8002a20:	40012000 	.word	0x40012000
 8002a24:	40012100 	.word	0x40012100
 8002a28:	40012200 	.word	0x40012200

08002a2c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x1c>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e105      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x228>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b09      	cmp	r3, #9
 8002a92:	d925      	bls.n	8002ae0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68d9      	ldr	r1, [r3, #12]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b1e      	subs	r3, #30
 8002aaa:	2207      	movs	r2, #7
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68d9      	ldr	r1, [r3, #12]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	4603      	mov	r3, r0
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4403      	add	r3, r0
 8002ad2:	3b1e      	subs	r3, #30
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	e022      	b.n	8002b26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6919      	ldr	r1, [r3, #16]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	4613      	mov	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	2207      	movs	r2, #7
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	400a      	ands	r2, r1
 8002b02:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6919      	ldr	r1, [r3, #16]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4618      	mov	r0, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4403      	add	r3, r0
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b06      	cmp	r3, #6
 8002b2c:	d824      	bhi.n	8002b78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3b05      	subs	r3, #5
 8002b40:	221f      	movs	r2, #31
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	3b05      	subs	r3, #5
 8002b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	635a      	str	r2, [r3, #52]	; 0x34
 8002b76:	e04c      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b0c      	cmp	r3, #12
 8002b7e:	d824      	bhi.n	8002bca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	3b23      	subs	r3, #35	; 0x23
 8002b92:	221f      	movs	r2, #31
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43da      	mvns	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	400a      	ands	r2, r1
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	3b23      	subs	r3, #35	; 0x23
 8002bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bc8:	e023      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	3b41      	subs	r3, #65	; 0x41
 8002bdc:	221f      	movs	r2, #31
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43da      	mvns	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	400a      	ands	r2, r1
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	3b41      	subs	r3, #65	; 0x41
 8002c06:	fa00 f203 	lsl.w	r2, r0, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c12:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <HAL_ADC_ConfigChannel+0x234>)
 8002c14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <HAL_ADC_ConfigChannel+0x238>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d109      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1cc>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b12      	cmp	r3, #18
 8002c26:	d105      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <HAL_ADC_ConfigChannel+0x238>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d123      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x21e>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d003      	beq.n	8002c4e <HAL_ADC_ConfigChannel+0x1e6>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b11      	cmp	r3, #17
 8002c4c:	d11b      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b10      	cmp	r3, #16
 8002c60:	d111      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_ADC_ConfigChannel+0x23c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a10      	ldr	r2, [pc, #64]	; (8002ca8 <HAL_ADC_ConfigChannel+0x240>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	0c9a      	lsrs	r2, r3, #18
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c78:	e002      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f9      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40012300 	.word	0x40012300
 8002ca0:	40012000 	.word	0x40012000
 8002ca4:	20000010 	.word	0x20000010
 8002ca8:	431bde83 	.word	0x431bde83

08002cac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cb4:	4b79      	ldr	r3, [pc, #484]	; (8002e9c <ADC_Init+0x1f0>)
 8002cb6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	021a      	lsls	r2, r3, #8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6899      	ldr	r1, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <ADC_Init+0x1f4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d022      	beq.n	8002d8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6899      	ldr	r1, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6899      	ldr	r1, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	e00f      	b.n	8002daa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002da8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0202 	bic.w	r2, r2, #2
 8002db8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6899      	ldr	r1, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	7e1b      	ldrb	r3, [r3, #24]
 8002dc4:	005a      	lsls	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002de6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002df6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6859      	ldr	r1, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	3b01      	subs	r3, #1
 8002e04:	035a      	lsls	r2, r3, #13
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	e007      	b.n	8002e20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	051a      	lsls	r2, r3, #20
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6899      	ldr	r1, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e62:	025a      	lsls	r2, r3, #9
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6899      	ldr	r1, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	029a      	lsls	r2, r3, #10
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	609a      	str	r2, [r3, #8]
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	40012300 	.word	0x40012300
 8002ea0:	0f000001 	.word	0x0f000001

08002ea4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d13c      	bne.n	8002f38 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d12b      	bne.n	8002f30 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d127      	bne.n	8002f30 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d006      	beq.n	8002efc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d119      	bne.n	8002f30 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0220 	bic.w	r2, r2, #32
 8002f0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f043 0201 	orr.w	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7ff fd7b 	bl	8002a2c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f36:	e00e      	b.n	8002f56 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f7ff fd85 	bl	8002a54 <HAL_ADC_ErrorCallback>
}
 8002f4a:	e004      	b.n	8002f56 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	4798      	blx	r3
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f7ff fd67 	bl	8002a40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2240      	movs	r2, #64	; 0x40
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	f043 0204 	orr.w	r2, r3, #4
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7ff fd5a 	bl	8002a54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0ed      	b.n	8003196 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fe fcde 	bl	8001988 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fdc:	f7ff fba2 	bl	8002724 <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002fe2:	e012      	b.n	800300a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fe4:	f7ff fb9e 	bl	8002724 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b0a      	cmp	r3, #10
 8002ff0:	d90b      	bls.n	800300a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2205      	movs	r2, #5
 8003002:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0c5      	b.n	8003196 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0e5      	beq.n	8002fe4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0202 	bic.w	r2, r2, #2
 8003026:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003028:	f7ff fb7c 	bl	8002724 <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800302e:	e012      	b.n	8003056 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003030:	f7ff fb78 	bl	8002724 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b0a      	cmp	r3, #10
 800303c:	d90b      	bls.n	8003056 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2205      	movs	r2, #5
 800304e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e09f      	b.n	8003196 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e5      	bne.n	8003030 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	7e1b      	ldrb	r3, [r3, #24]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d108      	bne.n	800307e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e007      	b.n	800308e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800308c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7e5b      	ldrb	r3, [r3, #25]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d108      	bne.n	80030a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	e007      	b.n	80030b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	7e9b      	ldrb	r3, [r3, #26]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d108      	bne.n	80030d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0220 	orr.w	r2, r2, #32
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e007      	b.n	80030e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0220 	bic.w	r2, r2, #32
 80030e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	7edb      	ldrb	r3, [r3, #27]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d108      	bne.n	80030fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0210 	bic.w	r2, r2, #16
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	e007      	b.n	800310c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0210 	orr.w	r2, r2, #16
 800310a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	7f1b      	ldrb	r3, [r3, #28]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d108      	bne.n	8003126 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0208 	orr.w	r2, r2, #8
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e007      	b.n	8003136 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0208 	bic.w	r2, r2, #8
 8003134:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	7f5b      	ldrb	r3, [r3, #29]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d108      	bne.n	8003150 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0204 	orr.w	r2, r2, #4
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e007      	b.n	8003160 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0204 	bic.w	r2, r2, #4
 800315e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	ea42 0103 	orr.w	r1, r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	1e5a      	subs	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80031b8:	7cfb      	ldrb	r3, [r7, #19]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d003      	beq.n	80031c6 <HAL_CAN_ConfigFilter+0x26>
 80031be:	7cfb      	ldrb	r3, [r7, #19]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	f040 80be 	bne.w	8003342 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80031c6:	4b65      	ldr	r3, [pc, #404]	; (800335c <HAL_CAN_ConfigFilter+0x1bc>)
 80031c8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031d0:	f043 0201 	orr.w	r2, r3, #1
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	431a      	orrs	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2201      	movs	r2, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	43db      	mvns	r3, r3
 8003218:	401a      	ands	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d123      	bne.n	8003270 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	43db      	mvns	r3, r3
 8003232:	401a      	ands	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800324a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	3248      	adds	r2, #72	; 0x48
 8003250:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003264:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003266:	6979      	ldr	r1, [r7, #20]
 8003268:	3348      	adds	r3, #72	; 0x48
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	440b      	add	r3, r1
 800326e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d122      	bne.n	80032be <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	431a      	orrs	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003298:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	3248      	adds	r2, #72	; 0x48
 800329e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032b4:	6979      	ldr	r1, [r7, #20]
 80032b6:	3348      	adds	r3, #72	; 0x48
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	401a      	ands	r2, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80032d8:	e007      	b.n	80032ea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	401a      	ands	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003304:	e007      	b.n	8003316 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	431a      	orrs	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d107      	bne.n	800332e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	431a      	orrs	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003334:	f023 0201 	bic.w	r2, r3, #1
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e006      	b.n	8003350 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
  }
}
 8003350:	4618      	mov	r0, r3
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	40006400 	.word	0x40006400

08003360 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d12e      	bne.n	80033d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800338c:	f7ff f9ca 	bl	8002724 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003392:	e012      	b.n	80033ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003394:	f7ff f9c6 	bl	8002724 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b0a      	cmp	r3, #10
 80033a0:	d90b      	bls.n	80033ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2205      	movs	r2, #5
 80033b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e012      	b.n	80033e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e006      	b.n	80033e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003406:	7ffb      	ldrb	r3, [r7, #31]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d003      	beq.n	8003414 <HAL_CAN_AddTxMessage+0x2c>
 800340c:	7ffb      	ldrb	r3, [r7, #31]
 800340e:	2b02      	cmp	r3, #2
 8003410:	f040 80b8 	bne.w	8003584 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80a0 	beq.w	8003574 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	0e1b      	lsrs	r3, r3, #24
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d907      	bls.n	8003454 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e09e      	b.n	8003592 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003454:	2201      	movs	r2, #1
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	409a      	lsls	r2, r3
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10d      	bne.n	8003482 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003470:	68f9      	ldr	r1, [r7, #12]
 8003472:	6809      	ldr	r1, [r1, #0]
 8003474:	431a      	orrs	r2, r3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	3318      	adds	r3, #24
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	440b      	add	r3, r1
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	e00f      	b.n	80034a2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800348c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003492:	68f9      	ldr	r1, [r7, #12]
 8003494:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003496:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3318      	adds	r3, #24
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	440b      	add	r3, r1
 80034a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6819      	ldr	r1, [r3, #0]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	3318      	adds	r3, #24
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	440b      	add	r3, r1
 80034b2:	3304      	adds	r3, #4
 80034b4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	7d1b      	ldrb	r3, [r3, #20]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d111      	bne.n	80034e2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	3318      	adds	r3, #24
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	4413      	add	r3, r2
 80034ca:	3304      	adds	r3, #4
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	6811      	ldr	r1, [r2, #0]
 80034d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3318      	adds	r3, #24
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	440b      	add	r3, r1
 80034de:	3304      	adds	r3, #4
 80034e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3307      	adds	r3, #7
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	061a      	lsls	r2, r3, #24
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3306      	adds	r3, #6
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	041b      	lsls	r3, r3, #16
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3305      	adds	r3, #5
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	4313      	orrs	r3, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	3204      	adds	r2, #4
 8003502:	7812      	ldrb	r2, [r2, #0]
 8003504:	4610      	mov	r0, r2
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	6811      	ldr	r1, [r2, #0]
 800350a:	ea43 0200 	orr.w	r2, r3, r0
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	440b      	add	r3, r1
 8003514:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003518:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3303      	adds	r3, #3
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	061a      	lsls	r2, r3, #24
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3302      	adds	r3, #2
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	041b      	lsls	r3, r3, #16
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3301      	adds	r3, #1
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	4313      	orrs	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	7812      	ldrb	r2, [r2, #0]
 800353a:	4610      	mov	r0, r2
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	6811      	ldr	r1, [r2, #0]
 8003540:	ea43 0200 	orr.w	r2, r3, r0
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	440b      	add	r3, r1
 800354a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800354e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3318      	adds	r3, #24
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	4413      	add	r3, r2
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	6811      	ldr	r1, [r2, #0]
 8003562:	f043 0201 	orr.w	r2, r3, #1
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3318      	adds	r3, #24
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	440b      	add	r3, r1
 800356e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e00e      	b.n	8003592 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e006      	b.n	8003592 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
  }
}
 8003592:	4618      	mov	r0, r3
 8003594:	3724      	adds	r7, #36	; 0x24
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800359e:	b480      	push	{r7}
 80035a0:	b085      	sub	sp, #20
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035b0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80035b2:	7afb      	ldrb	r3, [r7, #11]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d002      	beq.n	80035be <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80035b8:	7afb      	ldrb	r3, [r7, #11]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d11d      	bne.n	80035fa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	3301      	adds	r3, #1
 80035d0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	3301      	adds	r3, #1
 80035e4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3301      	adds	r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80035fa:	68fb      	ldr	r3, [r7, #12]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800361c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d003      	beq.n	800362c <HAL_CAN_GetRxMessage+0x24>
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	2b02      	cmp	r3, #2
 8003628:	f040 80f3 	bne.w	8003812 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10e      	bne.n	8003650 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d116      	bne.n	800366e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0e7      	b.n	8003820 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d107      	bne.n	800366e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e0d8      	b.n	8003820 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	331b      	adds	r3, #27
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	4413      	add	r3, r2
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0204 	and.w	r2, r3, #4
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10c      	bne.n	80036a6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	331b      	adds	r3, #27
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	4413      	add	r3, r2
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	0d5b      	lsrs	r3, r3, #21
 800369c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e00b      	b.n	80036be <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	331b      	adds	r3, #27
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	4413      	add	r3, r2
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	08db      	lsrs	r3, r3, #3
 80036b6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	331b      	adds	r3, #27
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	4413      	add	r3, r2
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0202 	and.w	r2, r3, #2
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	331b      	adds	r3, #27
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	4413      	add	r3, r2
 80036e0:	3304      	adds	r3, #4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 020f 	and.w	r2, r3, #15
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	331b      	adds	r3, #27
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	4413      	add	r3, r2
 80036f8:	3304      	adds	r3, #4
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	331b      	adds	r3, #27
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	4413      	add	r3, r2
 8003710:	3304      	adds	r3, #4
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	4413      	add	r3, r2
 8003726:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	4413      	add	r3, r2
 800373c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	0a1a      	lsrs	r2, r3, #8
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	4413      	add	r3, r2
 8003756:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	0c1a      	lsrs	r2, r3, #16
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	3302      	adds	r3, #2
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	4413      	add	r3, r2
 8003770:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	0e1a      	lsrs	r2, r3, #24
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	3303      	adds	r3, #3
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	4413      	add	r3, r2
 800378a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	3304      	adds	r3, #4
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	0a1a      	lsrs	r2, r3, #8
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	3305      	adds	r3, #5
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	0c1a      	lsrs	r2, r3, #16
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	3306      	adds	r3, #6
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	0e1a      	lsrs	r2, r3, #24
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	3307      	adds	r3, #7
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d108      	bne.n	80037fe <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0220 	orr.w	r2, r2, #32
 80037fa:	60da      	str	r2, [r3, #12]
 80037fc:	e007      	b.n	800380e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0220 	orr.w	r2, r2, #32
 800380c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	e006      	b.n	8003820 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
  }
}
 8003820:	4618      	mov	r0, r3
 8003822:	371c      	adds	r7, #28
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800383c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d002      	beq.n	800384a <HAL_CAN_ActivateNotification+0x1e>
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d109      	bne.n	800385e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6959      	ldr	r1, [r3, #20]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	e006      	b.n	800386c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003880:	2300      	movs	r3, #0
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d07c      	beq.n	80039b8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d023      	beq.n	8003910 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2201      	movs	r2, #1
 80038ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f983 	bl	8003be6 <HAL_CAN_TxMailbox0CompleteCallback>
 80038e0:	e016      	b.n	8003910 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d004      	beq.n	80038f6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
 80038f4:	e00c      	b.n	8003910 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d004      	beq.n	800390a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
 8003908:	e002      	b.n	8003910 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f989 	bl	8003c22 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d024      	beq.n	8003964 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003922:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f963 	bl	8003bfa <HAL_CAN_TxMailbox1CompleteCallback>
 8003934:	e016      	b.n	8003964 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d004      	beq.n	800394a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
 8003948:	e00c      	b.n	8003964 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
 800395c:	e002      	b.n	8003964 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f969 	bl	8003c36 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d024      	beq.n	80039b8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003976:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f943 	bl	8003c0e <HAL_CAN_TxMailbox2CompleteCallback>
 8003988:	e016      	b.n	80039b8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
 800399c:	e00c      	b.n	80039b8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
 80039b0:	e002      	b.n	80039b8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f949 	bl	8003c4a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2210      	movs	r2, #16
 80039da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d006      	beq.n	80039fe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2208      	movs	r2, #8
 80039f6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f930 	bl	8003c5e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d009      	beq.n	8003a1c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fd fc3a 	bl	8001290 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00c      	beq.n	8003a40 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d006      	beq.n	8003a62 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2208      	movs	r2, #8
 8003a5a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f912 	bl	8003c86 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d009      	beq.n	8003a80 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f8f9 	bl	8003c72 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d006      	beq.n	8003aa2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2210      	movs	r2, #16
 8003a9a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f8fc 	bl	8003c9a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00b      	beq.n	8003ac4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d006      	beq.n	8003ac4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2208      	movs	r2, #8
 8003abc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f8f5 	bl	8003cae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d07b      	beq.n	8003bc6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d072      	beq.n	8003bbe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d008      	beq.n	8003b10 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	f043 0302 	orr.w	r3, r3, #2
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	f043 0304 	orr.w	r3, r3, #4
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d043      	beq.n	8003bbe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d03e      	beq.n	8003bbe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b46:	2b60      	cmp	r3, #96	; 0x60
 8003b48:	d02b      	beq.n	8003ba2 <HAL_CAN_IRQHandler+0x32a>
 8003b4a:	2b60      	cmp	r3, #96	; 0x60
 8003b4c:	d82e      	bhi.n	8003bac <HAL_CAN_IRQHandler+0x334>
 8003b4e:	2b50      	cmp	r3, #80	; 0x50
 8003b50:	d022      	beq.n	8003b98 <HAL_CAN_IRQHandler+0x320>
 8003b52:	2b50      	cmp	r3, #80	; 0x50
 8003b54:	d82a      	bhi.n	8003bac <HAL_CAN_IRQHandler+0x334>
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d019      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x316>
 8003b5a:	2b40      	cmp	r3, #64	; 0x40
 8003b5c:	d826      	bhi.n	8003bac <HAL_CAN_IRQHandler+0x334>
 8003b5e:	2b30      	cmp	r3, #48	; 0x30
 8003b60:	d010      	beq.n	8003b84 <HAL_CAN_IRQHandler+0x30c>
 8003b62:	2b30      	cmp	r3, #48	; 0x30
 8003b64:	d822      	bhi.n	8003bac <HAL_CAN_IRQHandler+0x334>
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d002      	beq.n	8003b70 <HAL_CAN_IRQHandler+0x2f8>
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	d005      	beq.n	8003b7a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b6e:	e01d      	b.n	8003bac <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	f043 0308 	orr.w	r3, r3, #8
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b78:	e019      	b.n	8003bae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	f043 0310 	orr.w	r3, r3, #16
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b82:	e014      	b.n	8003bae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	f043 0320 	orr.w	r3, r3, #32
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b8c:	e00f      	b.n	8003bae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b96:	e00a      	b.n	8003bae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ba0:	e005      	b.n	8003bae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003baa:	e000      	b.n	8003bae <HAL_CAN_IRQHandler+0x336>
            break;
 8003bac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003bbc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f872 	bl	8003cc2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003bde:	bf00      	nop
 8003be0:	3728      	adds	r7, #40	; 0x28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <__NVIC_SetPriorityGrouping>:
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <__NVIC_SetPriorityGrouping+0x44>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d0a:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <__NVIC_SetPriorityGrouping+0x44>)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	60d3      	str	r3, [r2, #12]
}
 8003d10:	bf00      	nop
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <__NVIC_GetPriorityGrouping>:
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <__NVIC_GetPriorityGrouping+0x18>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	f003 0307 	and.w	r3, r3, #7
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_EnableIRQ>:
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	db0b      	blt.n	8003d66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	f003 021f 	and.w	r2, r3, #31
 8003d54:	4907      	ldr	r1, [pc, #28]	; (8003d74 <__NVIC_EnableIRQ+0x38>)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	e000e100 	.word	0xe000e100

08003d78 <__NVIC_SetPriority>:
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	db0a      	blt.n	8003da2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	490c      	ldr	r1, [pc, #48]	; (8003dc4 <__NVIC_SetPriority+0x4c>)
 8003d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d96:	0112      	lsls	r2, r2, #4
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003da0:	e00a      	b.n	8003db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	4908      	ldr	r1, [pc, #32]	; (8003dc8 <__NVIC_SetPriority+0x50>)
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	3b04      	subs	r3, #4
 8003db0:	0112      	lsls	r2, r2, #4
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	440b      	add	r3, r1
 8003db6:	761a      	strb	r2, [r3, #24]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000e100 	.word	0xe000e100
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <NVIC_EncodePriority>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	; 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f1c3 0307 	rsb	r3, r3, #7
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	bf28      	it	cs
 8003dea:	2304      	movcs	r3, #4
 8003dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d902      	bls.n	8003dfc <NVIC_EncodePriority+0x30>
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3b03      	subs	r3, #3
 8003dfa:	e000      	b.n	8003dfe <NVIC_EncodePriority+0x32>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	401a      	ands	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e14:	f04f 31ff 	mov.w	r1, #4294967295
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	43d9      	mvns	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e24:	4313      	orrs	r3, r2
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3724      	adds	r7, #36	; 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <SysTick_Config>:
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e44:	d301      	bcc.n	8003e4a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003e46:	2301      	movs	r3, #1
 8003e48:	e00f      	b.n	8003e6a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <SysTick_Config+0x40>)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e52:	210f      	movs	r1, #15
 8003e54:	f04f 30ff 	mov.w	r0, #4294967295
 8003e58:	f7ff ff8e 	bl	8003d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <SysTick_Config+0x40>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e62:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <SysTick_Config+0x40>)
 8003e64:	2207      	movs	r2, #7
 8003e66:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	e000e010 	.word	0xe000e010

08003e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff ff29 	bl	8003cd8 <__NVIC_SetPriorityGrouping>
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	4603      	mov	r3, r0
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ea0:	f7ff ff3e 	bl	8003d20 <__NVIC_GetPriorityGrouping>
 8003ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	6978      	ldr	r0, [r7, #20]
 8003eac:	f7ff ff8e 	bl	8003dcc <NVIC_EncodePriority>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ff5d 	bl	8003d78 <__NVIC_SetPriority>
}
 8003ebe:	bf00      	nop
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	4603      	mov	r3, r0
 8003ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff31 	bl	8003d3c <__NVIC_EnableIRQ>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff ffa2 	bl	8003e34 <SysTick_Config>
 8003ef0:	4603      	mov	r3, r0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003efe:	f7fd fa81 	bl	8001404 <HAL_SYSTICK_Callback>
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e00e      	b.n	8003f36 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	795b      	ldrb	r3, [r3, #5]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d105      	bne.n	8003f2e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7fd fda7 	bl	8001a7c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f4c:	f7fe fbea 	bl	8002724 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e099      	b.n	8004090 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0201 	bic.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f7c:	e00f      	b.n	8003f9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f7e:	f7fe fbd1 	bl	8002724 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b05      	cmp	r3, #5
 8003f8a:	d908      	bls.n	8003f9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2203      	movs	r2, #3
 8003f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e078      	b.n	8004090 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e8      	bne.n	8003f7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4b38      	ldr	r3, [pc, #224]	; (8004098 <HAL_DMA_Init+0x158>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fe2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d107      	bne.n	8004008 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	4313      	orrs	r3, r2
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f023 0307 	bic.w	r3, r3, #7
 800401e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	2b04      	cmp	r3, #4
 8004030:	d117      	bne.n	8004062 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00e      	beq.n	8004062 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fa6f 	bl	8004528 <DMA_CheckFifoParam>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2240      	movs	r2, #64	; 0x40
 8004054:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800405e:	2301      	movs	r3, #1
 8004060:	e016      	b.n	8004090 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa26 	bl	80044bc <DMA_CalcBaseAndBitshift>
 8004070:	4603      	mov	r3, r0
 8004072:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004078:	223f      	movs	r2, #63	; 0x3f
 800407a:	409a      	lsls	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	f010803f 	.word	0xf010803f

0800409c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_DMA_Start_IT+0x26>
 80040be:	2302      	movs	r3, #2
 80040c0:	e040      	b.n	8004144 <HAL_DMA_Start_IT+0xa8>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d12f      	bne.n	8004136 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68b9      	ldr	r1, [r7, #8]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f9b8 	bl	8004460 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f4:	223f      	movs	r2, #63	; 0x3f
 80040f6:	409a      	lsls	r2, r3
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0216 	orr.w	r2, r2, #22
 800410a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0208 	orr.w	r2, r2, #8
 8004122:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e005      	b.n	8004142 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800413e:	2302      	movs	r3, #2
 8004140:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004142:	7dfb      	ldrb	r3, [r7, #23]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004158:	4b8e      	ldr	r3, [pc, #568]	; (8004394 <HAL_DMA_IRQHandler+0x248>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a8e      	ldr	r2, [pc, #568]	; (8004398 <HAL_DMA_IRQHandler+0x24c>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	0a9b      	lsrs	r3, r3, #10
 8004164:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004176:	2208      	movs	r2, #8
 8004178:	409a      	lsls	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4013      	ands	r3, r2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d01a      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d013      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0204 	bic.w	r2, r2, #4
 800419e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	2208      	movs	r2, #8
 80041a6:	409a      	lsls	r2, r3
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f043 0201 	orr.w	r2, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041bc:	2201      	movs	r2, #1
 80041be:	409a      	lsls	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d012      	beq.n	80041ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00b      	beq.n	80041ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041da:	2201      	movs	r2, #1
 80041dc:	409a      	lsls	r2, r3
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	f043 0202 	orr.w	r2, r3, #2
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f2:	2204      	movs	r2, #4
 80041f4:	409a      	lsls	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d012      	beq.n	8004224 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00b      	beq.n	8004224 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	2204      	movs	r2, #4
 8004212:	409a      	lsls	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	f043 0204 	orr.w	r2, r3, #4
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004228:	2210      	movs	r2, #16
 800422a:	409a      	lsls	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d043      	beq.n	80042bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d03c      	beq.n	80042bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	2210      	movs	r2, #16
 8004248:	409a      	lsls	r2, r3
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d018      	beq.n	800428e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d108      	bne.n	800427c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d024      	beq.n	80042bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
 800427a:	e01f      	b.n	80042bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01b      	beq.n	80042bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
 800428c:	e016      	b.n	80042bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d107      	bne.n	80042ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0208 	bic.w	r2, r2, #8
 80042aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c0:	2220      	movs	r2, #32
 80042c2:	409a      	lsls	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 808f 	beq.w	80043ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8087 	beq.w	80043ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	2220      	movs	r2, #32
 80042e4:	409a      	lsls	r2, r3
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b05      	cmp	r3, #5
 80042f4:	d136      	bne.n	8004364 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0216 	bic.w	r2, r2, #22
 8004304:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004314:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d103      	bne.n	8004326 <HAL_DMA_IRQHandler+0x1da>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0208 	bic.w	r2, r2, #8
 8004334:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433a:	223f      	movs	r2, #63	; 0x3f
 800433c:	409a      	lsls	r2, r3
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004356:	2b00      	cmp	r3, #0
 8004358:	d07e      	beq.n	8004458 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	4798      	blx	r3
        }
        return;
 8004362:	e079      	b.n	8004458 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d01d      	beq.n	80043ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10d      	bne.n	800439c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	2b00      	cmp	r3, #0
 8004386:	d031      	beq.n	80043ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4798      	blx	r3
 8004390:	e02c      	b.n	80043ec <HAL_DMA_IRQHandler+0x2a0>
 8004392:	bf00      	nop
 8004394:	20000010 	.word	0x20000010
 8004398:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d023      	beq.n	80043ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
 80043ac:	e01e      	b.n	80043ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10f      	bne.n	80043dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0210 	bic.w	r2, r2, #16
 80043ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d032      	beq.n	800445a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d022      	beq.n	8004446 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2205      	movs	r2, #5
 8004404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0201 	bic.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	3301      	adds	r3, #1
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	429a      	cmp	r2, r3
 8004422:	d307      	bcc.n	8004434 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f2      	bne.n	8004418 <HAL_DMA_IRQHandler+0x2cc>
 8004432:	e000      	b.n	8004436 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004434:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	4798      	blx	r3
 8004456:	e000      	b.n	800445a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004458:	bf00      	nop
    }
  }
}
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800447c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	d108      	bne.n	80044a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800449e:	e007      	b.n	80044b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	60da      	str	r2, [r3, #12]
}
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	3b10      	subs	r3, #16
 80044cc:	4a14      	ldr	r2, [pc, #80]	; (8004520 <DMA_CalcBaseAndBitshift+0x64>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044d6:	4a13      	ldr	r2, [pc, #76]	; (8004524 <DMA_CalcBaseAndBitshift+0x68>)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d909      	bls.n	80044fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044f2:	f023 0303 	bic.w	r3, r3, #3
 80044f6:	1d1a      	adds	r2, r3, #4
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	659a      	str	r2, [r3, #88]	; 0x58
 80044fc:	e007      	b.n	800450e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004506:	f023 0303 	bic.w	r3, r3, #3
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	aaaaaaab 	.word	0xaaaaaaab
 8004524:	08006df8 	.word	0x08006df8

08004528 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d11f      	bne.n	8004582 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b03      	cmp	r3, #3
 8004546:	d856      	bhi.n	80045f6 <DMA_CheckFifoParam+0xce>
 8004548:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <DMA_CheckFifoParam+0x28>)
 800454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454e:	bf00      	nop
 8004550:	08004561 	.word	0x08004561
 8004554:	08004573 	.word	0x08004573
 8004558:	08004561 	.word	0x08004561
 800455c:	080045f7 	.word	0x080045f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d046      	beq.n	80045fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004570:	e043      	b.n	80045fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800457a:	d140      	bne.n	80045fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004580:	e03d      	b.n	80045fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458a:	d121      	bne.n	80045d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b03      	cmp	r3, #3
 8004590:	d837      	bhi.n	8004602 <DMA_CheckFifoParam+0xda>
 8004592:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <DMA_CheckFifoParam+0x70>)
 8004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004598:	080045a9 	.word	0x080045a9
 800459c:	080045af 	.word	0x080045af
 80045a0:	080045a9 	.word	0x080045a9
 80045a4:	080045c1 	.word	0x080045c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
      break;
 80045ac:	e030      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d025      	beq.n	8004606 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045be:	e022      	b.n	8004606 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045c8:	d11f      	bne.n	800460a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045ce:	e01c      	b.n	800460a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d903      	bls.n	80045de <DMA_CheckFifoParam+0xb6>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d003      	beq.n	80045e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045dc:	e018      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
      break;
 80045e2:	e015      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00e      	beq.n	800460e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
      break;
 80045f4:	e00b      	b.n	800460e <DMA_CheckFifoParam+0xe6>
      break;
 80045f6:	bf00      	nop
 80045f8:	e00a      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      break;
 80045fa:	bf00      	nop
 80045fc:	e008      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      break;
 80045fe:	bf00      	nop
 8004600:	e006      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      break;
 8004602:	bf00      	nop
 8004604:	e004      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      break;
 8004606:	bf00      	nop
 8004608:	e002      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      break;   
 800460a:	bf00      	nop
 800460c:	e000      	b.n	8004610 <DMA_CheckFifoParam+0xe8>
      break;
 800460e:	bf00      	nop
    }
  } 
  
  return status; 
 8004610:	7bfb      	ldrb	r3, [r7, #15]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop

08004620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004620:	b480      	push	{r7}
 8004622:	b089      	sub	sp, #36	; 0x24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800462e:	2300      	movs	r3, #0
 8004630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004632:	2300      	movs	r3, #0
 8004634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
 800463a:	e16b      	b.n	8004914 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800463c:	2201      	movs	r2, #1
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4013      	ands	r3, r2
 800464e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	429a      	cmp	r2, r3
 8004656:	f040 815a 	bne.w	800490e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b01      	cmp	r3, #1
 8004664:	d005      	beq.n	8004672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800466e:	2b02      	cmp	r3, #2
 8004670:	d130      	bne.n	80046d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	2203      	movs	r2, #3
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	43db      	mvns	r3, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4013      	ands	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046a8:	2201      	movs	r2, #1
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	f003 0201 	and.w	r2, r3, #1
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d017      	beq.n	8004710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	2203      	movs	r2, #3
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4013      	ands	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d123      	bne.n	8004764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	08da      	lsrs	r2, r3, #3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3208      	adds	r2, #8
 8004724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	220f      	movs	r2, #15
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	08da      	lsrs	r2, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3208      	adds	r2, #8
 800475e:	69b9      	ldr	r1, [r7, #24]
 8004760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	2203      	movs	r2, #3
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4013      	ands	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 0203 	and.w	r2, r3, #3
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80b4 	beq.w	800490e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	4b60      	ldr	r3, [pc, #384]	; (800492c <HAL_GPIO_Init+0x30c>)
 80047ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ae:	4a5f      	ldr	r2, [pc, #380]	; (800492c <HAL_GPIO_Init+0x30c>)
 80047b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047b4:	6453      	str	r3, [r2, #68]	; 0x44
 80047b6:	4b5d      	ldr	r3, [pc, #372]	; (800492c <HAL_GPIO_Init+0x30c>)
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047c2:	4a5b      	ldr	r2, [pc, #364]	; (8004930 <HAL_GPIO_Init+0x310>)
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	3302      	adds	r3, #2
 80047ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	220f      	movs	r2, #15
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43db      	mvns	r3, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4013      	ands	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a52      	ldr	r2, [pc, #328]	; (8004934 <HAL_GPIO_Init+0x314>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d02b      	beq.n	8004846 <HAL_GPIO_Init+0x226>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a51      	ldr	r2, [pc, #324]	; (8004938 <HAL_GPIO_Init+0x318>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d025      	beq.n	8004842 <HAL_GPIO_Init+0x222>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a50      	ldr	r2, [pc, #320]	; (800493c <HAL_GPIO_Init+0x31c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01f      	beq.n	800483e <HAL_GPIO_Init+0x21e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a4f      	ldr	r2, [pc, #316]	; (8004940 <HAL_GPIO_Init+0x320>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d019      	beq.n	800483a <HAL_GPIO_Init+0x21a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a4e      	ldr	r2, [pc, #312]	; (8004944 <HAL_GPIO_Init+0x324>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_GPIO_Init+0x216>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a4d      	ldr	r2, [pc, #308]	; (8004948 <HAL_GPIO_Init+0x328>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00d      	beq.n	8004832 <HAL_GPIO_Init+0x212>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a4c      	ldr	r2, [pc, #304]	; (800494c <HAL_GPIO_Init+0x32c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <HAL_GPIO_Init+0x20e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a4b      	ldr	r2, [pc, #300]	; (8004950 <HAL_GPIO_Init+0x330>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d101      	bne.n	800482a <HAL_GPIO_Init+0x20a>
 8004826:	2307      	movs	r3, #7
 8004828:	e00e      	b.n	8004848 <HAL_GPIO_Init+0x228>
 800482a:	2308      	movs	r3, #8
 800482c:	e00c      	b.n	8004848 <HAL_GPIO_Init+0x228>
 800482e:	2306      	movs	r3, #6
 8004830:	e00a      	b.n	8004848 <HAL_GPIO_Init+0x228>
 8004832:	2305      	movs	r3, #5
 8004834:	e008      	b.n	8004848 <HAL_GPIO_Init+0x228>
 8004836:	2304      	movs	r3, #4
 8004838:	e006      	b.n	8004848 <HAL_GPIO_Init+0x228>
 800483a:	2303      	movs	r3, #3
 800483c:	e004      	b.n	8004848 <HAL_GPIO_Init+0x228>
 800483e:	2302      	movs	r3, #2
 8004840:	e002      	b.n	8004848 <HAL_GPIO_Init+0x228>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_GPIO_Init+0x228>
 8004846:	2300      	movs	r3, #0
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	f002 0203 	and.w	r2, r2, #3
 800484e:	0092      	lsls	r2, r2, #2
 8004850:	4093      	lsls	r3, r2
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4313      	orrs	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004858:	4935      	ldr	r1, [pc, #212]	; (8004930 <HAL_GPIO_Init+0x310>)
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	3302      	adds	r3, #2
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004866:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <HAL_GPIO_Init+0x334>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	43db      	mvns	r3, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800488a:	4a32      	ldr	r2, [pc, #200]	; (8004954 <HAL_GPIO_Init+0x334>)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004890:	4b30      	ldr	r3, [pc, #192]	; (8004954 <HAL_GPIO_Init+0x334>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048b4:	4a27      	ldr	r2, [pc, #156]	; (8004954 <HAL_GPIO_Init+0x334>)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ba:	4b26      	ldr	r3, [pc, #152]	; (8004954 <HAL_GPIO_Init+0x334>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	43db      	mvns	r3, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4013      	ands	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048de:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <HAL_GPIO_Init+0x334>)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048e4:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <HAL_GPIO_Init+0x334>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4013      	ands	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004908:	4a12      	ldr	r2, [pc, #72]	; (8004954 <HAL_GPIO_Init+0x334>)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3301      	adds	r3, #1
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b0f      	cmp	r3, #15
 8004918:	f67f ae90 	bls.w	800463c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800491c:	bf00      	nop
 800491e:	bf00      	nop
 8004920:	3724      	adds	r7, #36	; 0x24
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800
 8004930:	40013800 	.word	0x40013800
 8004934:	40020000 	.word	0x40020000
 8004938:	40020400 	.word	0x40020400
 800493c:	40020800 	.word	0x40020800
 8004940:	40020c00 	.word	0x40020c00
 8004944:	40021000 	.word	0x40021000
 8004948:	40021400 	.word	0x40021400
 800494c:	40021800 	.word	0x40021800
 8004950:	40021c00 	.word	0x40021c00
 8004954:	40013c00 	.word	0x40013c00

08004958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	807b      	strh	r3, [r7, #2]
 8004964:	4613      	mov	r3, r2
 8004966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004968:	787b      	ldrb	r3, [r7, #1]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004974:	e003      	b.n	800497e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004976:	887b      	ldrh	r3, [r7, #2]
 8004978:	041a      	lsls	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	619a      	str	r2, [r3, #24]
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800499c:	887a      	ldrh	r2, [r7, #2]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4013      	ands	r3, r2
 80049a2:	041a      	lsls	r2, r3, #16
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	43d9      	mvns	r1, r3
 80049a8:	887b      	ldrh	r3, [r7, #2]
 80049aa:	400b      	ands	r3, r1
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	619a      	str	r2, [r3, #24]
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c0:	b08f      	sub	sp, #60	; 0x3c
 80049c2:	af0a      	add	r7, sp, #40	; 0x28
 80049c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e10f      	b.n	8004bf0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fd fdc2 	bl	8002574 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2203      	movs	r2, #3
 80049f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 fd25 	bl	800645e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	687e      	ldr	r6, [r7, #4]
 8004a1c:	466d      	mov	r5, sp
 8004a1e:	f106 0410 	add.w	r4, r6, #16
 8004a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a32:	1d33      	adds	r3, r6, #4
 8004a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a36:	6838      	ldr	r0, [r7, #0]
 8004a38:	f001 fcb0 	bl	800639c <USB_CoreInit>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e0d0      	b.n	8004bf0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 fd13 	bl	8006480 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
 8004a5e:	e04a      	b.n	8004af6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a60:	7bfa      	ldrb	r2, [r7, #15]
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	333d      	adds	r3, #61	; 0x3d
 8004a70:	2201      	movs	r2, #1
 8004a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a74:	7bfa      	ldrb	r2, [r7, #15]
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	333c      	adds	r3, #60	; 0x3c
 8004a84:	7bfa      	ldrb	r2, [r7, #15]
 8004a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a88:	7bfa      	ldrb	r2, [r7, #15]
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	b298      	uxth	r0, r3
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	3342      	adds	r3, #66	; 0x42
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	333f      	adds	r3, #63	; 0x3f
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ab4:	7bfa      	ldrb	r2, [r7, #15]
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	3344      	adds	r3, #68	; 0x44
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ac8:	7bfa      	ldrb	r2, [r7, #15]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	3348      	adds	r3, #72	; 0x48
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004adc:	7bfa      	ldrb	r2, [r7, #15]
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	3350      	adds	r3, #80	; 0x50
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	3301      	adds	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]
 8004af6:	7bfa      	ldrb	r2, [r7, #15]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d3af      	bcc.n	8004a60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b00:	2300      	movs	r3, #0
 8004b02:	73fb      	strb	r3, [r7, #15]
 8004b04:	e044      	b.n	8004b90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b06:	7bfa      	ldrb	r2, [r7, #15]
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b1c:	7bfa      	ldrb	r2, [r7, #15]
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b32:	7bfa      	ldrb	r2, [r7, #15]
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b48:	7bfa      	ldrb	r2, [r7, #15]
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b5e:	7bfa      	ldrb	r2, [r7, #15]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b74:	7bfa      	ldrb	r2, [r7, #15]
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
 8004b90:	7bfa      	ldrb	r2, [r7, #15]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d3b5      	bcc.n	8004b06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	687e      	ldr	r6, [r7, #4]
 8004ba2:	466d      	mov	r5, sp
 8004ba4:	f106 0410 	add.w	r4, r6, #16
 8004ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bb8:	1d33      	adds	r3, r6, #4
 8004bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bbc:	6838      	ldr	r0, [r7, #0]
 8004bbe:	f001 fcab 	bl	8006518 <USB_DevInit>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e00d      	b.n	8004bf0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 fe56 	bl	800689a <USB_DevDisconnect>

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e267      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d075      	beq.n	8004d02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c16:	4b88      	ldr	r3, [pc, #544]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d00c      	beq.n	8004c3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c22:	4b85      	ldr	r3, [pc, #532]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d112      	bne.n	8004c54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c2e:	4b82      	ldr	r3, [pc, #520]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c3a:	d10b      	bne.n	8004c54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3c:	4b7e      	ldr	r3, [pc, #504]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d05b      	beq.n	8004d00 <HAL_RCC_OscConfig+0x108>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d157      	bne.n	8004d00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e242      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5c:	d106      	bne.n	8004c6c <HAL_RCC_OscConfig+0x74>
 8004c5e:	4b76      	ldr	r3, [pc, #472]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a75      	ldr	r2, [pc, #468]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e01d      	b.n	8004ca8 <HAL_RCC_OscConfig+0xb0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x98>
 8004c76:	4b70      	ldr	r3, [pc, #448]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a6f      	ldr	r2, [pc, #444]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	4b6d      	ldr	r3, [pc, #436]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a6c      	ldr	r2, [pc, #432]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	e00b      	b.n	8004ca8 <HAL_RCC_OscConfig+0xb0>
 8004c90:	4b69      	ldr	r3, [pc, #420]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a68      	ldr	r2, [pc, #416]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	4b66      	ldr	r3, [pc, #408]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a65      	ldr	r2, [pc, #404]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d013      	beq.n	8004cd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb0:	f7fd fd38 	bl	8002724 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cb8:	f7fd fd34 	bl	8002724 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b64      	cmp	r3, #100	; 0x64
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e207      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	4b5b      	ldr	r3, [pc, #364]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0xc0>
 8004cd6:	e014      	b.n	8004d02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd8:	f7fd fd24 	bl	8002724 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ce0:	f7fd fd20 	bl	8002724 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b64      	cmp	r3, #100	; 0x64
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e1f3      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf2:	4b51      	ldr	r3, [pc, #324]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0xe8>
 8004cfe:	e000      	b.n	8004d02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d063      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d0e:	4b4a      	ldr	r3, [pc, #296]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00b      	beq.n	8004d32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d1a:	4b47      	ldr	r3, [pc, #284]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d11c      	bne.n	8004d60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d26:	4b44      	ldr	r3, [pc, #272]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d116      	bne.n	8004d60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d32:	4b41      	ldr	r3, [pc, #260]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_RCC_OscConfig+0x152>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d001      	beq.n	8004d4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e1c7      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4a:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	4937      	ldr	r1, [pc, #220]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5e:	e03a      	b.n	8004dd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d020      	beq.n	8004daa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d68:	4b34      	ldr	r3, [pc, #208]	; (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6e:	f7fd fcd9 	bl	8002724 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d76:	f7fd fcd5 	bl	8002724 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e1a8      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d88:	4b2b      	ldr	r3, [pc, #172]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d94:	4b28      	ldr	r3, [pc, #160]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	4925      	ldr	r1, [pc, #148]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	600b      	str	r3, [r1, #0]
 8004da8:	e015      	b.n	8004dd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004daa:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <HAL_RCC_OscConfig+0x244>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fd fcb8 	bl	8002724 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004db8:	f7fd fcb4 	bl	8002724 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e187      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dca:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d036      	beq.n	8004e50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d016      	beq.n	8004e18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dea:	4b15      	ldr	r3, [pc, #84]	; (8004e40 <HAL_RCC_OscConfig+0x248>)
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df0:	f7fd fc98 	bl	8002724 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df8:	f7fd fc94 	bl	8002724 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e167      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x200>
 8004e16:	e01b      	b.n	8004e50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCC_OscConfig+0x248>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1e:	f7fd fc81 	bl	8002724 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e24:	e00e      	b.n	8004e44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e26:	f7fd fc7d 	bl	8002724 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d907      	bls.n	8004e44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e150      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	42470000 	.word	0x42470000
 8004e40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e44:	4b88      	ldr	r3, [pc, #544]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1ea      	bne.n	8004e26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8097 	beq.w	8004f8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e62:	4b81      	ldr	r3, [pc, #516]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	4b7d      	ldr	r3, [pc, #500]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	4a7c      	ldr	r2, [pc, #496]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7e:	4b7a      	ldr	r3, [pc, #488]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8e:	4b77      	ldr	r3, [pc, #476]	; (800506c <HAL_RCC_OscConfig+0x474>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d118      	bne.n	8004ecc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e9a:	4b74      	ldr	r3, [pc, #464]	; (800506c <HAL_RCC_OscConfig+0x474>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a73      	ldr	r2, [pc, #460]	; (800506c <HAL_RCC_OscConfig+0x474>)
 8004ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea6:	f7fd fc3d 	bl	8002724 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eae:	f7fd fc39 	bl	8002724 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e10c      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec0:	4b6a      	ldr	r3, [pc, #424]	; (800506c <HAL_RCC_OscConfig+0x474>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d106      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x2ea>
 8004ed4:	4b64      	ldr	r3, [pc, #400]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	4a63      	ldr	r2, [pc, #396]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee0:	e01c      	b.n	8004f1c <HAL_RCC_OscConfig+0x324>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b05      	cmp	r3, #5
 8004ee8:	d10c      	bne.n	8004f04 <HAL_RCC_OscConfig+0x30c>
 8004eea:	4b5f      	ldr	r3, [pc, #380]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eee:	4a5e      	ldr	r2, [pc, #376]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004ef0:	f043 0304 	orr.w	r3, r3, #4
 8004ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef6:	4b5c      	ldr	r3, [pc, #368]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	4a5b      	ldr	r2, [pc, #364]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004efc:	f043 0301 	orr.w	r3, r3, #1
 8004f00:	6713      	str	r3, [r2, #112]	; 0x70
 8004f02:	e00b      	b.n	8004f1c <HAL_RCC_OscConfig+0x324>
 8004f04:	4b58      	ldr	r3, [pc, #352]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f08:	4a57      	ldr	r2, [pc, #348]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f0a:	f023 0301 	bic.w	r3, r3, #1
 8004f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f10:	4b55      	ldr	r3, [pc, #340]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f14:	4a54      	ldr	r2, [pc, #336]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f16:	f023 0304 	bic.w	r3, r3, #4
 8004f1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d015      	beq.n	8004f50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f24:	f7fd fbfe 	bl	8002724 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2a:	e00a      	b.n	8004f42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f2c:	f7fd fbfa 	bl	8002724 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e0cb      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f42:	4b49      	ldr	r3, [pc, #292]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0ee      	beq.n	8004f2c <HAL_RCC_OscConfig+0x334>
 8004f4e:	e014      	b.n	8004f7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f50:	f7fd fbe8 	bl	8002724 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f56:	e00a      	b.n	8004f6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f58:	f7fd fbe4 	bl	8002724 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e0b5      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f6e:	4b3e      	ldr	r3, [pc, #248]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1ee      	bne.n	8004f58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d105      	bne.n	8004f8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f80:	4b39      	ldr	r3, [pc, #228]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	4a38      	ldr	r2, [pc, #224]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 80a1 	beq.w	80050d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f96:	4b34      	ldr	r3, [pc, #208]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d05c      	beq.n	800505c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d141      	bne.n	800502e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004faa:	4b31      	ldr	r3, [pc, #196]	; (8005070 <HAL_RCC_OscConfig+0x478>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb0:	f7fd fbb8 	bl	8002724 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7fd fbb4 	bl	8002724 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e087      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fca:	4b27      	ldr	r3, [pc, #156]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	019b      	lsls	r3, r3, #6
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	041b      	lsls	r3, r3, #16
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	061b      	lsls	r3, r3, #24
 8004ffa:	491b      	ldr	r1, [pc, #108]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005000:	4b1b      	ldr	r3, [pc, #108]	; (8005070 <HAL_RCC_OscConfig+0x478>)
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005006:	f7fd fb8d 	bl	8002724 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800500e:	f7fd fb89 	bl	8002724 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e05c      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005020:	4b11      	ldr	r3, [pc, #68]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x416>
 800502c:	e054      	b.n	80050d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502e:	4b10      	ldr	r3, [pc, #64]	; (8005070 <HAL_RCC_OscConfig+0x478>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005034:	f7fd fb76 	bl	8002724 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503c:	f7fd fb72 	bl	8002724 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e045      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504e:	4b06      	ldr	r3, [pc, #24]	; (8005068 <HAL_RCC_OscConfig+0x470>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x444>
 800505a:	e03d      	b.n	80050d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d107      	bne.n	8005074 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e038      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
 8005068:	40023800 	.word	0x40023800
 800506c:	40007000 	.word	0x40007000
 8005070:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005074:	4b1b      	ldr	r3, [pc, #108]	; (80050e4 <HAL_RCC_OscConfig+0x4ec>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d028      	beq.n	80050d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800508c:	429a      	cmp	r2, r3
 800508e:	d121      	bne.n	80050d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800509a:	429a      	cmp	r2, r3
 800509c:	d11a      	bne.n	80050d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050a4:	4013      	ands	r3, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d111      	bne.n	80050d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	3b01      	subs	r3, #1
 80050be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d107      	bne.n	80050d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d001      	beq.n	80050d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	40023800 	.word	0x40023800

080050e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0cc      	b.n	8005296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050fc:	4b68      	ldr	r3, [pc, #416]	; (80052a0 <HAL_RCC_ClockConfig+0x1b8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d90c      	bls.n	8005124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510a:	4b65      	ldr	r3, [pc, #404]	; (80052a0 <HAL_RCC_ClockConfig+0x1b8>)
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005112:	4b63      	ldr	r3, [pc, #396]	; (80052a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d001      	beq.n	8005124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e0b8      	b.n	8005296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d020      	beq.n	8005172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800513c:	4b59      	ldr	r3, [pc, #356]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	4a58      	ldr	r2, [pc, #352]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005154:	4b53      	ldr	r3, [pc, #332]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	4a52      	ldr	r2, [pc, #328]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800515e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005160:	4b50      	ldr	r3, [pc, #320]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	494d      	ldr	r1, [pc, #308]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d044      	beq.n	8005208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d107      	bne.n	8005196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005186:	4b47      	ldr	r3, [pc, #284]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d119      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e07f      	b.n	8005296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d003      	beq.n	80051a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d107      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a6:	4b3f      	ldr	r3, [pc, #252]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e06f      	b.n	8005296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b6:	4b3b      	ldr	r3, [pc, #236]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e067      	b.n	8005296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051c6:	4b37      	ldr	r3, [pc, #220]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f023 0203 	bic.w	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4934      	ldr	r1, [pc, #208]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051d8:	f7fd faa4 	bl	8002724 <HAL_GetTick>
 80051dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e0:	f7fd faa0 	bl	8002724 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e04f      	b.n	8005296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f6:	4b2b      	ldr	r3, [pc, #172]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 020c 	and.w	r2, r3, #12
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	429a      	cmp	r2, r3
 8005206:	d1eb      	bne.n	80051e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005208:	4b25      	ldr	r3, [pc, #148]	; (80052a0 <HAL_RCC_ClockConfig+0x1b8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d20c      	bcs.n	8005230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005216:	4b22      	ldr	r3, [pc, #136]	; (80052a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800521e:	4b20      	ldr	r3, [pc, #128]	; (80052a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d001      	beq.n	8005230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e032      	b.n	8005296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800523c:	4b19      	ldr	r3, [pc, #100]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	4916      	ldr	r1, [pc, #88]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	4313      	orrs	r3, r2
 800524c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d009      	beq.n	800526e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800525a:	4b12      	ldr	r3, [pc, #72]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	490e      	ldr	r1, [pc, #56]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	4313      	orrs	r3, r2
 800526c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800526e:	f000 f82d 	bl	80052cc <HAL_RCC_GetSysClockFreq>
 8005272:	4602      	mov	r2, r0
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	091b      	lsrs	r3, r3, #4
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	490a      	ldr	r1, [pc, #40]	; (80052a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005280:	5ccb      	ldrb	r3, [r1, r3]
 8005282:	fa22 f303 	lsr.w	r3, r2, r3
 8005286:	4a09      	ldr	r2, [pc, #36]	; (80052ac <HAL_RCC_ClockConfig+0x1c4>)
 8005288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800528a:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_RCC_ClockConfig+0x1c8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f7fd fa04 	bl	800269c <HAL_InitTick>

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40023c00 	.word	0x40023c00
 80052a4:	40023800 	.word	0x40023800
 80052a8:	08006de8 	.word	0x08006de8
 80052ac:	20000010 	.word	0x20000010
 80052b0:	20000014 	.word	0x20000014

080052b4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80052b8:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <HAL_RCC_EnableCSS+0x14>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
}
 80052be:	bf00      	nop
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	4247004c 	.word	0x4247004c

080052cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052d0:	b094      	sub	sp, #80	; 0x50
 80052d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	647b      	str	r3, [r7, #68]	; 0x44
 80052d8:	2300      	movs	r3, #0
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052dc:	2300      	movs	r3, #0
 80052de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052e4:	4b79      	ldr	r3, [pc, #484]	; (80054cc <HAL_RCC_GetSysClockFreq+0x200>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 030c 	and.w	r3, r3, #12
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d00d      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x40>
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	f200 80e1 	bhi.w	80054b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0x34>
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d003      	beq.n	8005306 <HAL_RCC_GetSysClockFreq+0x3a>
 80052fe:	e0db      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005300:	4b73      	ldr	r3, [pc, #460]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005302:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005304:	e0db      	b.n	80054be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005306:	4b73      	ldr	r3, [pc, #460]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005308:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800530a:	e0d8      	b.n	80054be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800530c:	4b6f      	ldr	r3, [pc, #444]	; (80054cc <HAL_RCC_GetSysClockFreq+0x200>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005314:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005316:	4b6d      	ldr	r3, [pc, #436]	; (80054cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d063      	beq.n	80053ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005322:	4b6a      	ldr	r3, [pc, #424]	; (80054cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	099b      	lsrs	r3, r3, #6
 8005328:	2200      	movs	r2, #0
 800532a:	63bb      	str	r3, [r7, #56]	; 0x38
 800532c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005334:	633b      	str	r3, [r7, #48]	; 0x30
 8005336:	2300      	movs	r3, #0
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
 800533a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800533e:	4622      	mov	r2, r4
 8005340:	462b      	mov	r3, r5
 8005342:	f04f 0000 	mov.w	r0, #0
 8005346:	f04f 0100 	mov.w	r1, #0
 800534a:	0159      	lsls	r1, r3, #5
 800534c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005350:	0150      	lsls	r0, r2, #5
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4621      	mov	r1, r4
 8005358:	1a51      	subs	r1, r2, r1
 800535a:	6139      	str	r1, [r7, #16]
 800535c:	4629      	mov	r1, r5
 800535e:	eb63 0301 	sbc.w	r3, r3, r1
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005370:	4659      	mov	r1, fp
 8005372:	018b      	lsls	r3, r1, #6
 8005374:	4651      	mov	r1, sl
 8005376:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800537a:	4651      	mov	r1, sl
 800537c:	018a      	lsls	r2, r1, #6
 800537e:	4651      	mov	r1, sl
 8005380:	ebb2 0801 	subs.w	r8, r2, r1
 8005384:	4659      	mov	r1, fp
 8005386:	eb63 0901 	sbc.w	r9, r3, r1
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800539a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800539e:	4690      	mov	r8, r2
 80053a0:	4699      	mov	r9, r3
 80053a2:	4623      	mov	r3, r4
 80053a4:	eb18 0303 	adds.w	r3, r8, r3
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	462b      	mov	r3, r5
 80053ac:	eb49 0303 	adc.w	r3, r9, r3
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053be:	4629      	mov	r1, r5
 80053c0:	024b      	lsls	r3, r1, #9
 80053c2:	4621      	mov	r1, r4
 80053c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053c8:	4621      	mov	r1, r4
 80053ca:	024a      	lsls	r2, r1, #9
 80053cc:	4610      	mov	r0, r2
 80053ce:	4619      	mov	r1, r3
 80053d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d2:	2200      	movs	r2, #0
 80053d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053dc:	f7fb fbc2 	bl	8000b64 <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4613      	mov	r3, r2
 80053e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e8:	e058      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ea:	4b38      	ldr	r3, [pc, #224]	; (80054cc <HAL_RCC_GetSysClockFreq+0x200>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	099b      	lsrs	r3, r3, #6
 80053f0:	2200      	movs	r2, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	4611      	mov	r1, r2
 80053f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053fa:	623b      	str	r3, [r7, #32]
 80053fc:	2300      	movs	r3, #0
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005400:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005404:	4642      	mov	r2, r8
 8005406:	464b      	mov	r3, r9
 8005408:	f04f 0000 	mov.w	r0, #0
 800540c:	f04f 0100 	mov.w	r1, #0
 8005410:	0159      	lsls	r1, r3, #5
 8005412:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005416:	0150      	lsls	r0, r2, #5
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4641      	mov	r1, r8
 800541e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005422:	4649      	mov	r1, r9
 8005424:	eb63 0b01 	sbc.w	fp, r3, r1
 8005428:	f04f 0200 	mov.w	r2, #0
 800542c:	f04f 0300 	mov.w	r3, #0
 8005430:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005434:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005438:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800543c:	ebb2 040a 	subs.w	r4, r2, sl
 8005440:	eb63 050b 	sbc.w	r5, r3, fp
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	00eb      	lsls	r3, r5, #3
 800544e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005452:	00e2      	lsls	r2, r4, #3
 8005454:	4614      	mov	r4, r2
 8005456:	461d      	mov	r5, r3
 8005458:	4643      	mov	r3, r8
 800545a:	18e3      	adds	r3, r4, r3
 800545c:	603b      	str	r3, [r7, #0]
 800545e:	464b      	mov	r3, r9
 8005460:	eb45 0303 	adc.w	r3, r5, r3
 8005464:	607b      	str	r3, [r7, #4]
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	f04f 0300 	mov.w	r3, #0
 800546e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005472:	4629      	mov	r1, r5
 8005474:	028b      	lsls	r3, r1, #10
 8005476:	4621      	mov	r1, r4
 8005478:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800547c:	4621      	mov	r1, r4
 800547e:	028a      	lsls	r2, r1, #10
 8005480:	4610      	mov	r0, r2
 8005482:	4619      	mov	r1, r3
 8005484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005486:	2200      	movs	r2, #0
 8005488:	61bb      	str	r3, [r7, #24]
 800548a:	61fa      	str	r2, [r7, #28]
 800548c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005490:	f7fb fb68 	bl	8000b64 <__aeabi_uldivmod>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4613      	mov	r3, r2
 800549a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_RCC_GetSysClockFreq+0x200>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	0c1b      	lsrs	r3, r3, #16
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	3301      	adds	r3, #1
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80054ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054b6:	e002      	b.n	80054be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80054ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3750      	adds	r7, #80	; 0x50
 80054c4:	46bd      	mov	sp, r7
 80054c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ca:	bf00      	nop
 80054cc:	40023800 	.word	0x40023800
 80054d0:	00f42400 	.word	0x00f42400
 80054d4:	007a1200 	.word	0x007a1200

080054d8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80054dc:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	2b80      	cmp	r3, #128	; 0x80
 80054e6:	d104      	bne.n	80054f2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80054e8:	f000 f80a 	bl	8005500 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80054ec:	4b03      	ldr	r3, [pc, #12]	; (80054fc <HAL_RCC_NMI_IRQHandler+0x24>)
 80054ee:	2280      	movs	r2, #128	; 0x80
 80054f0:	701a      	strb	r2, [r3, #0]
  }
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800
 80054fc:	4002380e 	.word	0x4002380e

08005500 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b082      	sub	sp, #8
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e07b      	b.n	8005618 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	2b00      	cmp	r3, #0
 8005526:	d108      	bne.n	800553a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005530:	d009      	beq.n	8005546 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	61da      	str	r2, [r3, #28]
 8005538:	e005      	b.n	8005546 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7fc fc23 	bl	8001dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800557c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ca:	ea42 0103 	orr.w	r1, r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	0c1b      	lsrs	r3, r3, #16
 80055e4:	f003 0104 	and.w	r1, r3, #4
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	f003 0210 	and.w	r2, r3, #16
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69da      	ldr	r2, [r3, #28]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005606:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e041      	b.n	80056b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fc feb6 	bl	80023b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3304      	adds	r3, #4
 800565c:	4619      	mov	r1, r3
 800565e:	4610      	mov	r0, r2
 8005660:	f000 fa48 	bl	8005af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e041      	b.n	8005754 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7fc fe19 	bl	800231c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2202      	movs	r2, #2
 80056ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3304      	adds	r3, #4
 80056fa:	4619      	mov	r1, r3
 80056fc:	4610      	mov	r0, r2
 80056fe:	f000 f9f9 	bl	8005af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d109      	bne.n	8005780 <HAL_TIM_PWM_Start+0x24>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	bf14      	ite	ne
 8005778:	2301      	movne	r3, #1
 800577a:	2300      	moveq	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	e022      	b.n	80057c6 <HAL_TIM_PWM_Start+0x6a>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b04      	cmp	r3, #4
 8005784:	d109      	bne.n	800579a <HAL_TIM_PWM_Start+0x3e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b01      	cmp	r3, #1
 8005790:	bf14      	ite	ne
 8005792:	2301      	movne	r3, #1
 8005794:	2300      	moveq	r3, #0
 8005796:	b2db      	uxtb	r3, r3
 8005798:	e015      	b.n	80057c6 <HAL_TIM_PWM_Start+0x6a>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b08      	cmp	r3, #8
 800579e:	d109      	bne.n	80057b4 <HAL_TIM_PWM_Start+0x58>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	bf14      	ite	ne
 80057ac:	2301      	movne	r3, #1
 80057ae:	2300      	moveq	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	e008      	b.n	80057c6 <HAL_TIM_PWM_Start+0x6a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e07c      	b.n	80058c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <HAL_TIM_PWM_Start+0x82>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057dc:	e013      	b.n	8005806 <HAL_TIM_PWM_Start+0xaa>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	d104      	bne.n	80057ee <HAL_TIM_PWM_Start+0x92>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057ec:	e00b      	b.n	8005806 <HAL_TIM_PWM_Start+0xaa>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d104      	bne.n	80057fe <HAL_TIM_PWM_Start+0xa2>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057fc:	e003      	b.n	8005806 <HAL_TIM_PWM_Start+0xaa>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2201      	movs	r2, #1
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fcd0 	bl	80061b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a2d      	ldr	r2, [pc, #180]	; (80058d0 <HAL_TIM_PWM_Start+0x174>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d004      	beq.n	8005828 <HAL_TIM_PWM_Start+0xcc>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a2c      	ldr	r2, [pc, #176]	; (80058d4 <HAL_TIM_PWM_Start+0x178>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d101      	bne.n	800582c <HAL_TIM_PWM_Start+0xd0>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <HAL_TIM_PWM_Start+0xd2>
 800582c:	2300      	movs	r3, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005840:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a22      	ldr	r2, [pc, #136]	; (80058d0 <HAL_TIM_PWM_Start+0x174>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d022      	beq.n	8005892 <HAL_TIM_PWM_Start+0x136>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005854:	d01d      	beq.n	8005892 <HAL_TIM_PWM_Start+0x136>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1f      	ldr	r2, [pc, #124]	; (80058d8 <HAL_TIM_PWM_Start+0x17c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d018      	beq.n	8005892 <HAL_TIM_PWM_Start+0x136>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <HAL_TIM_PWM_Start+0x180>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <HAL_TIM_PWM_Start+0x136>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1c      	ldr	r2, [pc, #112]	; (80058e0 <HAL_TIM_PWM_Start+0x184>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00e      	beq.n	8005892 <HAL_TIM_PWM_Start+0x136>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <HAL_TIM_PWM_Start+0x178>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d009      	beq.n	8005892 <HAL_TIM_PWM_Start+0x136>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a18      	ldr	r2, [pc, #96]	; (80058e4 <HAL_TIM_PWM_Start+0x188>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d004      	beq.n	8005892 <HAL_TIM_PWM_Start+0x136>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a16      	ldr	r2, [pc, #88]	; (80058e8 <HAL_TIM_PWM_Start+0x18c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d111      	bne.n	80058b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b06      	cmp	r3, #6
 80058a2:	d010      	beq.n	80058c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b4:	e007      	b.n	80058c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0201 	orr.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40010000 	.word	0x40010000
 80058d4:	40010400 	.word	0x40010400
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40014000 	.word	0x40014000
 80058e8:	40001800 	.word	0x40001800

080058ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005902:	2b01      	cmp	r3, #1
 8005904:	d101      	bne.n	800590a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005906:	2302      	movs	r3, #2
 8005908:	e0ae      	b.n	8005a68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b0c      	cmp	r3, #12
 8005916:	f200 809f 	bhi.w	8005a58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800591a:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	08005955 	.word	0x08005955
 8005924:	08005a59 	.word	0x08005a59
 8005928:	08005a59 	.word	0x08005a59
 800592c:	08005a59 	.word	0x08005a59
 8005930:	08005995 	.word	0x08005995
 8005934:	08005a59 	.word	0x08005a59
 8005938:	08005a59 	.word	0x08005a59
 800593c:	08005a59 	.word	0x08005a59
 8005940:	080059d7 	.word	0x080059d7
 8005944:	08005a59 	.word	0x08005a59
 8005948:	08005a59 	.word	0x08005a59
 800594c:	08005a59 	.word	0x08005a59
 8005950:	08005a17 	.word	0x08005a17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	4618      	mov	r0, r3
 800595c:	f000 f96a 	bl	8005c34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0208 	orr.w	r2, r2, #8
 800596e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0204 	bic.w	r2, r2, #4
 800597e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6999      	ldr	r1, [r3, #24]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	619a      	str	r2, [r3, #24]
      break;
 8005992:	e064      	b.n	8005a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68b9      	ldr	r1, [r7, #8]
 800599a:	4618      	mov	r0, r3
 800599c:	f000 f9ba 	bl	8005d14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699a      	ldr	r2, [r3, #24]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6999      	ldr	r1, [r3, #24]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	021a      	lsls	r2, r3, #8
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	619a      	str	r2, [r3, #24]
      break;
 80059d4:	e043      	b.n	8005a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68b9      	ldr	r1, [r7, #8]
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fa0f 	bl	8005e00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69da      	ldr	r2, [r3, #28]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0208 	orr.w	r2, r2, #8
 80059f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0204 	bic.w	r2, r2, #4
 8005a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69d9      	ldr	r1, [r3, #28]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	61da      	str	r2, [r3, #28]
      break;
 8005a14:	e023      	b.n	8005a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fa63 	bl	8005ee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69d9      	ldr	r1, [r3, #28]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	021a      	lsls	r2, r3, #8
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	61da      	str	r2, [r3, #28]
      break;
 8005a56:	e002      	b.n	8005a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e031      	b.n	8005aec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fa7a 	bl	8005f94 <TIM_SlaveTimer_SetConfig>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e018      	b.n	8005aec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ac8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ad8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a40      	ldr	r2, [pc, #256]	; (8005c08 <TIM_Base_SetConfig+0x114>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d013      	beq.n	8005b34 <TIM_Base_SetConfig+0x40>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b12:	d00f      	beq.n	8005b34 <TIM_Base_SetConfig+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a3d      	ldr	r2, [pc, #244]	; (8005c0c <TIM_Base_SetConfig+0x118>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00b      	beq.n	8005b34 <TIM_Base_SetConfig+0x40>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a3c      	ldr	r2, [pc, #240]	; (8005c10 <TIM_Base_SetConfig+0x11c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d007      	beq.n	8005b34 <TIM_Base_SetConfig+0x40>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a3b      	ldr	r2, [pc, #236]	; (8005c14 <TIM_Base_SetConfig+0x120>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_Base_SetConfig+0x40>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a3a      	ldr	r2, [pc, #232]	; (8005c18 <TIM_Base_SetConfig+0x124>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d108      	bne.n	8005b46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a2f      	ldr	r2, [pc, #188]	; (8005c08 <TIM_Base_SetConfig+0x114>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d02b      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b54:	d027      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a2c      	ldr	r2, [pc, #176]	; (8005c0c <TIM_Base_SetConfig+0x118>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d023      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a2b      	ldr	r2, [pc, #172]	; (8005c10 <TIM_Base_SetConfig+0x11c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01f      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2a      	ldr	r2, [pc, #168]	; (8005c14 <TIM_Base_SetConfig+0x120>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01b      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a29      	ldr	r2, [pc, #164]	; (8005c18 <TIM_Base_SetConfig+0x124>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d017      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a28      	ldr	r2, [pc, #160]	; (8005c1c <TIM_Base_SetConfig+0x128>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a27      	ldr	r2, [pc, #156]	; (8005c20 <TIM_Base_SetConfig+0x12c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00f      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a26      	ldr	r2, [pc, #152]	; (8005c24 <TIM_Base_SetConfig+0x130>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00b      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a25      	ldr	r2, [pc, #148]	; (8005c28 <TIM_Base_SetConfig+0x134>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d007      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a24      	ldr	r2, [pc, #144]	; (8005c2c <TIM_Base_SetConfig+0x138>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d003      	beq.n	8005ba6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a23      	ldr	r2, [pc, #140]	; (8005c30 <TIM_Base_SetConfig+0x13c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d108      	bne.n	8005bb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a0a      	ldr	r2, [pc, #40]	; (8005c08 <TIM_Base_SetConfig+0x114>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d003      	beq.n	8005bec <TIM_Base_SetConfig+0xf8>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a0c      	ldr	r2, [pc, #48]	; (8005c18 <TIM_Base_SetConfig+0x124>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d103      	bne.n	8005bf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	615a      	str	r2, [r3, #20]
}
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800
 8005c14:	40000c00 	.word	0x40000c00
 8005c18:	40010400 	.word	0x40010400
 8005c1c:	40014000 	.word	0x40014000
 8005c20:	40014400 	.word	0x40014400
 8005c24:	40014800 	.word	0x40014800
 8005c28:	40001800 	.word	0x40001800
 8005c2c:	40001c00 	.word	0x40001c00
 8005c30:	40002000 	.word	0x40002000

08005c34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f023 0201 	bic.w	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f023 0302 	bic.w	r3, r3, #2
 8005c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a20      	ldr	r2, [pc, #128]	; (8005d0c <TIM_OC1_SetConfig+0xd8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <TIM_OC1_SetConfig+0x64>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a1f      	ldr	r2, [pc, #124]	; (8005d10 <TIM_OC1_SetConfig+0xdc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d10c      	bne.n	8005cb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f023 0308 	bic.w	r3, r3, #8
 8005c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f023 0304 	bic.w	r3, r3, #4
 8005cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a15      	ldr	r2, [pc, #84]	; (8005d0c <TIM_OC1_SetConfig+0xd8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d003      	beq.n	8005cc2 <TIM_OC1_SetConfig+0x8e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a14      	ldr	r2, [pc, #80]	; (8005d10 <TIM_OC1_SetConfig+0xdc>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d111      	bne.n	8005ce6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	621a      	str	r2, [r3, #32]
}
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40010000 	.word	0x40010000
 8005d10:	40010400 	.word	0x40010400

08005d14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f023 0210 	bic.w	r2, r3, #16
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f023 0320 	bic.w	r3, r3, #32
 8005d5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a22      	ldr	r2, [pc, #136]	; (8005df8 <TIM_OC2_SetConfig+0xe4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_OC2_SetConfig+0x68>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a21      	ldr	r2, [pc, #132]	; (8005dfc <TIM_OC2_SetConfig+0xe8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d10d      	bne.n	8005d98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	011b      	lsls	r3, r3, #4
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a17      	ldr	r2, [pc, #92]	; (8005df8 <TIM_OC2_SetConfig+0xe4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d003      	beq.n	8005da8 <TIM_OC2_SetConfig+0x94>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a16      	ldr	r2, [pc, #88]	; (8005dfc <TIM_OC2_SetConfig+0xe8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d113      	bne.n	8005dd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40010000 	.word	0x40010000
 8005dfc:	40010400 	.word	0x40010400

08005e00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a21      	ldr	r2, [pc, #132]	; (8005ee0 <TIM_OC3_SetConfig+0xe0>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d003      	beq.n	8005e66 <TIM_OC3_SetConfig+0x66>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a20      	ldr	r2, [pc, #128]	; (8005ee4 <TIM_OC3_SetConfig+0xe4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d10d      	bne.n	8005e82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	021b      	lsls	r3, r3, #8
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <TIM_OC3_SetConfig+0xe0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d003      	beq.n	8005e92 <TIM_OC3_SetConfig+0x92>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a15      	ldr	r2, [pc, #84]	; (8005ee4 <TIM_OC3_SetConfig+0xe4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d113      	bne.n	8005eba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	621a      	str	r2, [r3, #32]
}
 8005ed4:	bf00      	nop
 8005ed6:	371c      	adds	r7, #28
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40010400 	.word	0x40010400

08005ee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	031b      	lsls	r3, r3, #12
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a12      	ldr	r2, [pc, #72]	; (8005f8c <TIM_OC4_SetConfig+0xa4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d003      	beq.n	8005f50 <TIM_OC4_SetConfig+0x68>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a11      	ldr	r2, [pc, #68]	; (8005f90 <TIM_OC4_SetConfig+0xa8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d109      	bne.n	8005f64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	019b      	lsls	r3, r3, #6
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40010000 	.word	0x40010000
 8005f90:	40010400 	.word	0x40010400

08005f94 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f023 0307 	bic.w	r3, r3, #7
 8005fc2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b70      	cmp	r3, #112	; 0x70
 8005fdc:	d01a      	beq.n	8006014 <TIM_SlaveTimer_SetConfig+0x80>
 8005fde:	2b70      	cmp	r3, #112	; 0x70
 8005fe0:	d860      	bhi.n	80060a4 <TIM_SlaveTimer_SetConfig+0x110>
 8005fe2:	2b60      	cmp	r3, #96	; 0x60
 8005fe4:	d054      	beq.n	8006090 <TIM_SlaveTimer_SetConfig+0xfc>
 8005fe6:	2b60      	cmp	r3, #96	; 0x60
 8005fe8:	d85c      	bhi.n	80060a4 <TIM_SlaveTimer_SetConfig+0x110>
 8005fea:	2b50      	cmp	r3, #80	; 0x50
 8005fec:	d046      	beq.n	800607c <TIM_SlaveTimer_SetConfig+0xe8>
 8005fee:	2b50      	cmp	r3, #80	; 0x50
 8005ff0:	d858      	bhi.n	80060a4 <TIM_SlaveTimer_SetConfig+0x110>
 8005ff2:	2b40      	cmp	r3, #64	; 0x40
 8005ff4:	d019      	beq.n	800602a <TIM_SlaveTimer_SetConfig+0x96>
 8005ff6:	2b40      	cmp	r3, #64	; 0x40
 8005ff8:	d854      	bhi.n	80060a4 <TIM_SlaveTimer_SetConfig+0x110>
 8005ffa:	2b30      	cmp	r3, #48	; 0x30
 8005ffc:	d055      	beq.n	80060aa <TIM_SlaveTimer_SetConfig+0x116>
 8005ffe:	2b30      	cmp	r3, #48	; 0x30
 8006000:	d850      	bhi.n	80060a4 <TIM_SlaveTimer_SetConfig+0x110>
 8006002:	2b20      	cmp	r3, #32
 8006004:	d051      	beq.n	80060aa <TIM_SlaveTimer_SetConfig+0x116>
 8006006:	2b20      	cmp	r3, #32
 8006008:	d84c      	bhi.n	80060a4 <TIM_SlaveTimer_SetConfig+0x110>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d04d      	beq.n	80060aa <TIM_SlaveTimer_SetConfig+0x116>
 800600e:	2b10      	cmp	r3, #16
 8006010:	d04b      	beq.n	80060aa <TIM_SlaveTimer_SetConfig+0x116>
 8006012:	e047      	b.n	80060a4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68d9      	ldr	r1, [r3, #12]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f000 f8a6 	bl	8006174 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006028:	e040      	b.n	80060ac <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b05      	cmp	r3, #5
 8006030:	d101      	bne.n	8006036 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e03b      	b.n	80060ae <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6a1a      	ldr	r2, [r3, #32]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0201 	bic.w	r2, r2, #1
 800604c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800605c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	4313      	orrs	r3, r2
 8006068:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	621a      	str	r2, [r3, #32]
      break;
 800607a:	e017      	b.n	80060ac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6818      	ldr	r0, [r3, #0]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	6899      	ldr	r1, [r3, #8]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	461a      	mov	r2, r3
 800608a:	f000 f814 	bl	80060b6 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800608e:	e00d      	b.n	80060ac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	6899      	ldr	r1, [r3, #8]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	461a      	mov	r2, r3
 800609e:	f000 f839 	bl	8006114 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80060a2:	e003      	b.n	80060ac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	75fb      	strb	r3, [r7, #23]
      break;
 80060a8:	e000      	b.n	80060ac <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80060aa:	bf00      	nop
  }

  return status;
 80060ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b087      	sub	sp, #28
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	f023 0201 	bic.w	r2, r3, #1
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f023 030a 	bic.w	r3, r3, #10
 80060f2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	621a      	str	r2, [r3, #32]
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f023 0210 	bic.w	r2, r3, #16
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800613e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	031b      	lsls	r3, r3, #12
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006150:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	621a      	str	r2, [r3, #32]
}
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800618e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	021a      	lsls	r2, r3, #8
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	431a      	orrs	r2, r3
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4313      	orrs	r3, r2
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	609a      	str	r2, [r3, #8]
}
 80061a8:	bf00      	nop
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f003 031f 	and.w	r3, r3, #31
 80061c6:	2201      	movs	r2, #1
 80061c8:	fa02 f303 	lsl.w	r3, r2, r3
 80061cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a1a      	ldr	r2, [r3, #32]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	43db      	mvns	r3, r3
 80061d6:	401a      	ands	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a1a      	ldr	r2, [r3, #32]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f003 031f 	and.w	r3, r3, #31
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	fa01 f303 	lsl.w	r3, r1, r3
 80061ec:	431a      	orrs	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	621a      	str	r2, [r3, #32]
}
 80061f2:	bf00      	nop
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
	...

08006200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006214:	2302      	movs	r3, #2
 8006216:	e05a      	b.n	80062ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a21      	ldr	r2, [pc, #132]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d022      	beq.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006264:	d01d      	beq.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1d      	ldr	r2, [pc, #116]	; (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d018      	beq.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1b      	ldr	r2, [pc, #108]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1a      	ldr	r2, [pc, #104]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00e      	beq.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a18      	ldr	r2, [pc, #96]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a17      	ldr	r2, [pc, #92]	; (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d004      	beq.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a15      	ldr	r2, [pc, #84]	; (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d10c      	bne.n	80062bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	40010000 	.word	0x40010000
 80062e0:	40000400 	.word	0x40000400
 80062e4:	40000800 	.word	0x40000800
 80062e8:	40000c00 	.word	0x40000c00
 80062ec:	40010400 	.word	0x40010400
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40001800 	.word	0x40001800

080062f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006310:	2302      	movs	r3, #2
 8006312:	e03d      	b.n	8006390 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	4313      	orrs	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4313      	orrs	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800639c:	b084      	sub	sp, #16
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	f107 001c 	add.w	r0, r7, #28
 80063aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d122      	bne.n	80063fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d105      	bne.n	80063ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fa82 	bl	80068f8 <USB_CoreReset>
 80063f4:	4603      	mov	r3, r0
 80063f6:	73fb      	strb	r3, [r7, #15]
 80063f8:	e01a      	b.n	8006430 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa76 	bl	80068f8 <USB_CoreReset>
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
 8006422:	e005      	b.n	8006430 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006428:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	2b01      	cmp	r3, #1
 8006434:	d10b      	bne.n	800644e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f043 0206 	orr.w	r2, r3, #6
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f043 0220 	orr.w	r2, r3, #32
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800644e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800645a:	b004      	add	sp, #16
 800645c:	4770      	bx	lr

0800645e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f023 0201 	bic.w	r2, r3, #1
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d115      	bne.n	80064ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064ae:	2001      	movs	r0, #1
 80064b0:	f7fc f944 	bl	800273c <HAL_Delay>
      ms++;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3301      	adds	r3, #1
 80064b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa0e 	bl	80068dc <USB_GetMode>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d01e      	beq.n	8006504 <USB_SetCurrentMode+0x84>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b31      	cmp	r3, #49	; 0x31
 80064ca:	d9f0      	bls.n	80064ae <USB_SetCurrentMode+0x2e>
 80064cc:	e01a      	b.n	8006504 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d115      	bne.n	8006500 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064e0:	2001      	movs	r0, #1
 80064e2:	f7fc f92b 	bl	800273c <HAL_Delay>
      ms++;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f9f5 	bl	80068dc <USB_GetMode>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <USB_SetCurrentMode+0x84>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b31      	cmp	r3, #49	; 0x31
 80064fc:	d9f0      	bls.n	80064e0 <USB_SetCurrentMode+0x60>
 80064fe:	e001      	b.n	8006504 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e005      	b.n	8006510 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b32      	cmp	r3, #50	; 0x32
 8006508:	d101      	bne.n	800650e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006518:	b084      	sub	sp, #16
 800651a:	b580      	push	{r7, lr}
 800651c:	b086      	sub	sp, #24
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006532:	2300      	movs	r3, #0
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	e009      	b.n	800654c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	3340      	adds	r3, #64	; 0x40
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	2200      	movs	r2, #0
 8006544:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	3301      	adds	r3, #1
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2b0e      	cmp	r3, #14
 8006550:	d9f2      	bls.n	8006538 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006554:	2b00      	cmp	r3, #0
 8006556:	d11c      	bne.n	8006592 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006566:	f043 0302 	orr.w	r3, r3, #2
 800656a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	639a      	str	r2, [r3, #56]	; 0x38
 8006590:	e00b      	b.n	80065aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065b0:	461a      	mov	r2, r3
 80065b2:	2300      	movs	r3, #0
 80065b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065bc:	4619      	mov	r1, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c4:	461a      	mov	r2, r3
 80065c6:	680b      	ldr	r3, [r1, #0]
 80065c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d10c      	bne.n	80065ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065d6:	2100      	movs	r1, #0
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f945 	bl	8006868 <USB_SetDevSpeed>
 80065de:	e008      	b.n	80065f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065e0:	2101      	movs	r1, #1
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f940 	bl	8006868 <USB_SetDevSpeed>
 80065e8:	e003      	b.n	80065f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065ea:	2103      	movs	r1, #3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f93b 	bl	8006868 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065f2:	2110      	movs	r1, #16
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f8f3 	bl	80067e0 <USB_FlushTxFifo>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f90f 	bl	8006828 <USB_FlushRxFifo>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661a:	461a      	mov	r2, r3
 800661c:	2300      	movs	r3, #0
 800661e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006626:	461a      	mov	r2, r3
 8006628:	2300      	movs	r3, #0
 800662a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006632:	461a      	mov	r2, r3
 8006634:	2300      	movs	r3, #0
 8006636:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006638:	2300      	movs	r3, #0
 800663a:	613b      	str	r3, [r7, #16]
 800663c:	e043      	b.n	80066c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006654:	d118      	bne.n	8006688 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10a      	bne.n	8006672 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006668:	461a      	mov	r2, r3
 800666a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	e013      	b.n	800669a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667e:	461a      	mov	r2, r3
 8006680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	e008      	b.n	800669a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	461a      	mov	r2, r3
 8006696:	2300      	movs	r3, #0
 8006698:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a6:	461a      	mov	r2, r3
 80066a8:	2300      	movs	r3, #0
 80066aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b8:	461a      	mov	r2, r3
 80066ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	3301      	adds	r3, #1
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d3b7      	bcc.n	800663e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066ce:	2300      	movs	r3, #0
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	e043      	b.n	800675c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ea:	d118      	bne.n	800671e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10a      	bne.n	8006708 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fe:	461a      	mov	r2, r3
 8006700:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	e013      	b.n	8006730 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006714:	461a      	mov	r2, r3
 8006716:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	e008      	b.n	8006730 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672a:	461a      	mov	r2, r3
 800672c:	2300      	movs	r3, #0
 800672e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673c:	461a      	mov	r2, r3
 800673e:	2300      	movs	r3, #0
 8006740:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674e:	461a      	mov	r2, r3
 8006750:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006754:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	3301      	adds	r3, #1
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	429a      	cmp	r2, r3
 8006762:	d3b7      	bcc.n	80066d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006776:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006784:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	2b00      	cmp	r3, #0
 800678a:	d105      	bne.n	8006798 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	f043 0210 	orr.w	r2, r3, #16
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699a      	ldr	r2, [r3, #24]
 800679c:	4b0f      	ldr	r3, [pc, #60]	; (80067dc <USB_DevInit+0x2c4>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f043 0208 	orr.w	r2, r3, #8
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d107      	bne.n	80067cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067c4:	f043 0304 	orr.w	r3, r3, #4
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067d8:	b004      	add	sp, #16
 80067da:	4770      	bx	lr
 80067dc:	803c3800 	.word	0x803c3800

080067e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	019b      	lsls	r3, r3, #6
 80067f2:	f043 0220 	orr.w	r2, r3, #32
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3301      	adds	r3, #1
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	4a08      	ldr	r2, [pc, #32]	; (8006824 <USB_FlushTxFifo+0x44>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d901      	bls.n	800680a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e006      	b.n	8006818 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b20      	cmp	r3, #32
 8006814:	d0f1      	beq.n	80067fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	00030d40 	.word	0x00030d40

08006828 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2210      	movs	r2, #16
 8006838:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3301      	adds	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	4a08      	ldr	r2, [pc, #32]	; (8006864 <USB_FlushRxFifo+0x3c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e006      	b.n	8006858 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0310 	and.w	r3, r3, #16
 8006852:	2b10      	cmp	r3, #16
 8006854:	d0f1      	beq.n	800683a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	00030d40 	.word	0x00030d40

08006868 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006888:	4313      	orrs	r3, r2
 800688a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800689a:	b480      	push	{r7}
 800689c:	b085      	sub	sp, #20
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068b4:	f023 0303 	bic.w	r3, r3, #3
 80068b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068c8:	f043 0302 	orr.w	r3, r3, #2
 80068cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	f003 0301 	and.w	r3, r3, #1
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3301      	adds	r3, #1
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	4a13      	ldr	r2, [pc, #76]	; (8006958 <USB_CoreReset+0x60>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d901      	bls.n	8006914 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e01a      	b.n	800694a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	daf3      	bge.n	8006904 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f043 0201 	orr.w	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3301      	adds	r3, #1
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	4a09      	ldr	r2, [pc, #36]	; (8006958 <USB_CoreReset+0x60>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d901      	bls.n	800693c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e006      	b.n	800694a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b01      	cmp	r3, #1
 8006946:	d0f1      	beq.n	800692c <USB_CoreReset+0x34>

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	00030d40 	.word	0x00030d40

0800695c <__errno>:
 800695c:	4b01      	ldr	r3, [pc, #4]	; (8006964 <__errno+0x8>)
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	2000001c 	.word	0x2000001c

08006968 <__libc_init_array>:
 8006968:	b570      	push	{r4, r5, r6, lr}
 800696a:	4d0d      	ldr	r5, [pc, #52]	; (80069a0 <__libc_init_array+0x38>)
 800696c:	4c0d      	ldr	r4, [pc, #52]	; (80069a4 <__libc_init_array+0x3c>)
 800696e:	1b64      	subs	r4, r4, r5
 8006970:	10a4      	asrs	r4, r4, #2
 8006972:	2600      	movs	r6, #0
 8006974:	42a6      	cmp	r6, r4
 8006976:	d109      	bne.n	800698c <__libc_init_array+0x24>
 8006978:	4d0b      	ldr	r5, [pc, #44]	; (80069a8 <__libc_init_array+0x40>)
 800697a:	4c0c      	ldr	r4, [pc, #48]	; (80069ac <__libc_init_array+0x44>)
 800697c:	f000 fa26 	bl	8006dcc <_init>
 8006980:	1b64      	subs	r4, r4, r5
 8006982:	10a4      	asrs	r4, r4, #2
 8006984:	2600      	movs	r6, #0
 8006986:	42a6      	cmp	r6, r4
 8006988:	d105      	bne.n	8006996 <__libc_init_array+0x2e>
 800698a:	bd70      	pop	{r4, r5, r6, pc}
 800698c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006990:	4798      	blx	r3
 8006992:	3601      	adds	r6, #1
 8006994:	e7ee      	b.n	8006974 <__libc_init_array+0xc>
 8006996:	f855 3b04 	ldr.w	r3, [r5], #4
 800699a:	4798      	blx	r3
 800699c:	3601      	adds	r6, #1
 800699e:	e7f2      	b.n	8006986 <__libc_init_array+0x1e>
 80069a0:	08006e38 	.word	0x08006e38
 80069a4:	08006e38 	.word	0x08006e38
 80069a8:	08006e38 	.word	0x08006e38
 80069ac:	08006e3c 	.word	0x08006e3c

080069b0 <memset>:
 80069b0:	4402      	add	r2, r0
 80069b2:	4603      	mov	r3, r0
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d100      	bne.n	80069ba <memset+0xa>
 80069b8:	4770      	bx	lr
 80069ba:	f803 1b01 	strb.w	r1, [r3], #1
 80069be:	e7f9      	b.n	80069b4 <memset+0x4>

080069c0 <exp>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	ed2d 8b02 	vpush	{d8}
 80069c6:	ec55 4b10 	vmov	r4, r5, d0
 80069ca:	f000 f841 	bl	8006a50 <__ieee754_exp>
 80069ce:	eeb0 8a40 	vmov.f32	s16, s0
 80069d2:	eef0 8a60 	vmov.f32	s17, s1
 80069d6:	ec45 4b10 	vmov	d0, r4, r5
 80069da:	f000 f9eb 	bl	8006db4 <finite>
 80069de:	b168      	cbz	r0, 80069fc <exp+0x3c>
 80069e0:	a317      	add	r3, pc, #92	; (adr r3, 8006a40 <exp+0x80>)
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	4620      	mov	r0, r4
 80069e8:	4629      	mov	r1, r5
 80069ea:	f7fa f839 	bl	8000a60 <__aeabi_dcmpgt>
 80069ee:	b160      	cbz	r0, 8006a0a <exp+0x4a>
 80069f0:	f7ff ffb4 	bl	800695c <__errno>
 80069f4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8006a30 <exp+0x70>
 80069f8:	2322      	movs	r3, #34	; 0x22
 80069fa:	6003      	str	r3, [r0, #0]
 80069fc:	eeb0 0a48 	vmov.f32	s0, s16
 8006a00:	eef0 0a68 	vmov.f32	s1, s17
 8006a04:	ecbd 8b02 	vpop	{d8}
 8006a08:	bd38      	pop	{r3, r4, r5, pc}
 8006a0a:	a30f      	add	r3, pc, #60	; (adr r3, 8006a48 <exp+0x88>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	4620      	mov	r0, r4
 8006a12:	4629      	mov	r1, r5
 8006a14:	f7fa f806 	bl	8000a24 <__aeabi_dcmplt>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d0ef      	beq.n	80069fc <exp+0x3c>
 8006a1c:	f7ff ff9e 	bl	800695c <__errno>
 8006a20:	2322      	movs	r3, #34	; 0x22
 8006a22:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8006a38 <exp+0x78>
 8006a26:	6003      	str	r3, [r0, #0]
 8006a28:	e7e8      	b.n	80069fc <exp+0x3c>
 8006a2a:	bf00      	nop
 8006a2c:	f3af 8000 	nop.w
 8006a30:	00000000 	.word	0x00000000
 8006a34:	7ff00000 	.word	0x7ff00000
	...
 8006a40:	fefa39ef 	.word	0xfefa39ef
 8006a44:	40862e42 	.word	0x40862e42
 8006a48:	d52d3051 	.word	0xd52d3051
 8006a4c:	c0874910 	.word	0xc0874910

08006a50 <__ieee754_exp>:
 8006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	ec55 4b10 	vmov	r4, r5, d0
 8006a58:	49b5      	ldr	r1, [pc, #724]	; (8006d30 <__ieee754_exp+0x2e0>)
 8006a5a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006a5e:	428b      	cmp	r3, r1
 8006a60:	ed2d 8b04 	vpush	{d8-d9}
 8006a64:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8006a68:	d93d      	bls.n	8006ae6 <__ieee754_exp+0x96>
 8006a6a:	49b2      	ldr	r1, [pc, #712]	; (8006d34 <__ieee754_exp+0x2e4>)
 8006a6c:	428b      	cmp	r3, r1
 8006a6e:	d918      	bls.n	8006aa2 <__ieee754_exp+0x52>
 8006a70:	ee10 3a10 	vmov	r3, s0
 8006a74:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	d009      	beq.n	8006a90 <__ieee754_exp+0x40>
 8006a7c:	ee10 2a10 	vmov	r2, s0
 8006a80:	462b      	mov	r3, r5
 8006a82:	4620      	mov	r0, r4
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7f9 fba5 	bl	80001d4 <__adddf3>
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	460d      	mov	r5, r1
 8006a8e:	e002      	b.n	8006a96 <__ieee754_exp+0x46>
 8006a90:	b10e      	cbz	r6, 8006a96 <__ieee754_exp+0x46>
 8006a92:	2400      	movs	r4, #0
 8006a94:	2500      	movs	r5, #0
 8006a96:	ecbd 8b04 	vpop	{d8-d9}
 8006a9a:	ec45 4b10 	vmov	d0, r4, r5
 8006a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa2:	a38d      	add	r3, pc, #564	; (adr r3, 8006cd8 <__ieee754_exp+0x288>)
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	ee10 0a10 	vmov	r0, s0
 8006aac:	4629      	mov	r1, r5
 8006aae:	f7f9 ffd7 	bl	8000a60 <__aeabi_dcmpgt>
 8006ab2:	4607      	mov	r7, r0
 8006ab4:	b130      	cbz	r0, 8006ac4 <__ieee754_exp+0x74>
 8006ab6:	ecbd 8b04 	vpop	{d8-d9}
 8006aba:	2000      	movs	r0, #0
 8006abc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	f000 b96f 	b.w	8006da2 <__math_oflow>
 8006ac4:	a386      	add	r3, pc, #536	; (adr r3, 8006ce0 <__ieee754_exp+0x290>)
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	4620      	mov	r0, r4
 8006acc:	4629      	mov	r1, r5
 8006ace:	f7f9 ffa9 	bl	8000a24 <__aeabi_dcmplt>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	f000 808b 	beq.w	8006bee <__ieee754_exp+0x19e>
 8006ad8:	ecbd 8b04 	vpop	{d8-d9}
 8006adc:	4638      	mov	r0, r7
 8006ade:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae2:	f000 b955 	b.w	8006d90 <__math_uflow>
 8006ae6:	4a94      	ldr	r2, [pc, #592]	; (8006d38 <__ieee754_exp+0x2e8>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	f240 80ac 	bls.w	8006c46 <__ieee754_exp+0x1f6>
 8006aee:	4a93      	ldr	r2, [pc, #588]	; (8006d3c <__ieee754_exp+0x2ec>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d87c      	bhi.n	8006bee <__ieee754_exp+0x19e>
 8006af4:	4b92      	ldr	r3, [pc, #584]	; (8006d40 <__ieee754_exp+0x2f0>)
 8006af6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	ee10 0a10 	vmov	r0, s0
 8006b02:	4629      	mov	r1, r5
 8006b04:	f7f9 fb64 	bl	80001d0 <__aeabi_dsub>
 8006b08:	4b8e      	ldr	r3, [pc, #568]	; (8006d44 <__ieee754_exp+0x2f4>)
 8006b0a:	00f7      	lsls	r7, r6, #3
 8006b0c:	443b      	add	r3, r7
 8006b0e:	ed93 7b00 	vldr	d7, [r3]
 8006b12:	f1c6 0a01 	rsb	sl, r6, #1
 8006b16:	4680      	mov	r8, r0
 8006b18:	4689      	mov	r9, r1
 8006b1a:	ebaa 0a06 	sub.w	sl, sl, r6
 8006b1e:	eeb0 8a47 	vmov.f32	s16, s14
 8006b22:	eef0 8a67 	vmov.f32	s17, s15
 8006b26:	ec53 2b18 	vmov	r2, r3, d8
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	f7f9 fb4f 	bl	80001d0 <__aeabi_dsub>
 8006b32:	4604      	mov	r4, r0
 8006b34:	460d      	mov	r5, r1
 8006b36:	4622      	mov	r2, r4
 8006b38:	462b      	mov	r3, r5
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7f9 fcff 	bl	8000540 <__aeabi_dmul>
 8006b42:	a369      	add	r3, pc, #420	; (adr r3, 8006ce8 <__ieee754_exp+0x298>)
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	4606      	mov	r6, r0
 8006b4a:	460f      	mov	r7, r1
 8006b4c:	f7f9 fcf8 	bl	8000540 <__aeabi_dmul>
 8006b50:	a367      	add	r3, pc, #412	; (adr r3, 8006cf0 <__ieee754_exp+0x2a0>)
 8006b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b56:	f7f9 fb3b 	bl	80001d0 <__aeabi_dsub>
 8006b5a:	4632      	mov	r2, r6
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	f7f9 fcef 	bl	8000540 <__aeabi_dmul>
 8006b62:	a365      	add	r3, pc, #404	; (adr r3, 8006cf8 <__ieee754_exp+0x2a8>)
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	f7f9 fb34 	bl	80001d4 <__adddf3>
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	463b      	mov	r3, r7
 8006b70:	f7f9 fce6 	bl	8000540 <__aeabi_dmul>
 8006b74:	a362      	add	r3, pc, #392	; (adr r3, 8006d00 <__ieee754_exp+0x2b0>)
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	f7f9 fb29 	bl	80001d0 <__aeabi_dsub>
 8006b7e:	4632      	mov	r2, r6
 8006b80:	463b      	mov	r3, r7
 8006b82:	f7f9 fcdd 	bl	8000540 <__aeabi_dmul>
 8006b86:	a360      	add	r3, pc, #384	; (adr r3, 8006d08 <__ieee754_exp+0x2b8>)
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f7f9 fb22 	bl	80001d4 <__adddf3>
 8006b90:	4632      	mov	r2, r6
 8006b92:	463b      	mov	r3, r7
 8006b94:	f7f9 fcd4 	bl	8000540 <__aeabi_dmul>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	f7f9 fb16 	bl	80001d0 <__aeabi_dsub>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4606      	mov	r6, r0
 8006baa:	460f      	mov	r7, r1
 8006bac:	4620      	mov	r0, r4
 8006bae:	4629      	mov	r1, r5
 8006bb0:	f7f9 fcc6 	bl	8000540 <__aeabi_dmul>
 8006bb4:	ec41 0b19 	vmov	d9, r0, r1
 8006bb8:	f1ba 0f00 	cmp.w	sl, #0
 8006bbc:	d15d      	bne.n	8006c7a <__ieee754_exp+0x22a>
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	4639      	mov	r1, r7
 8006bc8:	f7f9 fb02 	bl	80001d0 <__aeabi_dsub>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	ec51 0b19 	vmov	r0, r1, d9
 8006bd4:	f7f9 fdde 	bl	8000794 <__aeabi_ddiv>
 8006bd8:	4622      	mov	r2, r4
 8006bda:	462b      	mov	r3, r5
 8006bdc:	f7f9 faf8 	bl	80001d0 <__aeabi_dsub>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	2000      	movs	r0, #0
 8006be6:	4958      	ldr	r1, [pc, #352]	; (8006d48 <__ieee754_exp+0x2f8>)
 8006be8:	f7f9 faf2 	bl	80001d0 <__aeabi_dsub>
 8006bec:	e74d      	b.n	8006a8a <__ieee754_exp+0x3a>
 8006bee:	4857      	ldr	r0, [pc, #348]	; (8006d4c <__ieee754_exp+0x2fc>)
 8006bf0:	a347      	add	r3, pc, #284	; (adr r3, 8006d10 <__ieee754_exp+0x2c0>)
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f7f9 fc9f 	bl	8000540 <__aeabi_dmul>
 8006c02:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c06:	f7f9 fae5 	bl	80001d4 <__adddf3>
 8006c0a:	f7f9 ff33 	bl	8000a74 <__aeabi_d2iz>
 8006c0e:	4682      	mov	sl, r0
 8006c10:	f7f9 fc2c 	bl	800046c <__aeabi_i2d>
 8006c14:	a340      	add	r3, pc, #256	; (adr r3, 8006d18 <__ieee754_exp+0x2c8>)
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	460f      	mov	r7, r1
 8006c1e:	f7f9 fc8f 	bl	8000540 <__aeabi_dmul>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7f9 fad1 	bl	80001d0 <__aeabi_dsub>
 8006c2e:	a33c      	add	r3, pc, #240	; (adr r3, 8006d20 <__ieee754_exp+0x2d0>)
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	4680      	mov	r8, r0
 8006c36:	4689      	mov	r9, r1
 8006c38:	4630      	mov	r0, r6
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	f7f9 fc80 	bl	8000540 <__aeabi_dmul>
 8006c40:	ec41 0b18 	vmov	d8, r0, r1
 8006c44:	e76f      	b.n	8006b26 <__ieee754_exp+0xd6>
 8006c46:	4a42      	ldr	r2, [pc, #264]	; (8006d50 <__ieee754_exp+0x300>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d811      	bhi.n	8006c70 <__ieee754_exp+0x220>
 8006c4c:	a336      	add	r3, pc, #216	; (adr r3, 8006d28 <__ieee754_exp+0x2d8>)
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	ee10 0a10 	vmov	r0, s0
 8006c56:	4629      	mov	r1, r5
 8006c58:	f7f9 fabc 	bl	80001d4 <__adddf3>
 8006c5c:	4b3a      	ldr	r3, [pc, #232]	; (8006d48 <__ieee754_exp+0x2f8>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f7f9 fefe 	bl	8000a60 <__aeabi_dcmpgt>
 8006c64:	b138      	cbz	r0, 8006c76 <__ieee754_exp+0x226>
 8006c66:	4b38      	ldr	r3, [pc, #224]	; (8006d48 <__ieee754_exp+0x2f8>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	e70a      	b.n	8006a86 <__ieee754_exp+0x36>
 8006c70:	f04f 0a00 	mov.w	sl, #0
 8006c74:	e75f      	b.n	8006b36 <__ieee754_exp+0xe6>
 8006c76:	4682      	mov	sl, r0
 8006c78:	e75d      	b.n	8006b36 <__ieee754_exp+0xe6>
 8006c7a:	4632      	mov	r2, r6
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	2000      	movs	r0, #0
 8006c80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006c84:	f7f9 faa4 	bl	80001d0 <__aeabi_dsub>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	ec51 0b19 	vmov	r0, r1, d9
 8006c90:	f7f9 fd80 	bl	8000794 <__aeabi_ddiv>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	ec51 0b18 	vmov	r0, r1, d8
 8006c9c:	f7f9 fa98 	bl	80001d0 <__aeabi_dsub>
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	f7f9 fa94 	bl	80001d0 <__aeabi_dsub>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	2000      	movs	r0, #0
 8006cae:	4926      	ldr	r1, [pc, #152]	; (8006d48 <__ieee754_exp+0x2f8>)
 8006cb0:	f7f9 fa8e 	bl	80001d0 <__aeabi_dsub>
 8006cb4:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8006cb8:	4592      	cmp	sl, r2
 8006cba:	db02      	blt.n	8006cc2 <__ieee754_exp+0x272>
 8006cbc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8006cc0:	e6e3      	b.n	8006a8a <__ieee754_exp+0x3a>
 8006cc2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8006cc6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8006cd0:	f7f9 fc36 	bl	8000540 <__aeabi_dmul>
 8006cd4:	e6d9      	b.n	8006a8a <__ieee754_exp+0x3a>
 8006cd6:	bf00      	nop
 8006cd8:	fefa39ef 	.word	0xfefa39ef
 8006cdc:	40862e42 	.word	0x40862e42
 8006ce0:	d52d3051 	.word	0xd52d3051
 8006ce4:	c0874910 	.word	0xc0874910
 8006ce8:	72bea4d0 	.word	0x72bea4d0
 8006cec:	3e663769 	.word	0x3e663769
 8006cf0:	c5d26bf1 	.word	0xc5d26bf1
 8006cf4:	3ebbbd41 	.word	0x3ebbbd41
 8006cf8:	af25de2c 	.word	0xaf25de2c
 8006cfc:	3f11566a 	.word	0x3f11566a
 8006d00:	16bebd93 	.word	0x16bebd93
 8006d04:	3f66c16c 	.word	0x3f66c16c
 8006d08:	5555553e 	.word	0x5555553e
 8006d0c:	3fc55555 	.word	0x3fc55555
 8006d10:	652b82fe 	.word	0x652b82fe
 8006d14:	3ff71547 	.word	0x3ff71547
 8006d18:	fee00000 	.word	0xfee00000
 8006d1c:	3fe62e42 	.word	0x3fe62e42
 8006d20:	35793c76 	.word	0x35793c76
 8006d24:	3dea39ef 	.word	0x3dea39ef
 8006d28:	8800759c 	.word	0x8800759c
 8006d2c:	7e37e43c 	.word	0x7e37e43c
 8006d30:	40862e41 	.word	0x40862e41
 8006d34:	7fefffff 	.word	0x7fefffff
 8006d38:	3fd62e42 	.word	0x3fd62e42
 8006d3c:	3ff0a2b1 	.word	0x3ff0a2b1
 8006d40:	08006e10 	.word	0x08006e10
 8006d44:	08006e20 	.word	0x08006e20
 8006d48:	3ff00000 	.word	0x3ff00000
 8006d4c:	08006e00 	.word	0x08006e00
 8006d50:	3defffff 	.word	0x3defffff

08006d54 <with_errno>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	4604      	mov	r4, r0
 8006d58:	460d      	mov	r5, r1
 8006d5a:	4616      	mov	r6, r2
 8006d5c:	f7ff fdfe 	bl	800695c <__errno>
 8006d60:	4629      	mov	r1, r5
 8006d62:	6006      	str	r6, [r0, #0]
 8006d64:	4620      	mov	r0, r4
 8006d66:	bd70      	pop	{r4, r5, r6, pc}

08006d68 <xflow>:
 8006d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d6a:	4614      	mov	r4, r2
 8006d6c:	461d      	mov	r5, r3
 8006d6e:	b108      	cbz	r0, 8006d74 <xflow+0xc>
 8006d70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006d74:	e9cd 2300 	strd	r2, r3, [sp]
 8006d78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	f7f9 fbde 	bl	8000540 <__aeabi_dmul>
 8006d84:	2222      	movs	r2, #34	; 0x22
 8006d86:	b003      	add	sp, #12
 8006d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d8c:	f7ff bfe2 	b.w	8006d54 <with_errno>

08006d90 <__math_uflow>:
 8006d90:	b508      	push	{r3, lr}
 8006d92:	2200      	movs	r2, #0
 8006d94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d98:	f7ff ffe6 	bl	8006d68 <xflow>
 8006d9c:	ec41 0b10 	vmov	d0, r0, r1
 8006da0:	bd08      	pop	{r3, pc}

08006da2 <__math_oflow>:
 8006da2:	b508      	push	{r3, lr}
 8006da4:	2200      	movs	r2, #0
 8006da6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006daa:	f7ff ffdd 	bl	8006d68 <xflow>
 8006dae:	ec41 0b10 	vmov	d0, r0, r1
 8006db2:	bd08      	pop	{r3, pc}

08006db4 <finite>:
 8006db4:	b082      	sub	sp, #8
 8006db6:	ed8d 0b00 	vstr	d0, [sp]
 8006dba:	9801      	ldr	r0, [sp, #4]
 8006dbc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006dc0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006dc4:	0fc0      	lsrs	r0, r0, #31
 8006dc6:	b002      	add	sp, #8
 8006dc8:	4770      	bx	lr
	...

08006dcc <_init>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	bf00      	nop
 8006dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	469e      	mov	lr, r3
 8006dd6:	4770      	bx	lr

08006dd8 <_fini>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr
