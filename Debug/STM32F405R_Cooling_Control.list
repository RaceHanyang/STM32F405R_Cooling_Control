
STM32F405R_Cooling_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005258  08005258  00015258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005270  08005270  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005270  08005270  00015270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005278  08005278  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005278  08005278  00015278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800527c  0800527c  0001527c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  20000014  08005294  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  08005294  00020704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019175  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038ca  00000000  00000000  000391b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001310  00000000  00000000  0003ca88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001138  00000000  00000000  0003dd98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022ff2  00000000  00000000  0003eed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012a6a  00000000  00000000  00061ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8548  00000000  00000000  0007492c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ce74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004da4  00000000  00000000  0013cef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005240 	.word	0x08005240

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005240 	.word	0x08005240

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <GAS_CCTL_outputInit>:
static void GAS_CCTL_onAll(void);
static void GAS_CCTL_offAll(void);
void GAS_CCTL_Control(void);

void GAS_CCTL_outputInit(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004cc:	2100      	movs	r1, #0
 80004ce:	480a      	ldr	r0, [pc, #40]	; (80004f8 <GAS_CCTL_outputInit+0x30>)
 80004d0:	f003 fe46 	bl	8004160 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80004d4:	2100      	movs	r1, #0
 80004d6:	4809      	ldr	r0, [pc, #36]	; (80004fc <GAS_CCTL_outputInit+0x34>)
 80004d8:	f003 fe42 	bl	8004160 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80004dc:	2104      	movs	r1, #4
 80004de:	4807      	ldr	r0, [pc, #28]	; (80004fc <GAS_CCTL_outputInit+0x34>)
 80004e0:	f003 fe3e 	bl	8004160 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80004e4:	2108      	movs	r1, #8
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <GAS_CCTL_outputInit+0x34>)
 80004e8:	f003 fe3a 	bl	8004160 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80004ec:	210c      	movs	r1, #12
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <GAS_CCTL_outputInit+0x34>)
 80004f0:	f003 fe36 	bl	8004160 <HAL_TIM_PWM_Start>

}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200002b8 	.word	0x200002b8
 80004fc:	20000238 	.word	0x20000238

08000500 <GAS_CCTL_onAll>:

static void GAS_CCTL_onAll(void){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ExternalFan_INH_Pin, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800050a:	480c      	ldr	r0, [pc, #48]	; (800053c <GAS_CCTL_onAll+0x3c>)
 800050c:	f002 ffc6 	bl	800349c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Radiator0_INH_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2140      	movs	r1, #64	; 0x40
 8000514:	4809      	ldr	r0, [pc, #36]	; (800053c <GAS_CCTL_onAll+0x3c>)
 8000516:	f002 ffc1 	bl	800349c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Radiator1_INH_Pin, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
 800051c:	2110      	movs	r1, #16
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <GAS_CCTL_onAll+0x3c>)
 8000520:	f002 ffbc 	bl	800349c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,WaterPump0_INH_Pin, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <GAS_CCTL_onAll+0x3c>)
 800052a:	f002 ffb7 	bl	800349c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Waterpump1_INH_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2120      	movs	r1, #32
 8000532:	4802      	ldr	r0, [pc, #8]	; (800053c <GAS_CCTL_onAll+0x3c>)
 8000534:	f002 ffb2 	bl	800349c <HAL_GPIO_WritePin>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40020400 	.word	0x40020400

08000540 <GAS_CCTL_offAll>:

static void GAS_CCTL_offAll(void){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,ExternalFan_INH_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054a:	480c      	ldr	r0, [pc, #48]	; (800057c <GAS_CCTL_offAll+0x3c>)
 800054c:	f002 ffa6 	bl	800349c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Radiator0_INH_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2140      	movs	r1, #64	; 0x40
 8000554:	4809      	ldr	r0, [pc, #36]	; (800057c <GAS_CCTL_offAll+0x3c>)
 8000556:	f002 ffa1 	bl	800349c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Radiator1_INH_Pin, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2110      	movs	r1, #16
 800055e:	4807      	ldr	r0, [pc, #28]	; (800057c <GAS_CCTL_offAll+0x3c>)
 8000560:	f002 ff9c 	bl	800349c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,WaterPump0_INH_Pin, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	4804      	ldr	r0, [pc, #16]	; (800057c <GAS_CCTL_offAll+0x3c>)
 800056a:	f002 ff97 	bl	800349c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Waterpump1_INH_Pin, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2120      	movs	r1, #32
 8000572:	4802      	ldr	r0, [pc, #8]	; (800057c <GAS_CCTL_offAll+0x3c>)
 8000574:	f002 ff92 	bl	800349c <HAL_GPIO_WritePin>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40020400 	.word	0x40020400

08000580 <GAS_CCTL_Control>:


void GAS_CCTL_Control(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0

	if (TC_msg.B.killAll)GAS_CCTL_offAll();
 8000586:	4b4f      	ldr	r3, [pc, #316]	; (80006c4 <GAS_CCTL_Control+0x144>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	f003 0320 	and.w	r3, r3, #32
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <GAS_CCTL_Control+0x18>
 8000594:	f7ff ffd4 	bl	8000540 <GAS_CCTL_offAll>

	if(TC_msg.B.OnAll)GAS_CCTL_onAll();
 8000598:	4b4a      	ldr	r3, [pc, #296]	; (80006c4 <GAS_CCTL_Control+0x144>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <GAS_CCTL_Control+0x2a>
 80005a6:	f7ff ffab 	bl	8000500 <GAS_CCTL_onAll>

	uint8_t defaultDuty = 98;
 80005aa:	2362      	movs	r3, #98	; 0x62
 80005ac:	77fb      	strb	r3, [r7, #31]
//	TIM8 -> CCR3 = defaultDuty + TC_msg.B.Radiator1_DutyOrder;// + CoolingADC.Radiator_T * Pr;
//	TIM8 -> CCR4 = defaultDuty + TC_msg.B.WaterPump1_DutyOrder;// + CoolingADC.WaterPump_P * Pw;



	TIM1 -> CCR1 = defaultDuty;
 80005ae:	4a46      	ldr	r2, [pc, #280]	; (80006c8 <GAS_CCTL_Control+0x148>)
 80005b0:	7ffb      	ldrb	r3, [r7, #31]
 80005b2:	6353      	str	r3, [r2, #52]	; 0x34
	TIM8 -> CCR1 = defaultDuty;
 80005b4:	4a45      	ldr	r2, [pc, #276]	; (80006cc <GAS_CCTL_Control+0x14c>)
 80005b6:	7ffb      	ldrb	r3, [r7, #31]
 80005b8:	6353      	str	r3, [r2, #52]	; 0x34
	TIM8 -> CCR2 = defaultDuty;
 80005ba:	4a44      	ldr	r2, [pc, #272]	; (80006cc <GAS_CCTL_Control+0x14c>)
 80005bc:	7ffb      	ldrb	r3, [r7, #31]
 80005be:	6393      	str	r3, [r2, #56]	; 0x38
	TIM8 -> CCR3 = defaultDuty;
 80005c0:	4a42      	ldr	r2, [pc, #264]	; (80006cc <GAS_CCTL_Control+0x14c>)
 80005c2:	7ffb      	ldrb	r3, [r7, #31]
 80005c4:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM8 -> CCR4 = defaultDuty;
 80005c6:	4a41      	ldr	r2, [pc, #260]	; (80006cc <GAS_CCTL_Control+0x14c>)
 80005c8:	7ffb      	ldrb	r3, [r7, #31]
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40


	float Ke = 0.5;
 80005cc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80005d0:	61bb      	str	r3, [r7, #24]
	float Kr = 0.5;
 80005d2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80005d6:	617b      	str	r3, [r7, #20]
	float Kw = 0.5;
 80005d8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80005dc:	613b      	str	r3, [r7, #16]
	float Kp = 0.5;
 80005de:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80005e2:	60fb      	str	r3, [r7, #12]

	stm32.B.External_IS = (uint8_t)(CoolingADC.External_IS * Ke);
 80005e4:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <GAS_CCTL_Control+0x150>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	ee07 3a90 	vmov	s15, r3
 80005ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80005f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8000600:	793b      	ldrb	r3, [r7, #4]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <GAS_CCTL_Control+0x154>)
 8000606:	701a      	strb	r2, [r3, #0]
	stm32.B.Radiator0_IS = (uint8_t)(CoolingADC.Radiator0_IS * Kr);
 8000608:	4b31      	ldr	r3, [pc, #196]	; (80006d0 <GAS_CCTL_Control+0x150>)
 800060a:	88db      	ldrh	r3, [r3, #6]
 800060c:	ee07 3a90 	vmov	s15, r3
 8000610:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000614:	edd7 7a05 	vldr	s15, [r7, #20]
 8000618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800061c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000620:	edc7 7a01 	vstr	s15, [r7, #4]
 8000624:	793b      	ldrb	r3, [r7, #4]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b2a      	ldr	r3, [pc, #168]	; (80006d4 <GAS_CCTL_Control+0x154>)
 800062a:	70da      	strb	r2, [r3, #3]
	stm32.B.Radiator1_IS = (uint8_t)(CoolingADC.Radiator1_IS* Kr);
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <GAS_CCTL_Control+0x150>)
 800062e:	891b      	ldrh	r3, [r3, #8]
 8000630:	ee07 3a90 	vmov	s15, r3
 8000634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000638:	edd7 7a05 	vldr	s15, [r7, #20]
 800063c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000644:	edc7 7a01 	vstr	s15, [r7, #4]
 8000648:	793b      	ldrb	r3, [r7, #4]
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <GAS_CCTL_Control+0x154>)
 800064e:	711a      	strb	r2, [r3, #4]
	stm32.B.WaterPump0_IS = (uint8_t)(CoolingADC.WaterPump0_IS*Kw);
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <GAS_CCTL_Control+0x150>)
 8000652:	885b      	ldrh	r3, [r3, #2]
 8000654:	ee07 3a90 	vmov	s15, r3
 8000658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800065c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000668:	edc7 7a01 	vstr	s15, [r7, #4]
 800066c:	793b      	ldrb	r3, [r7, #4]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <GAS_CCTL_Control+0x154>)
 8000672:	705a      	strb	r2, [r3, #1]
	stm32.B.WaterPump1_IS = (uint8_t)(CoolingADC.WaterPump1_IS*Kw);
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <GAS_CCTL_Control+0x150>)
 8000676:	889b      	ldrh	r3, [r3, #4]
 8000678:	ee07 3a90 	vmov	s15, r3
 800067c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000680:	edd7 7a04 	vldr	s15, [r7, #16]
 8000684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800068c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000690:	793b      	ldrb	r3, [r7, #4]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <GAS_CCTL_Control+0x154>)
 8000696:	709a      	strb	r2, [r3, #2]
	stm32.B.WaterPump_P = (uint8_t)(CoolingADC.WaterPump_P*Kp);
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <GAS_CCTL_Control+0x150>)
 800069a:	895b      	ldrh	r3, [r3, #10]
 800069c:	ee07 3a90 	vmov	s15, r3
 80006a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80006a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80006b4:	793b      	ldrb	r3, [r7, #4]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <GAS_CCTL_Control+0x154>)
 80006ba:	715a      	strb	r2, [r3, #5]

}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000030 	.word	0x20000030
 80006c8:	40010000 	.word	0x40010000
 80006cc:	40010400 	.word	0x40010400
 80006d0:	20000040 	.word	0x20000040
 80006d4:	20000038 	.word	0x20000038

080006d8 <GAS_Can_txSetting>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef* hcan);
//void GAS_Can_recieveMessage(CAN_HandleTypeDef *hcan);

void GAS_Can_txSetting(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	/*
	 * CAN tx set function
	 * set ID, IDE, DLC
	 */
	canTxHeader.StdId = STM32_ID;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <GAS_Can_txSetting+0x2c>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <GAS_Can_txSetting+0x30>)
 80006e4:	601a      	str	r2, [r3, #0]
	canTxHeader.IDE	= CAN_ID_EXT;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <GAS_Can_txSetting+0x30>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	609a      	str	r2, [r3, #8]
	canTxHeader.RTR	= CAN_RTR_DATA;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <GAS_Can_txSetting+0x30>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
	canTxHeader.DLC	=	8;
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <GAS_Can_txSetting+0x30>)
 80006f4:	2208      	movs	r2, #8
 80006f6:	611a      	str	r2, [r3, #16]


}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000000 	.word	0x20000000
 8000708:	2000007c 	.word	0x2000007c

0800070c <GAS_Can_rxSetting>:

void GAS_Can_rxSetting(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	 * CAN rx set function
	 * IdHigh, IdLow for each 16bit in 29bit ID
	 * Set different FIFO and FilterBank
	 *
	 */
	sFilterConfig.FilterIdHigh = (TC275_ID<<3)>>16;				/*first 2byte in 29bit (shift need to IED,RTR,0)*/
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <GAS_Can_rxSetting+0x6c>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	141b      	asrs	r3, r3, #16
 8000718:	461a      	mov	r2, r3
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <GAS_Can_rxSetting+0x70>)
 800071c:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = (0xffff & (TC275_ID << 3)) | (1<<2);	/*second 2byte in 29bit + IDE (shift need to IED,RTR,0/)*/
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <GAS_Can_rxSetting+0x6c>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	b29b      	uxth	r3, r3
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	461a      	mov	r2, r3
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <GAS_Can_rxSetting+0x70>)
 800072e:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <GAS_Can_rxSetting+0x70>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <GAS_Can_rxSetting+0x70>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <GAS_Can_rxSetting+0x70>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterBank = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <GAS_Can_rxSetting+0x70>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <GAS_Can_rxSetting+0x70>)
 800074a:	2201      	movs	r2, #1
 800074c:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <GAS_Can_rxSetting+0x70>)
 8000750:	2201      	movs	r2, #1
 8000752:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <GAS_Can_rxSetting+0x70>)
 8000756:	2201      	movs	r2, #1
 8000758:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <GAS_Can_rxSetting+0x70>)
 800075c:	220e      	movs	r2, #14
 800075e:	625a      	str	r2, [r3, #36]	; 0x24

	 if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8000760:	4906      	ldr	r1, [pc, #24]	; (800077c <GAS_Can_rxSetting+0x70>)
 8000762:	4807      	ldr	r0, [pc, #28]	; (8000780 <GAS_Can_rxSetting+0x74>)
 8000764:	f001 fe04 	bl	8002370 <HAL_CAN_ConfigFilter>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <GAS_Can_rxSetting+0x66>
	  {
	    /* Filter configuration Error */
	    Error_Handler();
 800076e:	f000 fc7f 	bl	8001070 <Error_Handler>
	  }

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000002 	.word	0x20000002
 800077c:	20000054 	.word	0x20000054
 8000780:	200001b0 	.word	0x200001b0

08000784 <GAS_Can_init>:

void GAS_Can_init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	/*
	 * GAS_CAN_init
	 * ActiveNotification for Rx message pending
	 */
	GAS_Can_txSetting();
 8000788:	f7ff ffa6 	bl	80006d8 <GAS_Can_txSetting>
	GAS_Can_rxSetting();
 800078c:	f7ff ffbe 	bl	800070c <GAS_Can_rxSetting>
	HAL_CAN_Start(&hcan2);
 8000790:	480b      	ldr	r0, [pc, #44]	; (80007c0 <GAS_Can_init+0x3c>)
 8000792:	f001 fecd 	bl	8002530 <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000796:	2102      	movs	r1, #2
 8000798:	4809      	ldr	r0, [pc, #36]	; (80007c0 <GAS_Can_init+0x3c>)
 800079a:	f002 f81d 	bl	80027d8 <HAL_CAN_ActivateNotification>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <GAS_Can_init+0x24>
	{
	  Error_Handler();
 80007a4:	f000 fc64 	bl	8001070 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80007a8:	2110      	movs	r1, #16
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <GAS_Can_init+0x3c>)
 80007ac:	f002 f814 	bl	80027d8 <HAL_CAN_ActivateNotification>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <GAS_Can_init+0x36>
	{
	  Error_Handler();
 80007b6:	f000 fc5b 	bl	8001070 <Error_Handler>
	}


}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200001b0 	.word	0x200001b0

080007c4 <GAS_Can_sendMessage>:

void GAS_Can_sendMessage()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	/*
	 * CAN send message function
	 * send Message data with sendData[8]
	 */
	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 80007c8:	4806      	ldr	r0, [pc, #24]	; (80007e4 <GAS_Can_sendMessage+0x20>)
 80007ca:	f001 ffd0 	bl	800276e <HAL_CAN_GetTxMailboxesFreeLevel>
 80007ce:	4602      	mov	r2, r0
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <GAS_Can_sendMessage+0x24>)
 80007d2:	601a      	str	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan2, &canTxHeader, &stm32.TxData[0], &TxMailBox);
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <GAS_Can_sendMessage+0x24>)
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <GAS_Can_sendMessage+0x28>)
 80007d8:	4905      	ldr	r1, [pc, #20]	; (80007f0 <GAS_Can_sendMessage+0x2c>)
 80007da:	4802      	ldr	r0, [pc, #8]	; (80007e4 <GAS_Can_sendMessage+0x20>)
 80007dc:	f001 feec 	bl	80025b8 <HAL_CAN_AddTxMessage>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200001b0 	.word	0x200001b0
 80007e8:	2000009c 	.word	0x2000009c
 80007ec:	20000038 	.word	0x20000038
 80007f0:	2000007c 	.word	0x2000007c

080007f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db0a      	blt.n	800081e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	490c      	ldr	r1, [pc, #48]	; (8000840 <__NVIC_SetPriority+0x4c>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800081c:	e00a      	b.n	8000834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4908      	ldr	r1, [pc, #32]	; (8000844 <__NVIC_SetPriority+0x50>)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	3b04      	subs	r3, #4
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	440b      	add	r3, r1
 8000832:	761a      	strb	r2, [r3, #24]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000e100 	.word	0xe000e100
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000858:	d301      	bcc.n	800085e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800085a:	2301      	movs	r3, #1
 800085c:	e00f      	b.n	800087e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <SysTick_Config+0x40>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000866:	210f      	movs	r1, #15
 8000868:	f04f 30ff 	mov.w	r0, #4294967295
 800086c:	f7ff ffc2 	bl	80007f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <SysTick_Config+0x40>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <SysTick_Config+0x40>)
 8000878:	2207      	movs	r2, #7
 800087a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	e000e010 	.word	0xe000e010

0800088c <GAS_Scheduler_init>:
void GAS_Scheduler_taskCounter_1000ms(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void GAS_Schduler(void);

void GAS_Scheduler_init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

	SysTick_Config(SystemCoreClock/1000);
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <GAS_Scheduler_init+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <GAS_Scheduler_init+0x2c>)
 8000896:	fba2 2303 	umull	r2, r3, r2, r3
 800089a:	099b      	lsrs	r3, r3, #6
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ffd3 	bl	8000848 <SysTick_Config>

//********CAN initialization********
	GAS_Can_init();
 80008a2:	f7ff ff6f 	bl	8000784 <GAS_Can_init>

//********PWM initialization********
	GAS_CCTL_outputInit();
 80008a6:	f7ff fe0f 	bl	80004c8 <GAS_CCTL_outputInit>
//	GAS_PWM_outputInit();

//********ADC initialization*******
	GAS_Vadc_init();
 80008aa:	f000 f89f 	bl	80009ec <GAS_Vadc_init>
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000008 	.word	0x20000008
 80008b8:	10624dd3 	.word	0x10624dd3

080008bc <GAS_Scheduler_taskCounter_1ms>:



void GAS_Scheduler_taskCounter_1ms(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	GAS_CCTL_Control();
 80008c0:	f7ff fe5e 	bl	8000580 <GAS_CCTL_Control>
	GAS_Can_sendMessage();
 80008c4:	f7ff ff7e 	bl	80007c4 <GAS_Can_sendMessage>
//	GAS_PWM_changeOutput_ch1(ValueOfADC[0]);
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <GAS_Scheduler_taskCounter_10ms>:

void GAS_Scheduler_taskCounter_10ms(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
//	GAS_Can_sendMessage();

}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <GAS_Scheduler_taskCounter_100ms>:

void GAS_Scheduler_taskCounter_100ms(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BlueLED_Pin);
 80008e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <GAS_Scheduler_taskCounter_100ms+0x14>)
 80008e6:	f002 fdf2 	bl	80034ce <HAL_GPIO_TogglePin>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40020400 	.word	0x40020400

080008f4 <GAS_Scheduler_taskCounter_1000ms>:
void GAS_Scheduler_taskCounter_1000ms(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void){
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
	gTimerCnt++;
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <HAL_SYSTICK_Callback+0x7c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <HAL_SYSTICK_Callback+0x7c>)
 8000910:	6013      	str	r3, [r2, #0]
			gTask.flag_1ms=True;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <HAL_SYSTICK_Callback+0x80>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
			if(gTimerCnt % 10 == 0)
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <HAL_SYSTICK_Callback+0x7c>)
 800091a:	6819      	ldr	r1, [r3, #0]
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <HAL_SYSTICK_Callback+0x84>)
 800091e:	fb83 2301 	smull	r2, r3, r3, r1
 8000922:	109a      	asrs	r2, r3, #2
 8000924:	17cb      	asrs	r3, r1, #31
 8000926:	1ad2      	subs	r2, r2, r3
 8000928:	4613      	mov	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	1aca      	subs	r2, r1, r3
 8000932:	2a00      	cmp	r2, #0
 8000934:	d102      	bne.n	800093c <HAL_SYSTICK_Callback+0x38>
			{
				gTask.flag_10ms=True;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <HAL_SYSTICK_Callback+0x80>)
 8000938:	2201      	movs	r2, #1
 800093a:	705a      	strb	r2, [r3, #1]
			}
			if(gTimerCnt % 100 == 0)
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_SYSTICK_Callback+0x7c>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_SYSTICK_Callback+0x88>)
 8000942:	fb83 1302 	smull	r1, r3, r3, r2
 8000946:	1159      	asrs	r1, r3, #5
 8000948:	17d3      	asrs	r3, r2, #31
 800094a:	1acb      	subs	r3, r1, r3
 800094c:	2164      	movs	r1, #100	; 0x64
 800094e:	fb01 f303 	mul.w	r3, r1, r3
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <HAL_SYSTICK_Callback+0x5a>
			{
				gTask.flag_100ms=True;
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_SYSTICK_Callback+0x80>)
 800095a:	2201      	movs	r2, #1
 800095c:	709a      	strb	r2, [r3, #2]
			}

			if(gTimerCnt == 1000)
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_SYSTICK_Callback+0x7c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000966:	d105      	bne.n	8000974 <HAL_SYSTICK_Callback+0x70>
			{
				gTask.flag_1000ms=True;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_SYSTICK_Callback+0x80>)
 800096a:	2201      	movs	r2, #1
 800096c:	70da      	strb	r2, [r3, #3]
				gTimerCnt = 0;
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <HAL_SYSTICK_Callback+0x7c>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
			}
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	200000f4 	.word	0x200000f4
 8000984:	200000ec 	.word	0x200000ec
 8000988:	66666667 	.word	0x66666667
 800098c:	51eb851f 	.word	0x51eb851f

08000990 <GAS_Scheduler>:
//		gTimerCnt = 0;
//	}
//}

void GAS_Scheduler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0


	if(gTask.flag_1ms == True)
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <GAS_Scheduler+0x58>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b01      	cmp	r3, #1
 800099c:	d104      	bne.n	80009a8 <GAS_Scheduler+0x18>
	{
		gTask.flag_1ms = False;
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <GAS_Scheduler+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
		GAS_Scheduler_taskCounter_1ms();
 80009a4:	f7ff ff8a 	bl	80008bc <GAS_Scheduler_taskCounter_1ms>
	}

	if(gTask.flag_10ms == True)
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <GAS_Scheduler+0x58>)
 80009aa:	785b      	ldrb	r3, [r3, #1]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d104      	bne.n	80009bc <GAS_Scheduler+0x2c>
	{
		gTask.flag_10ms = False;
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <GAS_Scheduler+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	705a      	strb	r2, [r3, #1]
		GAS_Scheduler_taskCounter_10ms();
 80009b8:	f7ff ff88 	bl	80008cc <GAS_Scheduler_taskCounter_10ms>
	}

	if(gTask.flag_100ms == True)
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <GAS_Scheduler+0x58>)
 80009be:	789b      	ldrb	r3, [r3, #2]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d104      	bne.n	80009d0 <GAS_Scheduler+0x40>
	{
		gTask.flag_100ms = False;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <GAS_Scheduler+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	709a      	strb	r2, [r3, #2]
		GAS_Scheduler_taskCounter_100ms();
 80009cc:	f7ff ff86 	bl	80008dc <GAS_Scheduler_taskCounter_100ms>
	}

	if(gTask.flag_1000ms == True)
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <GAS_Scheduler+0x58>)
 80009d2:	78db      	ldrb	r3, [r3, #3]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d104      	bne.n	80009e4 <GAS_Scheduler+0x54>
	{
		gTask.flag_1000ms = False;
 80009da:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <GAS_Scheduler+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	70da      	strb	r2, [r3, #3]
		GAS_Scheduler_taskCounter_1000ms();
 80009e0:	f7ff ff88 	bl	80008f4 <GAS_Scheduler_taskCounter_1000ms>
	}

//	GAS_Can_recieveMessage(&hcan);
//	HAL_CAN_IRQHandler(&hcan);
//	  pin_state=HAL_GPIO_ReadPin(GPIO_PIN_8);
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200000ec 	.word	0x200000ec

080009ec <GAS_Vadc_init>:
void GAS_Vadc_getValue(void);



void GAS_Vadc_init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	if(HAL_ADC_Start_DMA(&hadc1, ValueOfADC, NumberOfVadc) != HAL_OK)
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <GAS_Vadc_init+0x20>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4906      	ldr	r1, [pc, #24]	; (8000a10 <GAS_Vadc_init+0x24>)
 80009f8:	4806      	ldr	r0, [pc, #24]	; (8000a14 <GAS_Vadc_init+0x28>)
 80009fa:	f001 f80d 	bl	8001a18 <HAL_ADC_Start_DMA>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <GAS_Vadc_init+0x1c>
	{
		Error_Handler();
 8000a04:	f000 fb34 	bl	8001070 <Error_Handler>
	}
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000004 	.word	0x20000004
 8000a10:	200000fc 	.word	0x200000fc
 8000a14:	20000108 	.word	0x20000108

08000a18 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1e:	463b      	mov	r3, r7
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a2a:	4b4b      	ldr	r3, [pc, #300]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000a2c:	4a4b      	ldr	r2, [pc, #300]	; (8000b5c <MX_ADC1_Init+0x144>)
 8000a2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a30:	4b49      	ldr	r3, [pc, #292]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000a32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a38:	4b47      	ldr	r3, [pc, #284]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a3e:	4b46      	ldr	r3, [pc, #280]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a44:	4b44      	ldr	r3, [pc, #272]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a4a:	4b43      	ldr	r3, [pc, #268]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a52:	4b41      	ldr	r3, [pc, #260]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a58:	4b3f      	ldr	r3, [pc, #252]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000a5a:	4a41      	ldr	r2, [pc, #260]	; (8000b60 <MX_ADC1_Init+0x148>)
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a5e:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000a64:	4b3c      	ldr	r3, [pc, #240]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000a66:	2208      	movs	r2, #8
 8000a68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a6a:	4b3b      	ldr	r3, [pc, #236]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a72:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a78:	4837      	ldr	r0, [pc, #220]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000a7a:	f000 ff89 	bl	8001990 <HAL_ADC_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a84:	f000 faf4 	bl	8001070 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	4619      	mov	r1, r3
 8000a98:	482f      	ldr	r0, [pc, #188]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000a9a:	f001 f8cd 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000aa4:	f000 fae4 	bl	8001070 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aac:	463b      	mov	r3, r7
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4829      	ldr	r0, [pc, #164]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000ab2:	f001 f8c1 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000abc:	f000 fad8 	bl	8001070 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4823      	ldr	r0, [pc, #140]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000aca:	f001 f8b5 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000ad4:	f000 facc 	bl	8001070 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481d      	ldr	r0, [pc, #116]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000ae2:	f001 f8a9 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000aec:	f000 fac0 	bl	8001070 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8000af0:	2305      	movs	r3, #5
 8000af2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	4619      	mov	r1, r3
 8000af8:	4817      	ldr	r0, [pc, #92]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000afa:	f001 f89d 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000b04:	f000 fab4 	bl	8001070 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 8000b08:	2306      	movs	r3, #6
 8000b0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4811      	ldr	r0, [pc, #68]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000b12:	f001 f891 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000b1c:	f000 faa8 	bl	8001070 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 8000b20:	2307      	movs	r3, #7
 8000b22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	480b      	ldr	r0, [pc, #44]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000b2a:	f001 f885 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000b34:	f000 fa9c 	bl	8001070 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 8;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_ADC1_Init+0x140>)
 8000b42:	f001 f879 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000b4c:	f000 fa90 	bl	8001070 <Error_Handler>
  }

}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000108 	.word	0x20000108
 8000b5c:	40012000 	.word	0x40012000
 8000b60:	0f000001 	.word	0x0f000001

08000b64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a3c      	ldr	r2, [pc, #240]	; (8000c74 <HAL_ADC_MspInit+0x110>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d171      	bne.n	8000c6a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b3b      	ldr	r3, [pc, #236]	; (8000c78 <HAL_ADC_MspInit+0x114>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4a3a      	ldr	r2, [pc, #232]	; (8000c78 <HAL_ADC_MspInit+0x114>)
 8000b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b94:	6453      	str	r3, [r2, #68]	; 0x44
 8000b96:	4b38      	ldr	r3, [pc, #224]	; (8000c78 <HAL_ADC_MspInit+0x114>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <HAL_ADC_MspInit+0x114>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a33      	ldr	r2, [pc, #204]	; (8000c78 <HAL_ADC_MspInit+0x114>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <HAL_ADC_MspInit+0x114>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <HAL_ADC_MspInit+0x114>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a2c      	ldr	r2, [pc, #176]	; (8000c78 <HAL_ADC_MspInit+0x114>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <HAL_ADC_MspInit+0x114>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bda:	230e      	movs	r3, #14
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bde:	2303      	movs	r3, #3
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4823      	ldr	r0, [pc, #140]	; (8000c7c <HAL_ADC_MspInit+0x118>)
 8000bee:	f002 fabb 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bf2:	231f      	movs	r3, #31
 8000bf4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	481e      	ldr	r0, [pc, #120]	; (8000c80 <HAL_ADC_MspInit+0x11c>)
 8000c06:	f002 faaf 	bl	8003168 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <HAL_ADC_MspInit+0x120>)
 8000c0c:	4a1e      	ldr	r2, [pc, #120]	; (8000c88 <HAL_ADC_MspInit+0x124>)
 8000c0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_ADC_MspInit+0x120>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <HAL_ADC_MspInit+0x120>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_ADC_MspInit+0x120>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_ADC_MspInit+0x120>)
 8000c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_ADC_MspInit+0x120>)
 8000c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_ADC_MspInit+0x120>)
 8000c34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_ADC_MspInit+0x120>)
 8000c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c40:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_ADC_MspInit+0x120>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_ADC_MspInit+0x120>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <HAL_ADC_MspInit+0x120>)
 8000c50:	f001 ff1c 	bl	8002a8c <HAL_DMA_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000c5a:	f000 fa09 	bl	8001070 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_ADC_MspInit+0x120>)
 8000c62:	639a      	str	r2, [r3, #56]	; 0x38
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_ADC_MspInit+0x120>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40012000 	.word	0x40012000
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	20000150 	.word	0x20000150
 8000c88:	40026410 	.word	0x40026410

08000c8c <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <MX_CAN2_Init+0x64>)
 8000c92:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <MX_CAN2_Init+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 14;
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_CAN2_Init+0x64>)
 8000c98:	220e      	movs	r2, #14
 8000c9a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_CAN2_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_CAN2_Init+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_CAN2_Init+0x64>)
 8000caa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cae:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_CAN2_Init+0x64>)
 8000cb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000cb6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <MX_CAN2_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_CAN2_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <MX_CAN2_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_CAN2_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <MX_CAN2_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_CAN2_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <MX_CAN2_Init+0x64>)
 8000cde:	f001 fa4b 	bl	8002178 <HAL_CAN_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000ce8:	f000 f9c2 	bl	8001070 <Error_Handler>
  }

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200001b0 	.word	0x200001b0
 8000cf4:	40006800 	.word	0x40006800

08000cf8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a20      	ldr	r2, [pc, #128]	; (8000d98 <HAL_CAN_MspInit+0xa0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d13a      	bne.n	8000d90 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <HAL_CAN_MspInit+0xa4>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a1e      	ldr	r2, [pc, #120]	; (8000d9c <HAL_CAN_MspInit+0xa4>)
 8000d24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <HAL_CAN_MspInit+0xa4>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_CAN_MspInit+0xa4>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <HAL_CAN_MspInit+0xa4>)
 8000d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_CAN_MspInit+0xa4>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_CAN_MspInit+0xa4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_CAN_MspInit+0xa4>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_CAN_MspInit+0xa4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d6e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000d80:	2309      	movs	r3, #9
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_CAN_MspInit+0xa8>)
 8000d8c:	f002 f9ec 	bl	8003168 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	; 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40006800 	.word	0x40006800
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020400 	.word	0x40020400

08000da4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_CRC_Init+0x20>)
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <MX_CRC_Init+0x24>)
 8000dac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_CRC_Init+0x20>)
 8000db0:	f001 fe4f 	bl	8002a52 <HAL_CRC_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000dba:	f000 f959 	bl	8001070 <Error_Handler>
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001d8 	.word	0x200001d8
 8000dc8:	40023000 	.word	0x40023000

08000dcc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <HAL_CRC_MspInit+0x3c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d10d      	bne.n	8000dfa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_CRC_MspInit+0x40>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_CRC_MspInit+0x40>)
 8000de8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <HAL_CRC_MspInit+0x40>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40023000 	.word	0x40023000
 8000e0c:	40023800 	.word	0x40023800

08000e10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_DMA_Init+0x3c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <MX_DMA_Init+0x3c>)
 8000e20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_DMA_Init+0x3c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2038      	movs	r0, #56	; 0x38
 8000e38:	f001 fdcf 	bl	80029da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e3c:	2038      	movs	r0, #56	; 0x38
 8000e3e:	f001 fde8 	bl	8002a12 <HAL_NVIC_EnableIRQ>

}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b38      	ldr	r3, [pc, #224]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a37      	ldr	r2, [pc, #220]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a30      	ldr	r2, [pc, #192]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a29      	ldr	r2, [pc, #164]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <MX_GPIO_Init+0xfc>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ErrorLED_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000edc:	481c      	ldr	r0, [pc, #112]	; (8000f50 <MX_GPIO_Init+0x100>)
 8000ede:	f002 fadd 	bl	800349c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Radiator1_INH_Pin|Waterpump1_INH_Pin|Radiator0_INH_Pin|WaterPump0_INH_Pin
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8000ee8:	481a      	ldr	r0, [pc, #104]	; (8000f54 <MX_GPIO_Init+0x104>)
 8000eea:	f002 fad7 	bl	800349c <HAL_GPIO_WritePin>
                          |ExternalFan_INH_Pin|BlueLED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PC14 PC15 */
  GPIO_InitStruct.Pin = ErrorLED_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8000eee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	4812      	ldr	r0, [pc, #72]	; (8000f50 <MX_GPIO_Init+0x100>)
 8000f08:	f002 f92e 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <MX_GPIO_Init+0x104>)
 8000f22:	f002 f921 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = Radiator1_INH_Pin|Waterpump1_INH_Pin|Radiator0_INH_Pin|WaterPump0_INH_Pin
 8000f26:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8000f2a:	617b      	str	r3, [r7, #20]
                          |ExternalFan_INH_Pin|BlueLED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_GPIO_Init+0x104>)
 8000f40:	f002 f912 	bl	8003168 <HAL_GPIO_Init>

}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	; 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020400 	.word	0x40020400

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f000 fc84 	bl	8001868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f81a 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f7ff ff74 	bl	8000e50 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f68:	f7ff ff52 	bl	8000e10 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f6c:	f7ff fd54 	bl	8000a18 <MX_ADC1_Init>
  MX_CAN2_Init();
 8000f70:	f7ff fe8c 	bl	8000c8c <MX_CAN2_Init>
  MX_SPI3_Init();
 8000f74:	f000 f888 	bl	8001088 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000f78:	f000 f99c 	bl	80012b4 <MX_TIM1_Init>
  MX_CRC_Init();
 8000f7c:	f7ff ff12 	bl	8000da4 <MX_CRC_Init>
  MX_TIM8_Init();
 8000f80:	f000 fa6a 	bl	8001458 <MX_TIM8_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000f84:	f000 fbcc 	bl	8001720 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM5_Init();
 8000f88:	f000 fa16 	bl	80013b8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  GAS_Scheduler_init();
 8000f8c:	f7ff fc7e 	bl	800088c <GAS_Scheduler_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GAS_Scheduler();
 8000f90:	f7ff fcfe 	bl	8000990 <GAS_Scheduler>
  {
 8000f94:	e7fc      	b.n	8000f90 <main+0x38>
	...

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	2230      	movs	r2, #48	; 0x30
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f004 f942 	bl	8005230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	4b29      	ldr	r3, [pc, #164]	; (8001068 <SystemClock_Config+0xd0>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a28      	ldr	r2, [pc, #160]	; (8001068 <SystemClock_Config+0xd0>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <SystemClock_Config+0xd0>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <SystemClock_Config+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a22      	ldr	r2, [pc, #136]	; (800106c <SystemClock_Config+0xd4>)
 8000fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <SystemClock_Config+0xd4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001008:	2304      	movs	r3, #4
 800100a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800100c:	23a8      	movs	r3, #168	; 0xa8
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001014:	2307      	movs	r3, #7
 8001016:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0320 	add.w	r3, r7, #32
 800101c:	4618      	mov	r0, r3
 800101e:	f002 fb8f 	bl	8003740 <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001028:	f000 f822 	bl	8001070 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
 800102e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	2302      	movs	r3, #2
 8001032:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001038:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800103c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001042:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2105      	movs	r1, #5
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fde8 	bl	8003c20 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001056:	f000 f80b 	bl	8001070 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800105a:	f002 fec7 	bl	8003dec <HAL_RCC_EnableCSS>
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	; 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	HAL_GPIO_WritePin(GPIOC,ErrorLED_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107c:	4801      	ldr	r0, [pc, #4]	; (8001084 <Error_Handler+0x14>)
 800107e:	f002 fa0d 	bl	800349c <HAL_GPIO_WritePin>
 8001082:	e7f8      	b.n	8001076 <Error_Handler+0x6>
 8001084:	40020800 	.word	0x40020800

08001088 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_SPI3_Init+0x64>)
 800108e:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <MX_SPI3_Init+0x68>)
 8001090:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_SPI3_Init+0x64>)
 8001094:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001098:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_SPI3_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_SPI3_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_SPI3_Init+0x64>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_SPI3_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_SPI3_Init+0x64>)
 80010b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010b8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_SPI3_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MX_SPI3_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_SPI3_Init+0x64>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_SPI3_Init+0x64>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_SPI3_Init+0x64>)
 80010d4:	220a      	movs	r2, #10
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_SPI3_Init+0x64>)
 80010da:	f002 ff86 	bl	8003fea <HAL_SPI_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80010e4:	f7ff ffc4 	bl	8001070 <Error_Handler>
  }

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200001e0 	.word	0x200001e0
 80010f0:	40003c00 	.word	0x40003c00

080010f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a29      	ldr	r2, [pc, #164]	; (80011b8 <HAL_SPI_MspInit+0xc4>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d14b      	bne.n	80011ae <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <HAL_SPI_MspInit+0xc8>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a27      	ldr	r2, [pc, #156]	; (80011bc <HAL_SPI_MspInit+0xc8>)
 8001120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <HAL_SPI_MspInit+0xc8>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <HAL_SPI_MspInit+0xc8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a20      	ldr	r2, [pc, #128]	; (80011bc <HAL_SPI_MspInit+0xc8>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <HAL_SPI_MspInit+0xc8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_SPI_MspInit+0xc8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a19      	ldr	r2, [pc, #100]	; (80011bc <HAL_SPI_MspInit+0xc8>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_SPI_MspInit+0xc8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800116a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800117c:	2306      	movs	r3, #6
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	480e      	ldr	r0, [pc, #56]	; (80011c0 <HAL_SPI_MspInit+0xcc>)
 8001188:	f001 ffee 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800118c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800119e:	2306      	movs	r3, #6
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <HAL_SPI_MspInit+0xd0>)
 80011aa:	f001 ffdd 	bl	8003168 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	; 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40003c00 	.word	0x40003c00
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40020800 	.word	0x40020800

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_MspInit+0x4c>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_MspInit+0x4c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_MspInit+0x4c>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_MspInit+0x4c>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800121c:	f002 feca 	bl	8003fb4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x8>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f000 fb50 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800126c:	f001 fbeb 	bl	8002a46 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <DMA2_Stream0_IRQHandler+0x10>)
 800127a:	f001 fd0d 	bl	8002c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000150 	.word	0x20000150

08001288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <SystemInit+0x28>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001292:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <SystemInit+0x28>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SystemInit+0x28>)
 800129e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012a2:	609a      	str	r2, [r3, #8]
#endif
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b092      	sub	sp, #72	; 0x48
 80012b8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	615a      	str	r2, [r3, #20]
 80012d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2220      	movs	r2, #32
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 ffa6 	bl	8005230 <memset>

  htim1.Instance = TIM1;
 80012e4:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <MX_TIM1_Init+0xfc>)
 80012e6:	4a33      	ldr	r2, [pc, #204]	; (80013b4 <MX_TIM1_Init+0x100>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80012ea:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <MX_TIM1_Init+0xfc>)
 80012ec:	2247      	movs	r2, #71	; 0x47
 80012ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <MX_TIM1_Init+0xfc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80012f6:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <MX_TIM1_Init+0xfc>)
 80012f8:	2263      	movs	r2, #99	; 0x63
 80012fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <MX_TIM1_Init+0xfc>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001302:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <MX_TIM1_Init+0xfc>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <MX_TIM1_Init+0xfc>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800130e:	4828      	ldr	r0, [pc, #160]	; (80013b0 <MX_TIM1_Init+0xfc>)
 8001310:	f002 fefa 	bl	8004108 <HAL_TIM_PWM_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800131a:	f7ff fea9 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001326:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800132a:	4619      	mov	r1, r3
 800132c:	4820      	ldr	r0, [pc, #128]	; (80013b0 <MX_TIM1_Init+0xfc>)
 800132e:	f003 fbd7 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001338:	f7ff fe9a 	bl	8001070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133c:	2360      	movs	r3, #96	; 0x60
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001348:	2300      	movs	r3, #0
 800134a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	4813      	ldr	r0, [pc, #76]	; (80013b0 <MX_TIM1_Init+0xfc>)
 8001362:	f002 ff3b 	bl	80041dc <HAL_TIM_PWM_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800136c:	f7ff fe80 	bl	8001070 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001388:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	4619      	mov	r1, r3
 8001392:	4807      	ldr	r0, [pc, #28]	; (80013b0 <MX_TIM1_Init+0xfc>)
 8001394:	f003 fc20 	bl	8004bd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800139e:	f7ff fe67 	bl	8001070 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80013a2:	4803      	ldr	r0, [pc, #12]	; (80013b0 <MX_TIM1_Init+0xfc>)
 80013a4:	f000 f958 	bl	8001658 <HAL_TIM_MspPostInit>

}
 80013a8:	bf00      	nop
 80013aa:	3748      	adds	r7, #72	; 0x48
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200002b8 	.word	0x200002b8
 80013b4:	40010000 	.word	0x40010000

080013b8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <MX_TIM5_Init+0x98>)
 80013d8:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <MX_TIM5_Init+0x9c>)
 80013da:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013dc:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <MX_TIM5_Init+0x98>)
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_TIM5_Init+0x98>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <MX_TIM5_Init+0x98>)
 80013ea:	f04f 32ff 	mov.w	r2, #4294967295
 80013ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <MX_TIM5_Init+0x98>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <MX_TIM5_Init+0x98>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013fc:	4814      	ldr	r0, [pc, #80]	; (8001450 <MX_TIM5_Init+0x98>)
 80013fe:	f002 fe58 	bl	80040b2 <HAL_TIM_Base_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001408:	f7ff fe32 	bl	8001070 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	4619      	mov	r1, r3
 800141a:	480d      	ldr	r0, [pc, #52]	; (8001450 <MX_TIM5_Init+0x98>)
 800141c:	f002 ffa4 	bl	8004368 <HAL_TIM_SlaveConfigSynchro>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001426:	f7ff fe23 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	; (8001450 <MX_TIM5_Init+0x98>)
 8001438:	f003 fb52 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001442:	f7ff fe15 	bl	8001070 <Error_Handler>
  }

}
 8001446:	bf00      	nop
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000278 	.word	0x20000278
 8001454:	40000c00 	.word	0x40000c00

08001458 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b092      	sub	sp, #72	; 0x48
 800145c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2220      	movs	r2, #32
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f003 fed4 	bl	8005230 <memset>

  htim8.Instance = TIM8;
 8001488:	4b44      	ldr	r3, [pc, #272]	; (800159c <MX_TIM8_Init+0x144>)
 800148a:	4a45      	ldr	r2, [pc, #276]	; (80015a0 <MX_TIM8_Init+0x148>)
 800148c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 71;
 800148e:	4b43      	ldr	r3, [pc, #268]	; (800159c <MX_TIM8_Init+0x144>)
 8001490:	2247      	movs	r2, #71	; 0x47
 8001492:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b41      	ldr	r3, [pc, #260]	; (800159c <MX_TIM8_Init+0x144>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 800149a:	4b40      	ldr	r3, [pc, #256]	; (800159c <MX_TIM8_Init+0x144>)
 800149c:	2263      	movs	r2, #99	; 0x63
 800149e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b3e      	ldr	r3, [pc, #248]	; (800159c <MX_TIM8_Init+0x144>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014a6:	4b3d      	ldr	r3, [pc, #244]	; (800159c <MX_TIM8_Init+0x144>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ac:	4b3b      	ldr	r3, [pc, #236]	; (800159c <MX_TIM8_Init+0x144>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014b2:	483a      	ldr	r0, [pc, #232]	; (800159c <MX_TIM8_Init+0x144>)
 80014b4:	f002 fe28 	bl	8004108 <HAL_TIM_PWM_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 80014be:	f7ff fdd7 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ce:	4619      	mov	r1, r3
 80014d0:	4832      	ldr	r0, [pc, #200]	; (800159c <MX_TIM8_Init+0x144>)
 80014d2:	f003 fb05 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 80014dc:	f7ff fdc8 	bl	8001070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e0:	2360      	movs	r3, #96	; 0x60
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014ec:	2300      	movs	r3, #0
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	4825      	ldr	r0, [pc, #148]	; (800159c <MX_TIM8_Init+0x144>)
 8001506:	f002 fe69 	bl	80041dc <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8001510:	f7ff fdae 	bl	8001070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	2204      	movs	r2, #4
 800151a:	4619      	mov	r1, r3
 800151c:	481f      	ldr	r0, [pc, #124]	; (800159c <MX_TIM8_Init+0x144>)
 800151e:	f002 fe5d 	bl	80041dc <HAL_TIM_PWM_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 8001528:	f7ff fda2 	bl	8001070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	2208      	movs	r2, #8
 8001532:	4619      	mov	r1, r3
 8001534:	4819      	ldr	r0, [pc, #100]	; (800159c <MX_TIM8_Init+0x144>)
 8001536:	f002 fe51 	bl	80041dc <HAL_TIM_PWM_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8001540:	f7ff fd96 	bl	8001070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001548:	220c      	movs	r2, #12
 800154a:	4619      	mov	r1, r3
 800154c:	4813      	ldr	r0, [pc, #76]	; (800159c <MX_TIM8_Init+0x144>)
 800154e:	f002 fe45 	bl	80041dc <HAL_TIM_PWM_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM8_Init+0x104>
  {
    Error_Handler();
 8001558:	f7ff fd8a 	bl	8001070 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001574:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4807      	ldr	r0, [pc, #28]	; (800159c <MX_TIM8_Init+0x144>)
 8001580:	f003 fb2a 	bl	8004bd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM8_Init+0x136>
  {
    Error_Handler();
 800158a:	f7ff fd71 	bl	8001070 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800158e:	4803      	ldr	r0, [pc, #12]	; (800159c <MX_TIM8_Init+0x144>)
 8001590:	f000 f862 	bl	8001658 <HAL_TIM_MspPostInit>

}
 8001594:	bf00      	nop
 8001596:	3748      	adds	r7, #72	; 0x48
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000238 	.word	0x20000238
 80015a0:	40010400 	.word	0x40010400

080015a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a15      	ldr	r2, [pc, #84]	; (8001608 <HAL_TIM_PWM_MspInit+0x64>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10e      	bne.n	80015d4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_TIM_PWM_MspInit+0x68>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <HAL_TIM_PWM_MspInit+0x68>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_TIM_PWM_MspInit+0x68>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80015d2:	e012      	b.n	80015fa <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM8)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <HAL_TIM_PWM_MspInit+0x6c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d10d      	bne.n	80015fa <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_TIM_PWM_MspInit+0x68>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <HAL_TIM_PWM_MspInit+0x68>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <HAL_TIM_PWM_MspInit+0x68>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40010000 	.word	0x40010000
 800160c:	40023800 	.word	0x40023800
 8001610:	40010400 	.word	0x40010400

08001614 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_TIM_Base_MspInit+0x3c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10d      	bne.n	8001642 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_TIM_Base_MspInit+0x40>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <HAL_TIM_Base_MspInit+0x40>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <HAL_TIM_Base_MspInit+0x40>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40000c00 	.word	0x40000c00
 8001654:	40023800 	.word	0x40023800

08001658 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a25      	ldr	r2, [pc, #148]	; (800170c <HAL_TIM_MspPostInit+0xb4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d11f      	bne.n	80016ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_TIM_MspPostInit+0xb8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a23      	ldr	r2, [pc, #140]	; (8001710 <HAL_TIM_MspPostInit+0xb8>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_TIM_MspPostInit+0xb8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4818      	ldr	r0, [pc, #96]	; (8001714 <HAL_TIM_MspPostInit+0xbc>)
 80016b4:	f001 fd58 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80016b8:	e023      	b.n	8001702 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a16      	ldr	r2, [pc, #88]	; (8001718 <HAL_TIM_MspPostInit+0xc0>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d11e      	bne.n	8001702 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_TIM_MspPostInit+0xb8>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_TIM_MspPostInit+0xb8>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6313      	str	r3, [r2, #48]	; 0x30
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_TIM_MspPostInit+0xb8>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80016e0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016f2:	2303      	movs	r3, #3
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <HAL_TIM_MspPostInit+0xc4>)
 80016fe:	f001 fd33 	bl	8003168 <HAL_GPIO_Init>
}
 8001702:	bf00      	nop
 8001704:	3728      	adds	r7, #40	; 0x28
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40010000 	.word	0x40010000
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000
 8001718:	40010400 	.word	0x40010400
 800171c:	40020800 	.word	0x40020800

08001720 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001726:	4a16      	ldr	r2, [pc, #88]	; (8001780 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001728:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800172c:	2206      	movs	r2, #6
 800172e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001732:	2202      	movs	r2, #2
 8001734:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800173e:	2202      	movs	r2, #2
 8001740:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001756:	2200      	movs	r2, #0
 8001758:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800175c:	2200      	movs	r2, #0
 800175e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001762:	2200      	movs	r2, #0
 8001764:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001768:	f001 fecc 	bl	8003504 <HAL_PCD_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8001772:	f7ff fc7d 	bl	8001070 <Error_Handler>
  }

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200002f8 	.word	0x200002f8
 8001780:	40040000 	.word	0x40040000

08001784 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <HAL_PCD_MspInit+0x84>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d12c      	bne.n	8001800 <HAL_PCD_MspInit+0x7c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_PCD_MspInit+0x88>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_PCD_MspInit+0x88>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_PCD_MspInit+0x88>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80017c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80017d4:	230c      	movs	r3, #12
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	480c      	ldr	r0, [pc, #48]	; (8001810 <HAL_PCD_MspInit+0x8c>)
 80017e0:	f001 fcc2 	bl	8003168 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_PCD_MspInit+0x88>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_PCD_MspInit+0x88>)
 80017ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_PCD_MspInit+0x88>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	; 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40040000 	.word	0x40040000
 800180c:	40023800 	.word	0x40023800
 8001810:	40020400 	.word	0x40020400

08001814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800184c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800181a:	e003      	b.n	8001824 <LoopCopyDataInit>

0800181c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800181e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001822:	3104      	adds	r1, #4

08001824 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001824:	480b      	ldr	r0, [pc, #44]	; (8001854 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800182a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800182c:	d3f6      	bcc.n	800181c <CopyDataInit>
  ldr  r2, =_sbss
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001830:	e002      	b.n	8001838 <LoopFillZerobss>

08001832 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001832:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001834:	f842 3b04 	str.w	r3, [r2], #4

08001838 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800183a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800183c:	d3f9      	bcc.n	8001832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800183e:	f7ff fd23 	bl	8001288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001842:	f003 fcd1 	bl	80051e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001846:	f7ff fb87 	bl	8000f58 <main>
  bx  lr    
 800184a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800184c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001850:	08005280 	.word	0x08005280
  ldr  r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001858:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800185c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001860:	20000704 	.word	0x20000704

08001864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC_IRQHandler>
	...

08001868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <HAL_Init+0x40>)
 8001872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_Init+0x40>)
 800187e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_Init+0x40>)
 800188a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f001 f897 	bl	80029c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001896:	2000      	movs	r0, #0
 8001898:	f000 f808 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189c:	f7ff fc94 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x54>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x58>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 f8af 	bl	8002a2e <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f001 f877 	bl	80029da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x5c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000008 	.word	0x20000008
 8001904:	20000010 	.word	0x20000010
 8001908:	2000000c 	.word	0x2000000c

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000010 	.word	0x20000010
 8001930:	20000700 	.word	0x20000700

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000700 	.word	0x20000700

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff ffee 	bl	8001934 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_Delay+0x40>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001972:	bf00      	nop
 8001974:	f7ff ffde 	bl	8001934 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d8f7      	bhi.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000010 	.word	0x20000010

08001990 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e033      	b.n	8001a0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff f8d8 	bl	8000b64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d118      	bne.n	8001a00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019d6:	f023 0302 	bic.w	r3, r3, #2
 80019da:	f043 0202 	orr.w	r2, r3, #2
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fa4a 	bl	8001e7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f023 0303 	bic.w	r3, r3, #3
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
 80019fe:	e001      	b.n	8001a04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Start_DMA+0x1e>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e0cc      	b.n	8001bd0 <HAL_ADC_Start_DMA+0x1b8>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d018      	beq.n	8001a7e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a5c:	4b5e      	ldr	r3, [pc, #376]	; (8001bd8 <HAL_ADC_Start_DMA+0x1c0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a5e      	ldr	r2, [pc, #376]	; (8001bdc <HAL_ADC_Start_DMA+0x1c4>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	0c9a      	lsrs	r2, r3, #18
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a70:	e002      	b.n	8001a78 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f9      	bne.n	8001a72 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	f040 80a0 	bne.w	8001bce <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d007      	beq.n	8001ac0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ab8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001acc:	d106      	bne.n	8001adc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f023 0206 	bic.w	r2, r3, #6
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	645a      	str	r2, [r3, #68]	; 0x44
 8001ada:	e002      	b.n	8001ae2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <HAL_ADC_Start_DMA+0x1c8>)
 8001aec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af2:	4a3c      	ldr	r2, [pc, #240]	; (8001be4 <HAL_ADC_Start_DMA+0x1cc>)
 8001af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afa:	4a3b      	ldr	r2, [pc, #236]	; (8001be8 <HAL_ADC_Start_DMA+0x1d0>)
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b02:	4a3a      	ldr	r2, [pc, #232]	; (8001bec <HAL_ADC_Start_DMA+0x1d4>)
 8001b04:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b0e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b1e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b2e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	334c      	adds	r3, #76	; 0x4c
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f001 f852 	bl	8002be8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d12a      	bne.n	8001ba6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <HAL_ADC_Start_DMA+0x1d8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d015      	beq.n	8001b86 <HAL_ADC_Start_DMA+0x16e>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_ADC_Start_DMA+0x1dc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d105      	bne.n	8001b70 <HAL_ADC_Start_DMA+0x158>
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HAL_ADC_Start_DMA+0x1c8>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00a      	beq.n	8001b86 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <HAL_ADC_Start_DMA+0x1e0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d129      	bne.n	8001bce <HAL_ADC_Start_DMA+0x1b6>
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_ADC_Start_DMA+0x1c8>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	d823      	bhi.n	8001bce <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d11c      	bne.n	8001bce <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	e013      	b.n	8001bce <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_ADC_Start_DMA+0x1d8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d10e      	bne.n	8001bce <HAL_ADC_Start_DMA+0x1b6>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d107      	bne.n	8001bce <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bcc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	431bde83 	.word	0x431bde83
 8001be0:	40012300 	.word	0x40012300
 8001be4:	08002075 	.word	0x08002075
 8001be8:	0800212f 	.word	0x0800212f
 8001bec:	0800214b 	.word	0x0800214b
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	40012100 	.word	0x40012100
 8001bf8:	40012200 	.word	0x40012200

08001bfc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1c>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e105      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x228>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b09      	cmp	r3, #9
 8001c62:	d925      	bls.n	8001cb0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68d9      	ldr	r1, [r3, #12]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	3b1e      	subs	r3, #30
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43da      	mvns	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	400a      	ands	r2, r1
 8001c88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68d9      	ldr	r1, [r3, #12]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4403      	add	r3, r0
 8001ca2:	3b1e      	subs	r3, #30
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	e022      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6919      	ldr	r1, [r3, #16]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6919      	ldr	r1, [r3, #16]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4403      	add	r3, r0
 8001cec:	409a      	lsls	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d824      	bhi.n	8001d48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3b05      	subs	r3, #5
 8001d10:	221f      	movs	r2, #31
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	3b05      	subs	r3, #5
 8001d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	635a      	str	r2, [r3, #52]	; 0x34
 8001d46:	e04c      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b0c      	cmp	r3, #12
 8001d4e:	d824      	bhi.n	8001d9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b23      	subs	r3, #35	; 0x23
 8001d62:	221f      	movs	r2, #31
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	400a      	ands	r2, r1
 8001d70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	3b23      	subs	r3, #35	; 0x23
 8001d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
 8001d98:	e023      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	3b41      	subs	r3, #65	; 0x41
 8001dac:	221f      	movs	r2, #31
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	400a      	ands	r2, r1
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3b41      	subs	r3, #65	; 0x41
 8001dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_ADC_ConfigChannel+0x234>)
 8001de4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a21      	ldr	r2, [pc, #132]	; (8001e70 <HAL_ADC_ConfigChannel+0x238>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d109      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x1cc>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b12      	cmp	r3, #18
 8001df6:	d105      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <HAL_ADC_ConfigChannel+0x238>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d123      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x21e>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d003      	beq.n	8001e1e <HAL_ADC_ConfigChannel+0x1e6>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b11      	cmp	r3, #17
 8001e1c:	d11b      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d111      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_ADC_ConfigChannel+0x23c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a10      	ldr	r2, [pc, #64]	; (8001e78 <HAL_ADC_ConfigChannel+0x240>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	0c9a      	lsrs	r2, r3, #18
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e48:	e002      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f9      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40012300 	.word	0x40012300
 8001e70:	40012000 	.word	0x40012000
 8001e74:	20000008 	.word	0x20000008
 8001e78:	431bde83 	.word	0x431bde83

08001e7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e84:	4b79      	ldr	r3, [pc, #484]	; (800206c <ADC_Init+0x1f0>)
 8001e86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	021a      	lsls	r2, r3, #8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ef6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6899      	ldr	r1, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	4a58      	ldr	r2, [pc, #352]	; (8002070 <ADC_Init+0x1f4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d022      	beq.n	8001f5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6899      	ldr	r1, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6899      	ldr	r1, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	e00f      	b.n	8001f7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0202 	bic.w	r2, r2, #2
 8001f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6899      	ldr	r1, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7e1b      	ldrb	r3, [r3, #24]
 8001f94:	005a      	lsls	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01b      	beq.n	8001fe0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6859      	ldr	r1, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	035a      	lsls	r2, r3, #13
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	e007      	b.n	8001ff0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	3b01      	subs	r3, #1
 800200c:	051a      	lsls	r2, r3, #20
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6899      	ldr	r1, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002032:	025a      	lsls	r2, r3, #9
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	029a      	lsls	r2, r3, #10
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	609a      	str	r2, [r3, #8]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	40012300 	.word	0x40012300
 8002070:	0f000001 	.word	0x0f000001

08002074 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800208a:	2b00      	cmp	r3, #0
 800208c:	d13c      	bne.n	8002108 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d12b      	bne.n	8002100 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d127      	bne.n	8002100 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d119      	bne.n	8002100 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0220 	bic.w	r2, r2, #32
 80020da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f7ff fd7b 	bl	8001bfc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002106:	e00e      	b.n	8002126 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f7ff fd85 	bl	8001c24 <HAL_ADC_ErrorCallback>
}
 800211a:	e004      	b.n	8002126 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff fd67 	bl	8001c10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002156:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2240      	movs	r2, #64	; 0x40
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f043 0204 	orr.w	r2, r3, #4
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff fd5a 	bl	8001c24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e0ed      	b.n	8002366 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d102      	bne.n	800219c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe fdae 	bl	8000cf8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0202 	bic.w	r2, r2, #2
 80021aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ac:	f7ff fbc2 	bl	8001934 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021b2:	e012      	b.n	80021da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021b4:	f7ff fbbe 	bl	8001934 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b0a      	cmp	r3, #10
 80021c0:	d90b      	bls.n	80021da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2205      	movs	r2, #5
 80021d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0c5      	b.n	8002366 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1e5      	bne.n	80021b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021f8:	f7ff fb9c 	bl	8001934 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021fe:	e012      	b.n	8002226 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002200:	f7ff fb98 	bl	8001934 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b0a      	cmp	r3, #10
 800220c:	d90b      	bls.n	8002226 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2205      	movs	r2, #5
 800221e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e09f      	b.n	8002366 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0e5      	beq.n	8002200 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7e1b      	ldrb	r3, [r3, #24]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d108      	bne.n	800224e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e007      	b.n	800225e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800225c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	7e5b      	ldrb	r3, [r3, #25]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d108      	bne.n	8002278 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e007      	b.n	8002288 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002286:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7e9b      	ldrb	r3, [r3, #26]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d108      	bne.n	80022a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0220 	orr.w	r2, r2, #32
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	e007      	b.n	80022b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0220 	bic.w	r2, r2, #32
 80022b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	7edb      	ldrb	r3, [r3, #27]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d108      	bne.n	80022cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0210 	bic.w	r2, r2, #16
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	e007      	b.n	80022dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0210 	orr.w	r2, r2, #16
 80022da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7f1b      	ldrb	r3, [r3, #28]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d108      	bne.n	80022f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0208 	orr.w	r2, r2, #8
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	e007      	b.n	8002306 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0208 	bic.w	r2, r2, #8
 8002304:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7f5b      	ldrb	r3, [r3, #29]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d108      	bne.n	8002320 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0204 	orr.w	r2, r2, #4
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e007      	b.n	8002330 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0204 	bic.w	r2, r2, #4
 800232e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	ea42 0103 	orr.w	r1, r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	1e5a      	subs	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002386:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d003      	beq.n	8002396 <HAL_CAN_ConfigFilter+0x26>
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	2b02      	cmp	r3, #2
 8002392:	f040 80be 	bne.w	8002512 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002396:	4b65      	ldr	r3, [pc, #404]	; (800252c <HAL_CAN_ConfigFilter+0x1bc>)
 8002398:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023a0:	f043 0201 	orr.w	r2, r3, #1
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	431a      	orrs	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2201      	movs	r2, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	401a      	ands	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d123      	bne.n	8002440 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	43db      	mvns	r3, r3
 8002402:	401a      	ands	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800241a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3248      	adds	r2, #72	; 0x48
 8002420:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002434:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002436:	6979      	ldr	r1, [r7, #20]
 8002438:	3348      	adds	r3, #72	; 0x48
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	440b      	add	r3, r1
 800243e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d122      	bne.n	800248e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	431a      	orrs	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002468:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3248      	adds	r2, #72	; 0x48
 800246e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002482:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002484:	6979      	ldr	r1, [r7, #20]
 8002486:	3348      	adds	r3, #72	; 0x48
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	440b      	add	r3, r1
 800248c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	43db      	mvns	r3, r3
 80024a0:	401a      	ands	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80024a8:	e007      	b.n	80024ba <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	401a      	ands	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80024d4:	e007      	b.n	80024e6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	431a      	orrs	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d107      	bne.n	80024fe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002504:	f023 0201 	bic.w	r2, r3, #1
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e006      	b.n	8002520 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
  }
}
 8002520:	4618      	mov	r0, r3
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40006400 	.word	0x40006400

08002530 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d12e      	bne.n	80025a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800255c:	f7ff f9ea 	bl	8001934 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002562:	e012      	b.n	800258a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002564:	f7ff f9e6 	bl	8001934 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b0a      	cmp	r3, #10
 8002570:	d90b      	bls.n	800258a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2205      	movs	r2, #5
 8002582:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e012      	b.n	80025b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1e5      	bne.n	8002564 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e006      	b.n	80025b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
  }
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b089      	sub	sp, #36	; 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025d6:	7ffb      	ldrb	r3, [r7, #31]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d003      	beq.n	80025e4 <HAL_CAN_AddTxMessage+0x2c>
 80025dc:	7ffb      	ldrb	r3, [r7, #31]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	f040 80b8 	bne.w	8002754 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10a      	bne.n	8002604 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80a0 	beq.w	8002744 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	0e1b      	lsrs	r3, r3, #24
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d907      	bls.n	8002624 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e09e      	b.n	8002762 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002624:	2201      	movs	r2, #1
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	409a      	lsls	r2, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10d      	bne.n	8002652 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002640:	68f9      	ldr	r1, [r7, #12]
 8002642:	6809      	ldr	r1, [r1, #0]
 8002644:	431a      	orrs	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3318      	adds	r3, #24
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	440b      	add	r3, r1
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e00f      	b.n	8002672 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800265c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002662:	68f9      	ldr	r1, [r7, #12]
 8002664:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002666:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	3318      	adds	r3, #24
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	440b      	add	r3, r1
 8002670:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3318      	adds	r3, #24
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	440b      	add	r3, r1
 8002682:	3304      	adds	r3, #4
 8002684:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	7d1b      	ldrb	r3, [r3, #20]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d111      	bne.n	80026b2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3318      	adds	r3, #24
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	4413      	add	r3, r2
 800269a:	3304      	adds	r3, #4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	6811      	ldr	r1, [r2, #0]
 80026a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3318      	adds	r3, #24
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	440b      	add	r3, r1
 80026ae:	3304      	adds	r3, #4
 80026b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3307      	adds	r3, #7
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	061a      	lsls	r2, r3, #24
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3306      	adds	r3, #6
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3305      	adds	r3, #5
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	4313      	orrs	r3, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	3204      	adds	r2, #4
 80026d2:	7812      	ldrb	r2, [r2, #0]
 80026d4:	4610      	mov	r0, r2
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	6811      	ldr	r1, [r2, #0]
 80026da:	ea43 0200 	orr.w	r2, r3, r0
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	440b      	add	r3, r1
 80026e4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80026e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3303      	adds	r3, #3
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	061a      	lsls	r2, r3, #24
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3302      	adds	r3, #2
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3301      	adds	r3, #1
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	4313      	orrs	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	7812      	ldrb	r2, [r2, #0]
 800270a:	4610      	mov	r0, r2
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	6811      	ldr	r1, [r2, #0]
 8002710:	ea43 0200 	orr.w	r2, r3, r0
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	440b      	add	r3, r1
 800271a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800271e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3318      	adds	r3, #24
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	4413      	add	r3, r2
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	6811      	ldr	r1, [r2, #0]
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3318      	adds	r3, #24
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	440b      	add	r3, r1
 800273e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e00e      	b.n	8002762 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e006      	b.n	8002762 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
  }
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	; 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002780:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002782:	7afb      	ldrb	r3, [r7, #11]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d002      	beq.n	800278e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002788:	7afb      	ldrb	r3, [r7, #11]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d11d      	bne.n	80027ca <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3301      	adds	r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3301      	adds	r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3301      	adds	r3, #1
 80027c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d002      	beq.n	80027f6 <HAL_CAN_ActivateNotification+0x1e>
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d109      	bne.n	800280a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6959      	ldr	r1, [r3, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e006      	b.n	8002818 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
  }
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <__NVIC_SetPriorityGrouping>:
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <__NVIC_SetPriorityGrouping+0x44>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002840:	4013      	ands	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800284c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002856:	4a04      	ldr	r2, [pc, #16]	; (8002868 <__NVIC_SetPriorityGrouping+0x44>)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	60d3      	str	r3, [r2, #12]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_GetPriorityGrouping>:
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <__NVIC_GetPriorityGrouping+0x18>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	f003 0307 	and.w	r3, r3, #7
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_EnableIRQ>:
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	2b00      	cmp	r3, #0
 8002898:	db0b      	blt.n	80028b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	f003 021f 	and.w	r2, r3, #31
 80028a0:	4907      	ldr	r1, [pc, #28]	; (80028c0 <__NVIC_EnableIRQ+0x38>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2001      	movs	r0, #1
 80028aa:	fa00 f202 	lsl.w	r2, r0, r2
 80028ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000e100 	.word	0xe000e100

080028c4 <__NVIC_SetPriority>:
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	6039      	str	r1, [r7, #0]
 80028ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	db0a      	blt.n	80028ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	490c      	ldr	r1, [pc, #48]	; (8002910 <__NVIC_SetPriority+0x4c>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	0112      	lsls	r2, r2, #4
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	440b      	add	r3, r1
 80028e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028ec:	e00a      	b.n	8002904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4908      	ldr	r1, [pc, #32]	; (8002914 <__NVIC_SetPriority+0x50>)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	3b04      	subs	r3, #4
 80028fc:	0112      	lsls	r2, r2, #4
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	440b      	add	r3, r1
 8002902:	761a      	strb	r2, [r3, #24]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000e100 	.word	0xe000e100
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <NVIC_EncodePriority>:
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f1c3 0307 	rsb	r3, r3, #7
 8002932:	2b04      	cmp	r3, #4
 8002934:	bf28      	it	cs
 8002936:	2304      	movcs	r3, #4
 8002938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3304      	adds	r3, #4
 800293e:	2b06      	cmp	r3, #6
 8002940:	d902      	bls.n	8002948 <NVIC_EncodePriority+0x30>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3b03      	subs	r3, #3
 8002946:	e000      	b.n	800294a <NVIC_EncodePriority+0x32>
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	f04f 32ff 	mov.w	r2, #4294967295
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43da      	mvns	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	401a      	ands	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002960:	f04f 31ff 	mov.w	r1, #4294967295
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	43d9      	mvns	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	4313      	orrs	r3, r2
}
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <SysTick_Config>:
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002990:	d301      	bcc.n	8002996 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002992:	2301      	movs	r3, #1
 8002994:	e00f      	b.n	80029b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <SysTick_Config+0x40>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3b01      	subs	r3, #1
 800299c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299e:	210f      	movs	r1, #15
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f7ff ff8e 	bl	80028c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <SysTick_Config+0x40>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ae:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <SysTick_Config+0x40>)
 80029b0:	2207      	movs	r2, #7
 80029b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	e000e010 	.word	0xe000e010

080029c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff29 	bl	8002824 <__NVIC_SetPriorityGrouping>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ec:	f7ff ff3e 	bl	800286c <__NVIC_GetPriorityGrouping>
 80029f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f7ff ff8e 	bl	8002918 <NVIC_EncodePriority>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff5d 	bl	80028c4 <__NVIC_SetPriority>
}
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff31 	bl	8002888 <__NVIC_EnableIRQ>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ffa2 	bl	8002980 <SysTick_Config>
 8002a3c:	4603      	mov	r3, r0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002a4a:	f7fd ff5b 	bl	8000904 <HAL_SYSTICK_Callback>
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e00e      	b.n	8002a82 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	795b      	ldrb	r3, [r3, #5]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d105      	bne.n	8002a7a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7fe f9a9 	bl	8000dcc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7fe ff4c 	bl	8001934 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e099      	b.n	8002bdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac8:	e00f      	b.n	8002aea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aca:	f7fe ff33 	bl	8001934 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d908      	bls.n	8002aea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e078      	b.n	8002bdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1e8      	bne.n	8002aca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <HAL_DMA_Init+0x158>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d107      	bne.n	8002b54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f023 0307 	bic.w	r3, r3, #7
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d117      	bne.n	8002bae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fa6f 	bl	8003074 <DMA_CheckFifoParam>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2240      	movs	r2, #64	; 0x40
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002baa:	2301      	movs	r3, #1
 8002bac:	e016      	b.n	8002bdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa26 	bl	8003008 <DMA_CalcBaseAndBitshift>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	223f      	movs	r2, #63	; 0x3f
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	f010803f 	.word	0xf010803f

08002be8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_DMA_Start_IT+0x26>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e040      	b.n	8002c90 <HAL_DMA_Start_IT+0xa8>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d12f      	bne.n	8002c82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2202      	movs	r2, #2
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f9b8 	bl	8002fac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	223f      	movs	r2, #63	; 0x3f
 8002c42:	409a      	lsls	r2, r3
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0216 	orr.w	r2, r2, #22
 8002c56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0208 	orr.w	r2, r2, #8
 8002c6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e005      	b.n	8002c8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ca4:	4b92      	ldr	r3, [pc, #584]	; (8002ef0 <HAL_DMA_IRQHandler+0x258>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a92      	ldr	r2, [pc, #584]	; (8002ef4 <HAL_DMA_IRQHandler+0x25c>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	0a9b      	lsrs	r3, r3, #10
 8002cb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	2208      	movs	r2, #8
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01a      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0204 	bic.w	r2, r2, #4
 8002cea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	f043 0201 	orr.w	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	2201      	movs	r2, #1
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d012      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d26:	2201      	movs	r2, #1
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	f043 0202 	orr.w	r2, r3, #2
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3e:	2204      	movs	r2, #4
 8002d40:	409a      	lsls	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d012      	beq.n	8002d70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	f043 0204 	orr.w	r2, r3, #4
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	2210      	movs	r2, #16
 8002d76:	409a      	lsls	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d043      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d03c      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	2210      	movs	r2, #16
 8002d94:	409a      	lsls	r2, r3
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d018      	beq.n	8002dda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d108      	bne.n	8002dc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d024      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	4798      	blx	r3
 8002dc6:	e01f      	b.n	8002e08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01b      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	4798      	blx	r3
 8002dd8:	e016      	b.n	8002e08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d107      	bne.n	8002df8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0208 	bic.w	r2, r2, #8
 8002df6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 808e 	beq.w	8002f36 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8086 	beq.w	8002f36 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2e:	2220      	movs	r2, #32
 8002e30:	409a      	lsls	r2, r3
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b05      	cmp	r3, #5
 8002e40:	d136      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0216 	bic.w	r2, r2, #22
 8002e50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <HAL_DMA_IRQHandler+0x1da>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0208 	bic.w	r2, r2, #8
 8002e80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e86:	223f      	movs	r2, #63	; 0x3f
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d07d      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
        }
        return;
 8002eae:	e078      	b.n	8002fa2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d01c      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d108      	bne.n	8002ede <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d030      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
 8002edc:	e02b      	b.n	8002f36 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d027      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
 8002eee:	e022      	b.n	8002f36 <HAL_DMA_IRQHandler+0x29e>
 8002ef0:	20000008 	.word	0x20000008
 8002ef4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10f      	bne.n	8002f26 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0210 	bic.w	r2, r2, #16
 8002f14:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d032      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d022      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2205      	movs	r2, #5
 8002f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	3301      	adds	r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d307      	bcc.n	8002f7e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f2      	bne.n	8002f62 <HAL_DMA_IRQHandler+0x2ca>
 8002f7c:	e000      	b.n	8002f80 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f7e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	4798      	blx	r3
 8002fa0:	e000      	b.n	8002fa4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002fa2:	bf00      	nop
    }
  }
}
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop

08002fac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b40      	cmp	r3, #64	; 0x40
 8002fd8:	d108      	bne.n	8002fec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fea:	e007      	b.n	8002ffc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	60da      	str	r2, [r3, #12]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3b10      	subs	r3, #16
 8003018:	4a14      	ldr	r2, [pc, #80]	; (800306c <DMA_CalcBaseAndBitshift+0x64>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003022:	4a13      	ldr	r2, [pc, #76]	; (8003070 <DMA_CalcBaseAndBitshift+0x68>)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4413      	add	r3, r2
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b03      	cmp	r3, #3
 8003034:	d909      	bls.n	800304a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800303e:	f023 0303 	bic.w	r3, r3, #3
 8003042:	1d1a      	adds	r2, r3, #4
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	659a      	str	r2, [r3, #88]	; 0x58
 8003048:	e007      	b.n	800305a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003052:	f023 0303 	bic.w	r3, r3, #3
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	aaaaaaab 	.word	0xaaaaaaab
 8003070:	08005268 	.word	0x08005268

08003074 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d11f      	bne.n	80030ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d855      	bhi.n	8003140 <DMA_CheckFifoParam+0xcc>
 8003094:	a201      	add	r2, pc, #4	; (adr r2, 800309c <DMA_CheckFifoParam+0x28>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030bf 	.word	0x080030bf
 80030a4:	080030ad 	.word	0x080030ad
 80030a8:	08003141 	.word	0x08003141
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d045      	beq.n	8003144 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030bc:	e042      	b.n	8003144 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030c6:	d13f      	bne.n	8003148 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030cc:	e03c      	b.n	8003148 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d6:	d121      	bne.n	800311c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d836      	bhi.n	800314c <DMA_CheckFifoParam+0xd8>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <DMA_CheckFifoParam+0x70>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	080030f5 	.word	0x080030f5
 80030e8:	080030fb 	.word	0x080030fb
 80030ec:	080030f5 	.word	0x080030f5
 80030f0:	0800310d 	.word	0x0800310d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      break;
 80030f8:	e02f      	b.n	800315a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d024      	beq.n	8003150 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800310a:	e021      	b.n	8003150 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003114:	d11e      	bne.n	8003154 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800311a:	e01b      	b.n	8003154 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d902      	bls.n	8003128 <DMA_CheckFifoParam+0xb4>
 8003122:	2b03      	cmp	r3, #3
 8003124:	d003      	beq.n	800312e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003126:	e018      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      break;
 800312c:	e015      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00e      	beq.n	8003158 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
      break;
 800313e:	e00b      	b.n	8003158 <DMA_CheckFifoParam+0xe4>
      break;
 8003140:	bf00      	nop
 8003142:	e00a      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      break;
 8003144:	bf00      	nop
 8003146:	e008      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      break;
 8003148:	bf00      	nop
 800314a:	e006      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      break;
 800314c:	bf00      	nop
 800314e:	e004      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      break;
 8003150:	bf00      	nop
 8003152:	e002      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      break;   
 8003154:	bf00      	nop
 8003156:	e000      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      break;
 8003158:	bf00      	nop
    }
  } 
  
  return status; 
 800315a:	7bfb      	ldrb	r3, [r7, #15]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e16b      	b.n	800345c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003184:	2201      	movs	r2, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	429a      	cmp	r2, r3
 800319e:	f040 815a 	bne.w	8003456 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d00b      	beq.n	80031c2 <HAL_GPIO_Init+0x5a>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d007      	beq.n	80031c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031b6:	2b11      	cmp	r3, #17
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b12      	cmp	r3, #18
 80031c0:	d130      	bne.n	8003224 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	2203      	movs	r2, #3
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f8:	2201      	movs	r2, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 0201 	and.w	r2, r3, #1
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	2203      	movs	r2, #3
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0xfc>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b12      	cmp	r3, #18
 8003262:	d123      	bne.n	80032ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	08da      	lsrs	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3208      	adds	r2, #8
 800326c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	220f      	movs	r2, #15
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	08da      	lsrs	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3208      	adds	r2, #8
 80032a6:	69b9      	ldr	r1, [r7, #24]
 80032a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0203 	and.w	r2, r3, #3
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80b4 	beq.w	8003456 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <HAL_GPIO_Init+0x308>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	4a5e      	ldr	r2, [pc, #376]	; (8003470 <HAL_GPIO_Init+0x308>)
 80032f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fc:	6453      	str	r3, [r2, #68]	; 0x44
 80032fe:	4b5c      	ldr	r3, [pc, #368]	; (8003470 <HAL_GPIO_Init+0x308>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800330a:	4a5a      	ldr	r2, [pc, #360]	; (8003474 <HAL_GPIO_Init+0x30c>)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	3302      	adds	r3, #2
 8003312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	220f      	movs	r2, #15
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a51      	ldr	r2, [pc, #324]	; (8003478 <HAL_GPIO_Init+0x310>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d02b      	beq.n	800338e <HAL_GPIO_Init+0x226>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a50      	ldr	r2, [pc, #320]	; (800347c <HAL_GPIO_Init+0x314>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d025      	beq.n	800338a <HAL_GPIO_Init+0x222>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4f      	ldr	r2, [pc, #316]	; (8003480 <HAL_GPIO_Init+0x318>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d01f      	beq.n	8003386 <HAL_GPIO_Init+0x21e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4e      	ldr	r2, [pc, #312]	; (8003484 <HAL_GPIO_Init+0x31c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d019      	beq.n	8003382 <HAL_GPIO_Init+0x21a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4d      	ldr	r2, [pc, #308]	; (8003488 <HAL_GPIO_Init+0x320>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_GPIO_Init+0x216>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4c      	ldr	r2, [pc, #304]	; (800348c <HAL_GPIO_Init+0x324>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00d      	beq.n	800337a <HAL_GPIO_Init+0x212>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4b      	ldr	r2, [pc, #300]	; (8003490 <HAL_GPIO_Init+0x328>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d007      	beq.n	8003376 <HAL_GPIO_Init+0x20e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4a      	ldr	r2, [pc, #296]	; (8003494 <HAL_GPIO_Init+0x32c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d101      	bne.n	8003372 <HAL_GPIO_Init+0x20a>
 800336e:	2307      	movs	r3, #7
 8003370:	e00e      	b.n	8003390 <HAL_GPIO_Init+0x228>
 8003372:	2308      	movs	r3, #8
 8003374:	e00c      	b.n	8003390 <HAL_GPIO_Init+0x228>
 8003376:	2306      	movs	r3, #6
 8003378:	e00a      	b.n	8003390 <HAL_GPIO_Init+0x228>
 800337a:	2305      	movs	r3, #5
 800337c:	e008      	b.n	8003390 <HAL_GPIO_Init+0x228>
 800337e:	2304      	movs	r3, #4
 8003380:	e006      	b.n	8003390 <HAL_GPIO_Init+0x228>
 8003382:	2303      	movs	r3, #3
 8003384:	e004      	b.n	8003390 <HAL_GPIO_Init+0x228>
 8003386:	2302      	movs	r3, #2
 8003388:	e002      	b.n	8003390 <HAL_GPIO_Init+0x228>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_GPIO_Init+0x228>
 800338e:	2300      	movs	r3, #0
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	f002 0203 	and.w	r2, r2, #3
 8003396:	0092      	lsls	r2, r2, #2
 8003398:	4093      	lsls	r3, r2
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033a0:	4934      	ldr	r1, [pc, #208]	; (8003474 <HAL_GPIO_Init+0x30c>)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	3302      	adds	r3, #2
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ae:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_GPIO_Init+0x330>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033d2:	4a31      	ldr	r2, [pc, #196]	; (8003498 <HAL_GPIO_Init+0x330>)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033d8:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <HAL_GPIO_Init+0x330>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033fc:	4a26      	ldr	r2, [pc, #152]	; (8003498 <HAL_GPIO_Init+0x330>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003402:	4b25      	ldr	r3, [pc, #148]	; (8003498 <HAL_GPIO_Init+0x330>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003426:	4a1c      	ldr	r2, [pc, #112]	; (8003498 <HAL_GPIO_Init+0x330>)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <HAL_GPIO_Init+0x330>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003450:	4a11      	ldr	r2, [pc, #68]	; (8003498 <HAL_GPIO_Init+0x330>)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3301      	adds	r3, #1
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b0f      	cmp	r3, #15
 8003460:	f67f ae90 	bls.w	8003184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003464:	bf00      	nop
 8003466:	3724      	adds	r7, #36	; 0x24
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40023800 	.word	0x40023800
 8003474:	40013800 	.word	0x40013800
 8003478:	40020000 	.word	0x40020000
 800347c:	40020400 	.word	0x40020400
 8003480:	40020800 	.word	0x40020800
 8003484:	40020c00 	.word	0x40020c00
 8003488:	40021000 	.word	0x40021000
 800348c:	40021400 	.word	0x40021400
 8003490:	40021800 	.word	0x40021800
 8003494:	40021c00 	.word	0x40021c00
 8003498:	40013c00 	.word	0x40013c00

0800349c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]
 80034a8:	4613      	mov	r3, r2
 80034aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034ac:	787b      	ldrb	r3, [r7, #1]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034b2:	887a      	ldrh	r2, [r7, #2]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034b8:	e003      	b.n	80034c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ba:	887b      	ldrh	r3, [r7, #2]
 80034bc:	041a      	lsls	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	619a      	str	r2, [r3, #24]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	460b      	mov	r3, r1
 80034d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	887b      	ldrh	r3, [r7, #2]
 80034e0:	401a      	ands	r2, r3
 80034e2:	887b      	ldrh	r3, [r7, #2]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d104      	bne.n	80034f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034e8:	887b      	ldrh	r3, [r7, #2]
 80034ea:	041a      	lsls	r2, r3, #16
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80034f0:	e002      	b.n	80034f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80034f2:	887a      	ldrh	r2, [r7, #2]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	619a      	str	r2, [r3, #24]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003506:	b08f      	sub	sp, #60	; 0x3c
 8003508:	af0a      	add	r7, sp, #40	; 0x28
 800350a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e10f      	b.n	8003736 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d106      	bne.n	8003536 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fe f927 	bl	8001784 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2203      	movs	r2, #3
 800353a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f001 fbf2 	bl	8004d3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	687e      	ldr	r6, [r7, #4]
 8003562:	466d      	mov	r5, sp
 8003564:	f106 0410 	add.w	r4, r6, #16
 8003568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800356a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800356c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800356e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003570:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003574:	e885 0003 	stmia.w	r5, {r0, r1}
 8003578:	1d33      	adds	r3, r6, #4
 800357a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800357c:	6838      	ldr	r0, [r7, #0]
 800357e:	f001 fb7d 	bl	8004c7c <USB_CoreInit>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0d0      	b.n	8003736 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fbe0 	bl	8004d60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	e04a      	b.n	800363c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	333d      	adds	r3, #61	; 0x3d
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	333c      	adds	r3, #60	; 0x3c
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	b298      	uxth	r0, r3
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	3342      	adds	r3, #66	; 0x42
 80035e2:	4602      	mov	r2, r0
 80035e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	333f      	adds	r3, #63	; 0x3f
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	3344      	adds	r3, #68	; 0x44
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	3348      	adds	r3, #72	; 0x48
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	3350      	adds	r3, #80	; 0x50
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	3301      	adds	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	7bfa      	ldrb	r2, [r7, #15]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	429a      	cmp	r2, r3
 8003644:	d3af      	bcc.n	80035a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
 800364a:	e044      	b.n	80036d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	3301      	adds	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d3b5      	bcc.n	800364c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	687e      	ldr	r6, [r7, #4]
 80036e8:	466d      	mov	r5, sp
 80036ea:	f106 0410 	add.w	r4, r6, #16
 80036ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80036fe:	1d33      	adds	r3, r6, #4
 8003700:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003702:	6838      	ldr	r0, [r7, #0]
 8003704:	f001 fb56 	bl	8004db4 <USB_DevInit>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e00d      	b.n	8003736 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f001 fd05 	bl	800513e <USB_DevDisconnect>

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e25b      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d075      	beq.n	800384a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375e:	4ba3      	ldr	r3, [pc, #652]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b04      	cmp	r3, #4
 8003768:	d00c      	beq.n	8003784 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376a:	4ba0      	ldr	r3, [pc, #640]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003772:	2b08      	cmp	r3, #8
 8003774:	d112      	bne.n	800379c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003776:	4b9d      	ldr	r3, [pc, #628]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003782:	d10b      	bne.n	800379c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	4b99      	ldr	r3, [pc, #612]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d05b      	beq.n	8003848 <HAL_RCC_OscConfig+0x108>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d157      	bne.n	8003848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e236      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d106      	bne.n	80037b4 <HAL_RCC_OscConfig+0x74>
 80037a6:	4b91      	ldr	r3, [pc, #580]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a90      	ldr	r2, [pc, #576]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e01d      	b.n	80037f0 <HAL_RCC_OscConfig+0xb0>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037bc:	d10c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x98>
 80037be:	4b8b      	ldr	r3, [pc, #556]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a8a      	ldr	r2, [pc, #552]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4b88      	ldr	r3, [pc, #544]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a87      	ldr	r2, [pc, #540]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e00b      	b.n	80037f0 <HAL_RCC_OscConfig+0xb0>
 80037d8:	4b84      	ldr	r3, [pc, #528]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a83      	ldr	r2, [pc, #524]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	4b81      	ldr	r3, [pc, #516]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a80      	ldr	r2, [pc, #512]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d013      	beq.n	8003820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fe f89c 	bl	8001934 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003800:	f7fe f898 	bl	8001934 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e1fb      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003812:	4b76      	ldr	r3, [pc, #472]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0xc0>
 800381e:	e014      	b.n	800384a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fe f888 	bl	8001934 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003828:	f7fe f884 	bl	8001934 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e1e7      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383a:	4b6c      	ldr	r3, [pc, #432]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0xe8>
 8003846:	e000      	b.n	800384a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d063      	beq.n	800391e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003856:	4b65      	ldr	r3, [pc, #404]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00b      	beq.n	800387a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003862:	4b62      	ldr	r3, [pc, #392]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800386a:	2b08      	cmp	r3, #8
 800386c:	d11c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386e:	4b5f      	ldr	r3, [pc, #380]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d116      	bne.n	80038a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387a:	4b5c      	ldr	r3, [pc, #368]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_RCC_OscConfig+0x152>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d001      	beq.n	8003892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e1bb      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003892:	4b56      	ldr	r3, [pc, #344]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4952      	ldr	r1, [pc, #328]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a6:	e03a      	b.n	800391e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b0:	4b4f      	ldr	r3, [pc, #316]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b6:	f7fe f83d 	bl	8001934 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038be:	f7fe f839 	bl	8001934 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e19c      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d0:	4b46      	ldr	r3, [pc, #280]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038dc:	4b43      	ldr	r3, [pc, #268]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4940      	ldr	r1, [pc, #256]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	600b      	str	r3, [r1, #0]
 80038f0:	e015      	b.n	800391e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f2:	4b3f      	ldr	r3, [pc, #252]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fe f81c 	bl	8001934 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003900:	f7fe f818 	bl	8001934 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e17b      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003912:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d030      	beq.n	800398c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003932:	4b30      	ldr	r3, [pc, #192]	; (80039f4 <HAL_RCC_OscConfig+0x2b4>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003938:	f7fd fffc 	bl	8001934 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003940:	f7fd fff8 	bl	8001934 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e15b      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003952:	4b26      	ldr	r3, [pc, #152]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x200>
 800395e:	e015      	b.n	800398c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003960:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_OscConfig+0x2b4>)
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003966:	f7fd ffe5 	bl	8001934 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396e:	f7fd ffe1 	bl	8001934 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e144      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003980:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f0      	bne.n	800396e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a0 	beq.w	8003ada <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10f      	bne.n	80039ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80039b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c6:	2301      	movs	r3, #1
 80039c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_OscConfig+0x2b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d121      	bne.n	8003a1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_RCC_OscConfig+0x2b8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <HAL_RCC_OscConfig+0x2b8>)
 80039dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e2:	f7fd ffa7 	bl	8001934 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	e011      	b.n	8003a0e <HAL_RCC_OscConfig+0x2ce>
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	42470000 	.word	0x42470000
 80039f4:	42470e80 	.word	0x42470e80
 80039f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fc:	f7fd ff9a 	bl	8001934 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e0fd      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0e:	4b81      	ldr	r3, [pc, #516]	; (8003c14 <HAL_RCC_OscConfig+0x4d4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d106      	bne.n	8003a30 <HAL_RCC_OscConfig+0x2f0>
 8003a22:	4b7d      	ldr	r3, [pc, #500]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a26:	4a7c      	ldr	r2, [pc, #496]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2e:	e01c      	b.n	8003a6a <HAL_RCC_OscConfig+0x32a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b05      	cmp	r3, #5
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCC_OscConfig+0x312>
 8003a38:	4b77      	ldr	r3, [pc, #476]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	4a76      	ldr	r2, [pc, #472]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003a3e:	f043 0304 	orr.w	r3, r3, #4
 8003a42:	6713      	str	r3, [r2, #112]	; 0x70
 8003a44:	4b74      	ldr	r3, [pc, #464]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	4a73      	ldr	r2, [pc, #460]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a50:	e00b      	b.n	8003a6a <HAL_RCC_OscConfig+0x32a>
 8003a52:	4b71      	ldr	r3, [pc, #452]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a70      	ldr	r2, [pc, #448]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5e:	4b6e      	ldr	r3, [pc, #440]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	4a6d      	ldr	r2, [pc, #436]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003a64:	f023 0304 	bic.w	r3, r3, #4
 8003a68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d015      	beq.n	8003a9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a72:	f7fd ff5f 	bl	8001934 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a78:	e00a      	b.n	8003a90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7fd ff5b 	bl	8001934 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e0bc      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a90:	4b61      	ldr	r3, [pc, #388]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0ee      	beq.n	8003a7a <HAL_RCC_OscConfig+0x33a>
 8003a9c:	e014      	b.n	8003ac8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9e:	f7fd ff49 	bl	8001934 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa4:	e00a      	b.n	8003abc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7fd ff45 	bl	8001934 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e0a6      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abc:	4b56      	ldr	r3, [pc, #344]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1ee      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d105      	bne.n	8003ada <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ace:	4b52      	ldr	r3, [pc, #328]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	4a51      	ldr	r2, [pc, #324]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 8092 	beq.w	8003c08 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ae4:	4b4c      	ldr	r3, [pc, #304]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d05c      	beq.n	8003baa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d141      	bne.n	8003b7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af8:	4b48      	ldr	r3, [pc, #288]	; (8003c1c <HAL_RCC_OscConfig+0x4dc>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7fd ff19 	bl	8001934 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fd ff15 	bl	8001934 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e078      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b18:	4b3f      	ldr	r3, [pc, #252]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	019b      	lsls	r3, r3, #6
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	085b      	lsrs	r3, r3, #1
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	061b      	lsls	r3, r3, #24
 8003b48:	4933      	ldr	r1, [pc, #204]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b4e:	4b33      	ldr	r3, [pc, #204]	; (8003c1c <HAL_RCC_OscConfig+0x4dc>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fd feee 	bl	8001934 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5c:	f7fd feea 	bl	8001934 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e04d      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6e:	4b2a      	ldr	r3, [pc, #168]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x41c>
 8003b7a:	e045      	b.n	8003c08 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7c:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <HAL_RCC_OscConfig+0x4dc>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fd fed7 	bl	8001934 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8a:	f7fd fed3 	bl	8001934 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e036      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9c:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <HAL_RCC_OscConfig+0x44a>
 8003ba8:	e02e      	b.n	8003c08 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e029      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <HAL_RCC_OscConfig+0x4d8>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d11c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d115      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bde:	4013      	ands	r3, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d10d      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d106      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40007000 	.word	0x40007000
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	42470060 	.word	0x42470060

08003c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0cc      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c34:	4b68      	ldr	r3, [pc, #416]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d90c      	bls.n	8003c5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b65      	ldr	r3, [pc, #404]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4a:	4b63      	ldr	r3, [pc, #396]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d001      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0b8      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d020      	beq.n	8003caa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c74:	4b59      	ldr	r3, [pc, #356]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a58      	ldr	r2, [pc, #352]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c8c:	4b53      	ldr	r3, [pc, #332]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4a52      	ldr	r2, [pc, #328]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c98:	4b50      	ldr	r3, [pc, #320]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	494d      	ldr	r1, [pc, #308]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d044      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d107      	bne.n	8003cce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbe:	4b47      	ldr	r3, [pc, #284]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d119      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e07f      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d003      	beq.n	8003cde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cde:	4b3f      	ldr	r3, [pc, #252]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e06f      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cee:	4b3b      	ldr	r3, [pc, #236]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e067      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfe:	4b37      	ldr	r3, [pc, #220]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f023 0203 	bic.w	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4934      	ldr	r1, [pc, #208]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d10:	f7fd fe10 	bl	8001934 <HAL_GetTick>
 8003d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d18:	f7fd fe0c 	bl	8001934 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e04f      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	4b2b      	ldr	r3, [pc, #172]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 020c 	and.w	r2, r3, #12
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d1eb      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d40:	4b25      	ldr	r3, [pc, #148]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d20c      	bcs.n	8003d68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4e:	4b22      	ldr	r3, [pc, #136]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d56:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e032      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d74:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4916      	ldr	r1, [pc, #88]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d92:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	490e      	ldr	r1, [pc, #56]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003da6:	f000 f82d 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8003daa:	4601      	mov	r1, r0
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	091b      	lsrs	r3, r3, #4
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003db8:	5cd3      	ldrb	r3, [r2, r3]
 8003dba:	fa21 f303 	lsr.w	r3, r1, r3
 8003dbe:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dc2:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd fd70 	bl	80018ac <HAL_InitTick>

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40023c00 	.word	0x40023c00
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	08005258 	.word	0x08005258
 8003de4:	20000008 	.word	0x20000008
 8003de8:	2000000c 	.word	0x2000000c

08003dec <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003df0:	4b03      	ldr	r3, [pc, #12]	; (8003e00 <HAL_RCC_EnableCSS+0x14>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
}
 8003df6:	bf00      	nop
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	4247004c 	.word	0x4247004c

08003e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	2300      	movs	r3, #0
 8003e14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e1a:	4b63      	ldr	r3, [pc, #396]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d007      	beq.n	8003e36 <HAL_RCC_GetSysClockFreq+0x32>
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d008      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x38>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f040 80b4 	bne.w	8003f98 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e30:	4b5e      	ldr	r3, [pc, #376]	; (8003fac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e32:	60bb      	str	r3, [r7, #8]
       break;
 8003e34:	e0b3      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e36:	4b5e      	ldr	r3, [pc, #376]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003e38:	60bb      	str	r3, [r7, #8]
      break;
 8003e3a:	e0b0      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e3c:	4b5a      	ldr	r3, [pc, #360]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e46:	4b58      	ldr	r3, [pc, #352]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d04a      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e52:	4b55      	ldr	r3, [pc, #340]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	099b      	lsrs	r3, r3, #6
 8003e58:	f04f 0400 	mov.w	r4, #0
 8003e5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	ea03 0501 	and.w	r5, r3, r1
 8003e68:	ea04 0602 	and.w	r6, r4, r2
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	4632      	mov	r2, r6
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	f04f 0400 	mov.w	r4, #0
 8003e78:	0154      	lsls	r4, r2, #5
 8003e7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e7e:	014b      	lsls	r3, r1, #5
 8003e80:	4619      	mov	r1, r3
 8003e82:	4622      	mov	r2, r4
 8003e84:	1b49      	subs	r1, r1, r5
 8003e86:	eb62 0206 	sbc.w	r2, r2, r6
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	f04f 0400 	mov.w	r4, #0
 8003e92:	0194      	lsls	r4, r2, #6
 8003e94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e98:	018b      	lsls	r3, r1, #6
 8003e9a:	1a5b      	subs	r3, r3, r1
 8003e9c:	eb64 0402 	sbc.w	r4, r4, r2
 8003ea0:	f04f 0100 	mov.w	r1, #0
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	00e2      	lsls	r2, r4, #3
 8003eaa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003eae:	00d9      	lsls	r1, r3, #3
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4614      	mov	r4, r2
 8003eb4:	195b      	adds	r3, r3, r5
 8003eb6:	eb44 0406 	adc.w	r4, r4, r6
 8003eba:	f04f 0100 	mov.w	r1, #0
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	0262      	lsls	r2, r4, #9
 8003ec4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003ec8:	0259      	lsls	r1, r3, #9
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4614      	mov	r4, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f04f 0400 	mov.w	r4, #0
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4623      	mov	r3, r4
 8003edc:	f7fc f974 	bl	80001c8 <__aeabi_uldivmod>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	e049      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ee8:	4b2f      	ldr	r3, [pc, #188]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	099b      	lsrs	r3, r3, #6
 8003eee:	f04f 0400 	mov.w	r4, #0
 8003ef2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	ea03 0501 	and.w	r5, r3, r1
 8003efe:	ea04 0602 	and.w	r6, r4, r2
 8003f02:	4629      	mov	r1, r5
 8003f04:	4632      	mov	r2, r6
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	f04f 0400 	mov.w	r4, #0
 8003f0e:	0154      	lsls	r4, r2, #5
 8003f10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f14:	014b      	lsls	r3, r1, #5
 8003f16:	4619      	mov	r1, r3
 8003f18:	4622      	mov	r2, r4
 8003f1a:	1b49      	subs	r1, r1, r5
 8003f1c:	eb62 0206 	sbc.w	r2, r2, r6
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	f04f 0400 	mov.w	r4, #0
 8003f28:	0194      	lsls	r4, r2, #6
 8003f2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f2e:	018b      	lsls	r3, r1, #6
 8003f30:	1a5b      	subs	r3, r3, r1
 8003f32:	eb64 0402 	sbc.w	r4, r4, r2
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	00e2      	lsls	r2, r4, #3
 8003f40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f44:	00d9      	lsls	r1, r3, #3
 8003f46:	460b      	mov	r3, r1
 8003f48:	4614      	mov	r4, r2
 8003f4a:	195b      	adds	r3, r3, r5
 8003f4c:	eb44 0406 	adc.w	r4, r4, r6
 8003f50:	f04f 0100 	mov.w	r1, #0
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	02a2      	lsls	r2, r4, #10
 8003f5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f5e:	0299      	lsls	r1, r3, #10
 8003f60:	460b      	mov	r3, r1
 8003f62:	4614      	mov	r4, r2
 8003f64:	4618      	mov	r0, r3
 8003f66:	4621      	mov	r1, r4
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f04f 0400 	mov.w	r4, #0
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4623      	mov	r3, r4
 8003f72:	f7fc f929 	bl	80001c8 <__aeabi_uldivmod>
 8003f76:	4603      	mov	r3, r0
 8003f78:	460c      	mov	r4, r1
 8003f7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	3301      	adds	r3, #1
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	60bb      	str	r3, [r7, #8]
      break;
 8003f96:	e002      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f98:	4b04      	ldr	r3, [pc, #16]	; (8003fac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f9a:	60bb      	str	r3, [r7, #8]
      break;
 8003f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	00f42400 	.word	0x00f42400
 8003fb0:	007a1200 	.word	0x007a1200

08003fb4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc0:	2b80      	cmp	r3, #128	; 0x80
 8003fc2:	d104      	bne.n	8003fce <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003fc4:	f000 f80a 	bl	8003fdc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003fca:	2280      	movs	r2, #128	; 0x80
 8003fcc:	701a      	strb	r2, [r3, #0]
  }
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	4002380e 	.word	0x4002380e

08003fdc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e056      	b.n	80040aa <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fd f86c 	bl	80010f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004032:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	ea42 0103 	orr.w	r1, r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	0c1b      	lsrs	r3, r3, #16
 800407a:	f003 0104 	and.w	r1, r3, #4
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004098:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e01d      	b.n	8004100 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7fd fa9b 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3304      	adds	r3, #4
 80040ee:	4619      	mov	r1, r3
 80040f0:	4610      	mov	r0, r2
 80040f2:	f000 f97b 	bl	80043ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e01d      	b.n	8004156 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fd fa38 	bl	80015a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3304      	adds	r3, #4
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f000 f950 	bl	80043ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2201      	movs	r2, #1
 8004170:	6839      	ldr	r1, [r7, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fc8f 	bl	8004a96 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <HAL_TIM_PWM_Start+0x74>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_TIM_PWM_Start+0x2c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a14      	ldr	r2, [pc, #80]	; (80041d8 <HAL_TIM_PWM_Start+0x78>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d101      	bne.n	8004190 <HAL_TIM_PWM_Start+0x30>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <HAL_TIM_PWM_Start+0x32>
 8004190:	2300      	movs	r3, #0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b06      	cmp	r3, #6
 80041b6:	d007      	beq.n	80041c8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40010400 	.word	0x40010400

080041dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e0b4      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x184>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2202      	movs	r2, #2
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b0c      	cmp	r3, #12
 800420a:	f200 809f 	bhi.w	800434c <HAL_TIM_PWM_ConfigChannel+0x170>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004249 	.word	0x08004249
 8004218:	0800434d 	.word	0x0800434d
 800421c:	0800434d 	.word	0x0800434d
 8004220:	0800434d 	.word	0x0800434d
 8004224:	08004289 	.word	0x08004289
 8004228:	0800434d 	.word	0x0800434d
 800422c:	0800434d 	.word	0x0800434d
 8004230:	0800434d 	.word	0x0800434d
 8004234:	080042cb 	.word	0x080042cb
 8004238:	0800434d 	.word	0x0800434d
 800423c:	0800434d 	.word	0x0800434d
 8004240:	0800434d 	.word	0x0800434d
 8004244:	0800430b 	.word	0x0800430b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f96c 	bl	800452c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0208 	orr.w	r2, r2, #8
 8004262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0204 	bic.w	r2, r2, #4
 8004272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6999      	ldr	r1, [r3, #24]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	619a      	str	r2, [r3, #24]
      break;
 8004286:	e062      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f9bc 	bl	800460c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6999      	ldr	r1, [r3, #24]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	021a      	lsls	r2, r3, #8
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	619a      	str	r2, [r3, #24]
      break;
 80042c8:	e041      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fa11 	bl	80046f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0208 	orr.w	r2, r2, #8
 80042e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0204 	bic.w	r2, r2, #4
 80042f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69d9      	ldr	r1, [r3, #28]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	61da      	str	r2, [r3, #28]
      break;
 8004308:	e021      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fa65 	bl	80047e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69d9      	ldr	r1, [r3, #28]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	021a      	lsls	r2, r3, #8
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	61da      	str	r2, [r3, #28]
      break;
 800434a:	e000      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800434c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_TIM_SlaveConfigSynchro+0x18>
 800437c:	2302      	movs	r3, #2
 800437e:	e031      	b.n	80043e4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004390:	6839      	ldr	r1, [r7, #0]
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fa7a 	bl	800488c <TIM_SlaveTimer_SetConfig>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e018      	b.n	80043e4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043d0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a40      	ldr	r2, [pc, #256]	; (8004500 <TIM_Base_SetConfig+0x114>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440a:	d00f      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a3d      	ldr	r2, [pc, #244]	; (8004504 <TIM_Base_SetConfig+0x118>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00b      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a3c      	ldr	r2, [pc, #240]	; (8004508 <TIM_Base_SetConfig+0x11c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d007      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a3b      	ldr	r2, [pc, #236]	; (800450c <TIM_Base_SetConfig+0x120>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a3a      	ldr	r2, [pc, #232]	; (8004510 <TIM_Base_SetConfig+0x124>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d108      	bne.n	800443e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a2f      	ldr	r2, [pc, #188]	; (8004500 <TIM_Base_SetConfig+0x114>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d02b      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444c:	d027      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a2c      	ldr	r2, [pc, #176]	; (8004504 <TIM_Base_SetConfig+0x118>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d023      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a2b      	ldr	r2, [pc, #172]	; (8004508 <TIM_Base_SetConfig+0x11c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01f      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a2a      	ldr	r2, [pc, #168]	; (800450c <TIM_Base_SetConfig+0x120>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d01b      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a29      	ldr	r2, [pc, #164]	; (8004510 <TIM_Base_SetConfig+0x124>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d017      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a28      	ldr	r2, [pc, #160]	; (8004514 <TIM_Base_SetConfig+0x128>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a27      	ldr	r2, [pc, #156]	; (8004518 <TIM_Base_SetConfig+0x12c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00f      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a26      	ldr	r2, [pc, #152]	; (800451c <TIM_Base_SetConfig+0x130>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00b      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a25      	ldr	r2, [pc, #148]	; (8004520 <TIM_Base_SetConfig+0x134>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a24      	ldr	r2, [pc, #144]	; (8004524 <TIM_Base_SetConfig+0x138>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d003      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a23      	ldr	r2, [pc, #140]	; (8004528 <TIM_Base_SetConfig+0x13c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d108      	bne.n	80044b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <TIM_Base_SetConfig+0x114>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_Base_SetConfig+0xf8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a0c      	ldr	r2, [pc, #48]	; (8004510 <TIM_Base_SetConfig+0x124>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d103      	bne.n	80044ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	615a      	str	r2, [r3, #20]
}
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40010000 	.word	0x40010000
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800
 800450c:	40000c00 	.word	0x40000c00
 8004510:	40010400 	.word	0x40010400
 8004514:	40014000 	.word	0x40014000
 8004518:	40014400 	.word	0x40014400
 800451c:	40014800 	.word	0x40014800
 8004520:	40001800 	.word	0x40001800
 8004524:	40001c00 	.word	0x40001c00
 8004528:	40002000 	.word	0x40002000

0800452c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f023 0201 	bic.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 0302 	bic.w	r3, r3, #2
 8004574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a20      	ldr	r2, [pc, #128]	; (8004604 <TIM_OC1_SetConfig+0xd8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d003      	beq.n	8004590 <TIM_OC1_SetConfig+0x64>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a1f      	ldr	r2, [pc, #124]	; (8004608 <TIM_OC1_SetConfig+0xdc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d10c      	bne.n	80045aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0308 	bic.w	r3, r3, #8
 8004596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a15      	ldr	r2, [pc, #84]	; (8004604 <TIM_OC1_SetConfig+0xd8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d003      	beq.n	80045ba <TIM_OC1_SetConfig+0x8e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a14      	ldr	r2, [pc, #80]	; (8004608 <TIM_OC1_SetConfig+0xdc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d111      	bne.n	80045de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	621a      	str	r2, [r3, #32]
}
 80045f8:	bf00      	nop
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40010000 	.word	0x40010000
 8004608:	40010400 	.word	0x40010400

0800460c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0210 	bic.w	r2, r3, #16
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 0320 	bic.w	r3, r3, #32
 8004656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a22      	ldr	r2, [pc, #136]	; (80046f0 <TIM_OC2_SetConfig+0xe4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_OC2_SetConfig+0x68>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a21      	ldr	r2, [pc, #132]	; (80046f4 <TIM_OC2_SetConfig+0xe8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d10d      	bne.n	8004690 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800467a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800468e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <TIM_OC2_SetConfig+0xe4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_OC2_SetConfig+0x94>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a16      	ldr	r2, [pc, #88]	; (80046f4 <TIM_OC2_SetConfig+0xe8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d113      	bne.n	80046c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	621a      	str	r2, [r3, #32]
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40010000 	.word	0x40010000
 80046f4:	40010400 	.word	0x40010400

080046f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0303 	bic.w	r3, r3, #3
 800472e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a21      	ldr	r2, [pc, #132]	; (80047d8 <TIM_OC3_SetConfig+0xe0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d003      	beq.n	800475e <TIM_OC3_SetConfig+0x66>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a20      	ldr	r2, [pc, #128]	; (80047dc <TIM_OC3_SetConfig+0xe4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d10d      	bne.n	800477a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a16      	ldr	r2, [pc, #88]	; (80047d8 <TIM_OC3_SetConfig+0xe0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_OC3_SetConfig+0x92>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a15      	ldr	r2, [pc, #84]	; (80047dc <TIM_OC3_SetConfig+0xe4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d113      	bne.n	80047b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	621a      	str	r2, [r3, #32]
}
 80047cc:	bf00      	nop
 80047ce:	371c      	adds	r7, #28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40010400 	.word	0x40010400

080047e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800482a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	031b      	lsls	r3, r3, #12
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a12      	ldr	r2, [pc, #72]	; (8004884 <TIM_OC4_SetConfig+0xa4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_OC4_SetConfig+0x68>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a11      	ldr	r2, [pc, #68]	; (8004888 <TIM_OC4_SetConfig+0xa8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d109      	bne.n	800485c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800484e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	019b      	lsls	r3, r3, #6
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	621a      	str	r2, [r3, #32]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40010000 	.word	0x40010000
 8004888:	40010400 	.word	0x40010400

0800488c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f023 0307 	bic.w	r3, r3, #7
 80048b6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b30      	cmp	r3, #48	; 0x30
 80048d0:	d05c      	beq.n	800498c <TIM_SlaveTimer_SetConfig+0x100>
 80048d2:	2b30      	cmp	r3, #48	; 0x30
 80048d4:	d806      	bhi.n	80048e4 <TIM_SlaveTimer_SetConfig+0x58>
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d058      	beq.n	800498c <TIM_SlaveTimer_SetConfig+0x100>
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d056      	beq.n	800498c <TIM_SlaveTimer_SetConfig+0x100>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d054      	beq.n	800498c <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80048e2:	e054      	b.n	800498e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80048e4:	2b50      	cmp	r3, #80	; 0x50
 80048e6:	d03d      	beq.n	8004964 <TIM_SlaveTimer_SetConfig+0xd8>
 80048e8:	2b50      	cmp	r3, #80	; 0x50
 80048ea:	d802      	bhi.n	80048f2 <TIM_SlaveTimer_SetConfig+0x66>
 80048ec:	2b40      	cmp	r3, #64	; 0x40
 80048ee:	d010      	beq.n	8004912 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80048f0:	e04d      	b.n	800498e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80048f2:	2b60      	cmp	r3, #96	; 0x60
 80048f4:	d040      	beq.n	8004978 <TIM_SlaveTimer_SetConfig+0xec>
 80048f6:	2b70      	cmp	r3, #112	; 0x70
 80048f8:	d000      	beq.n	80048fc <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80048fa:	e048      	b.n	800498e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68d9      	ldr	r1, [r3, #12]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f000 f8a3 	bl	8004a56 <TIM_ETR_SetConfig>
      break;
 8004910:	e03d      	b.n	800498e <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b05      	cmp	r3, #5
 8004918:	d101      	bne.n	800491e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e038      	b.n	8004990 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0201 	bic.w	r2, r2, #1
 8004934:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004944:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	621a      	str	r2, [r3, #32]
      break;
 8004962:	e014      	b.n	800498e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	6899      	ldr	r1, [r3, #8]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	461a      	mov	r2, r3
 8004972:	f000 f811 	bl	8004998 <TIM_TI1_ConfigInputStage>
      break;
 8004976:	e00a      	b.n	800498e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	6899      	ldr	r1, [r3, #8]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	461a      	mov	r2, r3
 8004986:	f000 f836 	bl	80049f6 <TIM_TI2_ConfigInputStage>
      break;
 800498a:	e000      	b.n	800498e <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800498c:	bf00      	nop
  }
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 030a 	bic.w	r3, r3, #10
 80049d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b087      	sub	sp, #28
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0210 	bic.w	r2, r3, #16
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	031b      	lsls	r3, r3, #12
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	621a      	str	r2, [r3, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b087      	sub	sp, #28
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	021a      	lsls	r2, r3, #8
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	609a      	str	r2, [r3, #8]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b087      	sub	sp, #28
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f003 031f 	and.w	r3, r3, #31
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1a      	ldr	r2, [r3, #32]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	401a      	ands	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a1a      	ldr	r2, [r3, #32]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	621a      	str	r2, [r3, #32]
}
 8004ad4:	bf00      	nop
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e05a      	b.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a21      	ldr	r2, [pc, #132]	; (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d022      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b44:	d01d      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1d      	ldr	r2, [pc, #116]	; (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d018      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1b      	ldr	r2, [pc, #108]	; (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1a      	ldr	r2, [pc, #104]	; (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00e      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d009      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a17      	ldr	r2, [pc, #92]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d004      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d10c      	bne.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40000800 	.word	0x40000800
 8004bc8:	40000c00 	.word	0x40000c00
 8004bcc:	40010400 	.word	0x40010400
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	40001800 	.word	0x40001800

08004bd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e03d      	b.n	8004c70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	f107 001c 	add.w	r0, r7, #28
 8004c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d122      	bne.n	8004cda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d105      	bne.n	8004cce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fa56 	bl	8005180 <USB_CoreReset>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	e01a      	b.n	8004d10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fa4a 	bl	8005180 <USB_CoreReset>
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	639a      	str	r2, [r3, #56]	; 0x38
 8004d02:	e005      	b.n	8004d10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d10b      	bne.n	8004d2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f043 0206 	orr.w	r2, r3, #6
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f043 0220 	orr.w	r2, r3, #32
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d3a:	b004      	add	sp, #16
 8004d3c:	4770      	bx	lr

08004d3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d106      	bne.n	8004d8c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	60da      	str	r2, [r3, #12]
 8004d8a:	e00b      	b.n	8004da4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	e001      	b.n	8004da4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e003      	b.n	8004dac <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004da4:	2032      	movs	r0, #50	; 0x32
 8004da6:	f7fc fdd1 	bl	800194c <HAL_Delay>

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004db4:	b084      	sub	sp, #16
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b086      	sub	sp, #24
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	e009      	b.n	8004de8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	3340      	adds	r3, #64	; 0x40
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	2200      	movs	r2, #0
 8004de0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	3301      	adds	r3, #1
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b0e      	cmp	r3, #14
 8004dec:	d9f2      	bls.n	8004dd4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d11c      	bne.n	8004e2e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e02:	f043 0302 	orr.w	r3, r3, #2
 8004e06:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	639a      	str	r2, [r3, #56]	; 0x38
 8004e2c:	e00b      	b.n	8004e46 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	2300      	movs	r3, #0
 8004e50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e58:	4619      	mov	r1, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e60:	461a      	mov	r2, r3
 8004e62:	680b      	ldr	r3, [r1, #0]
 8004e64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d10c      	bne.n	8004e86 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d104      	bne.n	8004e7c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e72:	2100      	movs	r1, #0
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f949 	bl	800510c <USB_SetDevSpeed>
 8004e7a:	e008      	b.n	8004e8e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f944 	bl	800510c <USB_SetDevSpeed>
 8004e84:	e003      	b.n	8004e8e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e86:	2103      	movs	r1, #3
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f93f 	bl	800510c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e8e:	2110      	movs	r1, #16
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f8f3 	bl	800507c <USB_FlushTxFifo>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f911 	bl	80050c8 <USB_FlushRxFifo>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ece:	461a      	mov	r2, r3
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	e043      	b.n	8004f62 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ef0:	d118      	bne.n	8004f24 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	461a      	mov	r2, r3
 8004f06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	e013      	b.n	8004f36 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	e008      	b.n	8004f36 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	461a      	mov	r2, r3
 8004f32:	2300      	movs	r3, #0
 8004f34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f42:	461a      	mov	r2, r3
 8004f44:	2300      	movs	r3, #0
 8004f46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f54:	461a      	mov	r2, r3
 8004f56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d3b7      	bcc.n	8004eda <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	613b      	str	r3, [r7, #16]
 8004f6e:	e043      	b.n	8004ff8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f86:	d118      	bne.n	8004fba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	e013      	b.n	8004fcc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	e008      	b.n	8004fcc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	461a      	mov	r2, r3
 8004fda:	2300      	movs	r3, #0
 8004fdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fea:	461a      	mov	r2, r3
 8004fec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ff0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d3b7      	bcc.n	8004f70 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800500e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005012:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005020:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	2b00      	cmp	r3, #0
 8005026:	d105      	bne.n	8005034 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	f043 0210 	orr.w	r2, r3, #16
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699a      	ldr	r2, [r3, #24]
 8005038:	4b0f      	ldr	r3, [pc, #60]	; (8005078 <USB_DevInit+0x2c4>)
 800503a:	4313      	orrs	r3, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d005      	beq.n	8005052 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f043 0208 	orr.w	r2, r3, #8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d107      	bne.n	8005068 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005060:	f043 0304 	orr.w	r3, r3, #4
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005068:	7dfb      	ldrb	r3, [r7, #23]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005074:	b004      	add	sp, #16
 8005076:	4770      	bx	lr
 8005078:	803c3800 	.word	0x803c3800

0800507c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	019b      	lsls	r3, r3, #6
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3301      	adds	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <USB_FlushTxFifo+0x48>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d901      	bls.n	80050a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e006      	b.n	80050b6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d0f0      	beq.n	8005096 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	00030d40 	.word	0x00030d40

080050c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2210      	movs	r2, #16
 80050d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3301      	adds	r3, #1
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4a09      	ldr	r2, [pc, #36]	; (8005108 <USB_FlushRxFifo+0x40>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d901      	bls.n	80050ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e006      	b.n	80050fa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b10      	cmp	r3, #16
 80050f6:	d0f0      	beq.n	80050da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	00030d40 	.word	0x00030d40

0800510c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800512c:	4313      	orrs	r3, r2
 800512e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005158:	f023 0303 	bic.w	r3, r3, #3
 800515c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800516c:	f043 0302 	orr.w	r3, r3, #2
 8005170:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	3301      	adds	r3, #1
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4a13      	ldr	r2, [pc, #76]	; (80051e4 <USB_CoreReset+0x64>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e01b      	b.n	80051d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	daf2      	bge.n	800518c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f043 0201 	orr.w	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3301      	adds	r3, #1
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a09      	ldr	r2, [pc, #36]	; (80051e4 <USB_CoreReset+0x64>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d901      	bls.n	80051c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e006      	b.n	80051d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d0f0      	beq.n	80051b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	00030d40 	.word	0x00030d40

080051e8 <__libc_init_array>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	4e0d      	ldr	r6, [pc, #52]	; (8005220 <__libc_init_array+0x38>)
 80051ec:	4c0d      	ldr	r4, [pc, #52]	; (8005224 <__libc_init_array+0x3c>)
 80051ee:	1ba4      	subs	r4, r4, r6
 80051f0:	10a4      	asrs	r4, r4, #2
 80051f2:	2500      	movs	r5, #0
 80051f4:	42a5      	cmp	r5, r4
 80051f6:	d109      	bne.n	800520c <__libc_init_array+0x24>
 80051f8:	4e0b      	ldr	r6, [pc, #44]	; (8005228 <__libc_init_array+0x40>)
 80051fa:	4c0c      	ldr	r4, [pc, #48]	; (800522c <__libc_init_array+0x44>)
 80051fc:	f000 f820 	bl	8005240 <_init>
 8005200:	1ba4      	subs	r4, r4, r6
 8005202:	10a4      	asrs	r4, r4, #2
 8005204:	2500      	movs	r5, #0
 8005206:	42a5      	cmp	r5, r4
 8005208:	d105      	bne.n	8005216 <__libc_init_array+0x2e>
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005210:	4798      	blx	r3
 8005212:	3501      	adds	r5, #1
 8005214:	e7ee      	b.n	80051f4 <__libc_init_array+0xc>
 8005216:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800521a:	4798      	blx	r3
 800521c:	3501      	adds	r5, #1
 800521e:	e7f2      	b.n	8005206 <__libc_init_array+0x1e>
 8005220:	08005278 	.word	0x08005278
 8005224:	08005278 	.word	0x08005278
 8005228:	08005278 	.word	0x08005278
 800522c:	0800527c 	.word	0x0800527c

08005230 <memset>:
 8005230:	4402      	add	r2, r0
 8005232:	4603      	mov	r3, r0
 8005234:	4293      	cmp	r3, r2
 8005236:	d100      	bne.n	800523a <memset+0xa>
 8005238:	4770      	bx	lr
 800523a:	f803 1b01 	strb.w	r1, [r3], #1
 800523e:	e7f9      	b.n	8005234 <memset+0x4>

08005240 <_init>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	bf00      	nop
 8005244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005246:	bc08      	pop	{r3}
 8005248:	469e      	mov	lr, r3
 800524a:	4770      	bx	lr

0800524c <_fini>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	bf00      	nop
 8005250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005252:	bc08      	pop	{r3}
 8005254:	469e      	mov	lr, r3
 8005256:	4770      	bx	lr
